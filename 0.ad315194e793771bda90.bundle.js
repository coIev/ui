/*! For license information please see 0.ad315194e793771bda90.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{3893:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(process,Buffer,global){function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}function _classCallCheck2(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function __defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass2(Constructor,protoProps,staticProps){return protoProps&&__defineProperties(Constructor.prototype,protoProps),staticProps&&__defineProperties(Constructor,staticProps),Constructor}function _typeof2(obj){return(_typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof2(obj){return typeof obj}:function _typeof2(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof2(call)&&"function"!=typeof call?_assertThisInitialized(self):call}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(target,property,receiver){var base=function _superPropBase(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}__webpack_require__.d(__webpack_exports__,"Arcs",(function(){return Arcs})),__webpack_require__.d(__webpack_exports__,"Atmosphere",(function(){return Atmosphere})),__webpack_require__.d(__webpack_exports__,"Background",(function(){return Background})),__webpack_require__.d(__webpack_exports__,"Callout",(function(){return Callout})),__webpack_require__.d(__webpack_exports__,"CalloutDefinition",(function(){return CalloutDefinition})),__webpack_require__.d(__webpack_exports__,"CalloutManager",(function(){return CalloutManager})),__webpack_require__.d(__webpack_exports__,"Camera",(function(){return Camera})),__webpack_require__.d(__webpack_exports__,"DataStore",(function(){return DataStore})),__webpack_require__.d(__webpack_exports__,"Drawable",(function(){return Drawable})),__webpack_require__.d(__webpack_exports__,"GKUtils",(function(){return GKUtils})),__webpack_require__.d(__webpack_exports__,"Geometry",(function(){return Geometry})),__webpack_require__.d(__webpack_exports__,"GlobeKitView",(function(){return GlobeKitView})),__webpack_require__.d(__webpack_exports__,"Icosphere",(function(){return Icosphere})),__webpack_require__.d(__webpack_exports__,"IcosphereLookup",(function(){return IcosphereLookup})),__webpack_require__.d(__webpack_exports__,"Lookup",(function(){return Lookup})),__webpack_require__.d(__webpack_exports__,"Lowpoly",(function(){return Lowpoly})),__webpack_require__.d(__webpack_exports__,"Points",(function(){return Points})),__webpack_require__.d(__webpack_exports__,"QuadNormal",(function(){return QuadNormal})),__webpack_require__.d(__webpack_exports__,"Renderer",(function(){return Renderer})),__webpack_require__.d(__webpack_exports__,"Scene",(function(){return Scene})),__webpack_require__.d(__webpack_exports__,"ShaderMaterial",(function(){return ShaderMaterial}));var VecType=Float32Array;function create(x,y,z){var dst=new VecType(3);return x&&(dst[0]=x),y&&(dst[1]=y),z&&(dst[2]=z),dst}function add(a,b,dst){return(dst=dst||new VecType(3))[0]=a[0]+b[0],dst[1]=a[1]+b[1],dst[2]=a[2]+b[2],dst}function cross(a,b,dst){dst=dst||new VecType(3);var t1=a[2]*b[0]-a[0]*b[2],t2=a[0]*b[1]-a[1]*b[0];return dst[0]=a[1]*b[2]-a[2]*b[1],dst[1]=t1,dst[2]=t2,dst}function normalize(a,dst){dst=dst||new VecType(3);var lenSq=a[0]*a[0]+a[1]*a[1]+a[2]*a[2],len=Math.sqrt(lenSq);return len>1e-5?(dst[0]=a[0]/len,dst[1]=a[1]/len,dst[2]=a[2]/len):(dst[0]=0,dst[1]=0,dst[2]=0),dst}var xAxis,yAxis,zAxis,MatType=Float32Array;function copy$1(m,dst){return(dst=dst||new MatType(16))[0]=m[0],dst[1]=m[1],dst[2]=m[2],dst[3]=m[3],dst[4]=m[4],dst[5]=m[5],dst[6]=m[6],dst[7]=m[7],dst[8]=m[8],dst[9]=m[9],dst[10]=m[10],dst[11]=m[11],dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15],dst}function identity(dst){return(dst=dst||new MatType(16))[0]=1,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=1,dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=1,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst}function inverse(m,dst){dst=dst||new MatType(16);var m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11],m30=m[12],m31=m[13],m32=m[14],m33=m[15],tmp_0=m22*m33,tmp_1=m32*m23,tmp_2=m12*m33,tmp_3=m32*m13,tmp_4=m12*m23,tmp_5=m22*m13,tmp_6=m02*m33,tmp_7=m32*m03,tmp_8=m02*m23,tmp_9=m22*m03,tmp_10=m02*m13,tmp_11=m12*m03,tmp_12=m20*m31,tmp_13=m30*m21,tmp_14=m10*m31,tmp_15=m30*m11,tmp_16=m10*m21,tmp_17=m20*m11,tmp_18=m00*m31,tmp_19=m30*m01,tmp_20=m00*m21,tmp_21=m20*m01,tmp_22=m00*m11,tmp_23=m10*m01,t0=tmp_0*m11+tmp_3*m21+tmp_4*m31-(tmp_1*m11+tmp_2*m21+tmp_5*m31),t1=tmp_1*m01+tmp_6*m21+tmp_9*m31-(tmp_0*m01+tmp_7*m21+tmp_8*m31),t2=tmp_2*m01+tmp_7*m11+tmp_10*m31-(tmp_3*m01+tmp_6*m11+tmp_11*m31),t3=tmp_5*m01+tmp_8*m11+tmp_11*m21-(tmp_4*m01+tmp_9*m11+tmp_10*m21),d=1/(m00*t0+m10*t1+m20*t2+m30*t3);return dst[0]=d*t0,dst[1]=d*t1,dst[2]=d*t2,dst[3]=d*t3,dst[4]=d*(tmp_1*m10+tmp_2*m20+tmp_5*m30-(tmp_0*m10+tmp_3*m20+tmp_4*m30)),dst[5]=d*(tmp_0*m00+tmp_7*m20+tmp_8*m30-(tmp_1*m00+tmp_6*m20+tmp_9*m30)),dst[6]=d*(tmp_3*m00+tmp_6*m10+tmp_11*m30-(tmp_2*m00+tmp_7*m10+tmp_10*m30)),dst[7]=d*(tmp_4*m00+tmp_9*m10+tmp_10*m20-(tmp_5*m00+tmp_8*m10+tmp_11*m20)),dst[8]=d*(tmp_12*m13+tmp_15*m23+tmp_16*m33-(tmp_13*m13+tmp_14*m23+tmp_17*m33)),dst[9]=d*(tmp_13*m03+tmp_18*m23+tmp_21*m33-(tmp_12*m03+tmp_19*m23+tmp_20*m33)),dst[10]=d*(tmp_14*m03+tmp_19*m13+tmp_22*m33-(tmp_15*m03+tmp_18*m13+tmp_23*m33)),dst[11]=d*(tmp_17*m03+tmp_20*m13+tmp_23*m23-(tmp_16*m03+tmp_21*m13+tmp_22*m23)),dst[12]=d*(tmp_14*m22+tmp_17*m32+tmp_13*m12-(tmp_16*m32+tmp_12*m12+tmp_15*m22)),dst[13]=d*(tmp_20*m32+tmp_12*m02+tmp_19*m22-(tmp_18*m22+tmp_21*m32+tmp_13*m02)),dst[14]=d*(tmp_18*m12+tmp_23*m32+tmp_15*m02-(tmp_22*m32+tmp_14*m02+tmp_19*m12)),dst[15]=d*(tmp_22*m22+tmp_16*m02+tmp_21*m12-(tmp_20*m12+tmp_23*m22+tmp_17*m02)),dst}function transformPoint(m,v,dst){dst=dst||create();var v0=v[0],v1=v[1],v2=v[2],d=v0*m[3]+v1*m[7]+v2*m[11]+m[15];return dst[0]=(v0*m[0]+v1*m[4]+v2*m[8]+m[12])/d,dst[1]=(v0*m[1]+v1*m[5]+v2*m[9]+m[13])/d,dst[2]=(v0*m[2]+v1*m[6]+v2*m[10]+m[14])/d,dst}function transformDirection(m,v,dst){dst=dst||create();var v0=v[0],v1=v[1],v2=v[2];return dst[0]=v0*m[0]+v1*m[4]+v2*m[8],dst[1]=v0*m[1]+v1*m[5]+v2*m[9],dst[2]=v0*m[2]+v1*m[6]+v2*m[10],dst}var m4=Object.freeze({__proto__:null,axisRotate:function axisRotate(m,axis,angleInRadians,dst){dst=dst||new MatType(16);var x=axis[0],y=axis[1],z=axis[2],n=Math.sqrt(x*x+y*y+z*z),xx=(x/=n)*x,yy=(y/=n)*y,zz=(z/=n)*z,c=Math.cos(angleInRadians),s=Math.sin(angleInRadians),oneMinusCosine=1-c,r00=xx+(1-xx)*c,r01=x*y*oneMinusCosine+z*s,r02=x*z*oneMinusCosine-y*s,r10=x*y*oneMinusCosine-z*s,r11=yy+(1-yy)*c,r12=y*z*oneMinusCosine+x*s,r20=x*z*oneMinusCosine+y*s,r21=y*z*oneMinusCosine-x*s,r22=zz+(1-zz)*c,m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11];return dst[0]=r00*m00+r01*m10+r02*m20,dst[1]=r00*m01+r01*m11+r02*m21,dst[2]=r00*m02+r01*m12+r02*m22,dst[3]=r00*m03+r01*m13+r02*m23,dst[4]=r10*m00+r11*m10+r12*m20,dst[5]=r10*m01+r11*m11+r12*m21,dst[6]=r10*m02+r11*m12+r12*m22,dst[7]=r10*m03+r11*m13+r12*m23,dst[8]=r20*m00+r21*m10+r22*m20,dst[9]=r20*m01+r21*m11+r22*m21,dst[10]=r20*m02+r21*m12+r22*m22,dst[11]=r20*m03+r21*m13+r22*m23,m!==dst&&(dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst},axisRotation:function axisRotation(axis,angleInRadians,dst){dst=dst||new MatType(16);var x=axis[0],y=axis[1],z=axis[2],n=Math.sqrt(x*x+y*y+z*z),xx=(x/=n)*x,yy=(y/=n)*y,zz=(z/=n)*z,c=Math.cos(angleInRadians),s=Math.sin(angleInRadians),oneMinusCosine=1-c;return dst[0]=xx+(1-xx)*c,dst[1]=x*y*oneMinusCosine+z*s,dst[2]=x*z*oneMinusCosine-y*s,dst[3]=0,dst[4]=x*y*oneMinusCosine-z*s,dst[5]=yy+(1-yy)*c,dst[6]=y*z*oneMinusCosine+x*s,dst[7]=0,dst[8]=x*z*oneMinusCosine+y*s,dst[9]=y*z*oneMinusCosine-x*s,dst[10]=zz+(1-zz)*c,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst},copy:copy$1,frustum:function frustum(left,right,bottom,top,near,far,dst){var dx=right-left,dy=top-bottom,dz=near-far;return(dst=dst||new MatType(16))[0]=2*near/dx,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=2*near/dy,dst[6]=0,dst[7]=0,dst[8]=(left+right)/dx,dst[9]=(top+bottom)/dy,dst[10]=far/dz,dst[11]=-1,dst[12]=0,dst[13]=0,dst[14]=near*far/dz,dst[15]=0,dst},getAxis:function getAxis(m,axis,dst){var off=4*axis;return(dst=dst||create())[0]=m[off+0],dst[1]=m[off+1],dst[2]=m[off+2],dst},getTranslation:function getTranslation(m,dst){return(dst=dst||create())[0]=m[12],dst[1]=m[13],dst[2]=m[14],dst},identity:identity,inverse:inverse,lookAt:function lookAt(eye,target,up,dst){return dst=dst||new MatType(16),xAxis=xAxis||create(),yAxis=yAxis||create(),normalize(function subtract(a,b,dst){return(dst=dst||new VecType(3))[0]=a[0]-b[0],dst[1]=a[1]-b[1],dst[2]=a[2]-b[2],dst}(eye,target,zAxis=zAxis||create()),zAxis),normalize(cross(up,zAxis,xAxis),xAxis),normalize(cross(zAxis,xAxis,yAxis),yAxis),dst[0]=xAxis[0],dst[1]=xAxis[1],dst[2]=xAxis[2],dst[3]=0,dst[4]=yAxis[0],dst[5]=yAxis[1],dst[6]=yAxis[2],dst[7]=0,dst[8]=zAxis[0],dst[9]=zAxis[1],dst[10]=zAxis[2],dst[11]=0,dst[12]=eye[0],dst[13]=eye[1],dst[14]=eye[2],dst[15]=1,dst},multiply:function multiply$1(a,b,dst){dst=dst||new MatType(16);var a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11],a30=a[12],a31=a[13],a32=a[14],a33=a[15],b00=b[0],b01=b[1],b02=b[2],b03=b[3],b10=b[4],b11=b[5],b12=b[6],b13=b[7],b20=b[8],b21=b[9],b22=b[10],b23=b[11],b30=b[12],b31=b[13],b32=b[14],b33=b[15];return dst[0]=a00*b00+a10*b01+a20*b02+a30*b03,dst[1]=a01*b00+a11*b01+a21*b02+a31*b03,dst[2]=a02*b00+a12*b01+a22*b02+a32*b03,dst[3]=a03*b00+a13*b01+a23*b02+a33*b03,dst[4]=a00*b10+a10*b11+a20*b12+a30*b13,dst[5]=a01*b10+a11*b11+a21*b12+a31*b13,dst[6]=a02*b10+a12*b11+a22*b12+a32*b13,dst[7]=a03*b10+a13*b11+a23*b12+a33*b13,dst[8]=a00*b20+a10*b21+a20*b22+a30*b23,dst[9]=a01*b20+a11*b21+a21*b22+a31*b23,dst[10]=a02*b20+a12*b21+a22*b22+a32*b23,dst[11]=a03*b20+a13*b21+a23*b22+a33*b23,dst[12]=a00*b30+a10*b31+a20*b32+a30*b33,dst[13]=a01*b30+a11*b31+a21*b32+a31*b33,dst[14]=a02*b30+a12*b31+a22*b32+a32*b33,dst[15]=a03*b30+a13*b31+a23*b32+a33*b33,dst},negate:function negate$1(m,dst){return(dst=dst||new MatType(16))[0]=-m[0],dst[1]=-m[1],dst[2]=-m[2],dst[3]=-m[3],dst[4]=-m[4],dst[5]=-m[5],dst[6]=-m[6],dst[7]=-m[7],dst[8]=-m[8],dst[9]=-m[9],dst[10]=-m[10],dst[11]=-m[11],dst[12]=-m[12],dst[13]=-m[13],dst[14]=-m[14],dst[15]=-m[15],dst},ortho:function ortho(left,right,bottom,top,near,far,dst){return(dst=dst||new MatType(16))[0]=2/(right-left),dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=2/(top-bottom),dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=2/(near-far),dst[11]=0,dst[12]=(right+left)/(left-right),dst[13]=(top+bottom)/(bottom-top),dst[14]=(far+near)/(near-far),dst[15]=1,dst},perspective:function perspective(fieldOfViewYInRadians,aspect,zNear,zFar,dst){dst=dst||new MatType(16);var f=Math.tan(.5*Math.PI-.5*fieldOfViewYInRadians),rangeInv=1/(zNear-zFar);return dst[0]=f/aspect,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=f,dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=(zNear+zFar)*rangeInv,dst[11]=-1,dst[12]=0,dst[13]=0,dst[14]=zNear*zFar*rangeInv*2,dst[15]=0,dst},rotateX:function rotateX(m,angleInRadians,dst){dst=dst||new MatType(16);var m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11],c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[4]=c*m10+s*m20,dst[5]=c*m11+s*m21,dst[6]=c*m12+s*m22,dst[7]=c*m13+s*m23,dst[8]=c*m20-s*m10,dst[9]=c*m21-s*m11,dst[10]=c*m22-s*m12,dst[11]=c*m23-s*m13,m!==dst&&(dst[0]=m[0],dst[1]=m[1],dst[2]=m[2],dst[3]=m[3],dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst},rotateY:function rotateY(m,angleInRadians,dst){dst=dst||new MatType(16);var m00=m[0],m01=m[1],m02=m[2],m03=m[3],m20=m[8],m21=m[9],m22=m[10],m23=m[11],c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c*m00-s*m20,dst[1]=c*m01-s*m21,dst[2]=c*m02-s*m22,dst[3]=c*m03-s*m23,dst[8]=c*m20+s*m00,dst[9]=c*m21+s*m01,dst[10]=c*m22+s*m02,dst[11]=c*m23+s*m03,m!==dst&&(dst[4]=m[4],dst[5]=m[5],dst[6]=m[6],dst[7]=m[7],dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst},rotateZ:function rotateZ(m,angleInRadians,dst){dst=dst||new MatType(16);var m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c*m00+s*m10,dst[1]=c*m01+s*m11,dst[2]=c*m02+s*m12,dst[3]=c*m03+s*m13,dst[4]=c*m10-s*m00,dst[5]=c*m11-s*m01,dst[6]=c*m12-s*m02,dst[7]=c*m13-s*m03,m!==dst&&(dst[8]=m[8],dst[9]=m[9],dst[10]=m[10],dst[11]=m[11],dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst},rotationX:function rotationX(angleInRadians,dst){dst=dst||new MatType(16);var c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=1,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=c,dst[6]=s,dst[7]=0,dst[8]=0,dst[9]=-s,dst[10]=c,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst},rotationY:function rotationY(angleInRadians,dst){dst=dst||new MatType(16);var c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c,dst[1]=0,dst[2]=-s,dst[3]=0,dst[4]=0,dst[5]=1,dst[6]=0,dst[7]=0,dst[8]=s,dst[9]=0,dst[10]=c,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst},rotationZ:function rotationZ(angleInRadians,dst){dst=dst||new MatType(16);var c=Math.cos(angleInRadians),s=Math.sin(angleInRadians);return dst[0]=c,dst[1]=s,dst[2]=0,dst[3]=0,dst[4]=-s,dst[5]=c,dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=1,dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst},scale:function scale(m,v,dst){dst=dst||new MatType(16);var v0=v[0],v1=v[1],v2=v[2];return dst[0]=v0*m[0],dst[1]=v0*m[1],dst[2]=v0*m[2],dst[3]=v0*m[3],dst[4]=v1*m[4],dst[5]=v1*m[5],dst[6]=v1*m[6],dst[7]=v1*m[7],dst[8]=v2*m[8],dst[9]=v2*m[9],dst[10]=v2*m[10],dst[11]=v2*m[11],m!==dst&&(dst[12]=m[12],dst[13]=m[13],dst[14]=m[14],dst[15]=m[15]),dst},scaling:function scaling(v,dst){return(dst=dst||new MatType(16))[0]=v[0],dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=v[1],dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=v[2],dst[11]=0,dst[12]=0,dst[13]=0,dst[14]=0,dst[15]=1,dst},setAxis:function setAxis(a,v,axis,dst){dst!==a&&(dst=copy$1(a,dst));var off=4*axis;return dst[off+0]=v[0],dst[off+1]=v[1],dst[off+2]=v[2],dst},setDefaultType:function setDefaultType$1(ctor){var oldType=MatType;return MatType=ctor,oldType},setTranslation:function setTranslation(a,v,dst){return a!==(dst=dst||identity())&&(dst[0]=a[0],dst[1]=a[1],dst[2]=a[2],dst[3]=a[3],dst[4]=a[4],dst[5]=a[5],dst[6]=a[6],dst[7]=a[7],dst[8]=a[8],dst[9]=a[9],dst[10]=a[10],dst[11]=a[11]),dst[12]=v[0],dst[13]=v[1],dst[14]=v[2],dst[15]=1,dst},transformDirection:transformDirection,transformNormal:function transformNormal(m,v,dst){dst=dst||create();var mi=inverse(m),v0=v[0],v1=v[1],v2=v[2];return dst[0]=v0*mi[0]+v1*mi[1]+v2*mi[2],dst[1]=v0*mi[4]+v1*mi[5]+v2*mi[6],dst[2]=v0*mi[8]+v1*mi[9]+v2*mi[10],dst},transformPoint:transformPoint,translate:function translate(m,v,dst){dst=dst||new MatType(16);var v0=v[0],v1=v[1],v2=v[2],m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11],m30=m[12],m31=m[13],m32=m[14],m33=m[15];return m!==dst&&(dst[0]=m00,dst[1]=m01,dst[2]=m02,dst[3]=m03,dst[4]=m10,dst[5]=m11,dst[6]=m12,dst[7]=m13,dst[8]=m20,dst[9]=m21,dst[10]=m22,dst[11]=m23),dst[12]=m00*v0+m10*v1+m20*v2+m30,dst[13]=m01*v0+m11*v1+m21*v2+m31,dst[14]=m02*v0+m12*v1+m22*v2+m32,dst[15]=m03*v0+m13*v1+m23*v2+m33,dst},translation:function translation(v,dst){return(dst=dst||new MatType(16))[0]=1,dst[1]=0,dst[2]=0,dst[3]=0,dst[4]=0,dst[5]=1,dst[6]=0,dst[7]=0,dst[8]=0,dst[9]=0,dst[10]=1,dst[11]=0,dst[12]=v[0],dst[13]=v[1],dst[14]=v[2],dst[15]=1,dst},transpose:function transpose(m,dst){var t;if((dst=dst||new MatType(16))===m)return t=m[1],m[1]=m[4],m[4]=t,t=m[2],m[2]=m[8],m[8]=t,t=m[3],m[3]=m[12],m[12]=t,t=m[6],m[6]=m[9],m[9]=t,t=m[7],m[7]=m[13],m[13]=t,t=m[11],m[11]=m[14],m[14]=t,dst;var m00=m[0],m01=m[1],m02=m[2],m03=m[3],m10=m[4],m11=m[5],m12=m[6],m13=m[7],m20=m[8],m21=m[9],m22=m[10],m23=m[11],m30=m[12],m31=m[13],m32=m[14],m33=m[15];return dst[0]=m00,dst[1]=m10,dst[2]=m20,dst[3]=m30,dst[4]=m01,dst[5]=m11,dst[6]=m21,dst[7]=m31,dst[8]=m02,dst[9]=m12,dst[10]=m22,dst[11]=m32,dst[12]=m03,dst[13]=m13,dst[14]=m23,dst[15]=m33,dst}}),glTypeToTypedArray={},tt=glTypeToTypedArray;function getGLTypeForTypedArray(typedArray){if(typedArray instanceof Int8Array)return 5120;if(typedArray instanceof Uint8Array)return 5121;if(typedArray instanceof Uint8ClampedArray)return 5121;if(typedArray instanceof Int16Array)return 5122;if(typedArray instanceof Uint16Array)return 5123;if(typedArray instanceof Int32Array)return 5124;if(typedArray instanceof Uint32Array)return 5125;if(typedArray instanceof Float32Array)return 5126;throw new Error("unsupported typed array type")}tt[5120]=Int8Array,tt[5121]=Uint8Array,tt[5122]=Int16Array,tt[5123]=Uint16Array,tt[5124]=Int32Array,tt[5125]=Uint32Array,tt[5126]=Float32Array,tt[32819]=Uint16Array,tt[32820]=Uint16Array,tt[33635]=Uint16Array,tt[5131]=Uint16Array,tt[33640]=Uint32Array,tt[35899]=Uint32Array,tt[35902]=Uint32Array,tt[36269]=Uint32Array,tt[34042]=Uint32Array;var isArrayBuffer="undefined"!=typeof SharedArrayBuffer?function isArrayBufferOrSharedArrayBuffer(a){return a&&a.buffer&&(a.buffer instanceof ArrayBuffer||a.buffer instanceof SharedArrayBuffer)}:function isArrayBuffer(a){return a&&a.buffer&&a.buffer instanceof ArrayBuffer};function error(){var _console;(_console=console).error.apply(_console,arguments)}function warn(){var _console2;(_console2=console).warn.apply(_console2,arguments)}function isTexture(gl,t){return"undefined"!=typeof WebGLTexture&&t instanceof WebGLTexture}var defaults_attribPrefix="";function setBufferFromTypedArray(gl,type,buffer,array,drawType){gl.bindBuffer(type,buffer),gl.bufferData(type,array,drawType||35044)}function createBufferFromTypedArray(gl,typedArray,type,drawType){if(function isBuffer(gl,t){return"undefined"!=typeof WebGLBuffer&&t instanceof WebGLBuffer}(0,typedArray))return typedArray;type=type||34962;var buffer=gl.createBuffer();return setBufferFromTypedArray(gl,type,buffer,typedArray,drawType),buffer}function isIndices(name){return"indices"===name}function getArray(array){return array.length?array:array.data}var texcoordRE=/coord|texture/i,colorRE=/color|colour/i;function guessNumComponentsFromName(name,length){var numComponents;if(length%(numComponents=texcoordRE.test(name)?2:colorRE.test(name)?4:3)>0)throw new Error("Can not guess numComponents for attribute '".concat(name,"'. Tried ").concat(numComponents," but ").concat(length," values is not evenly divisible by ").concat(numComponents,". You should specify it."));return numComponents}function getNumComponents(array,arrayName){return array.numComponents||array.size||guessNumComponentsFromName(arrayName,getArray(array).length)}function makeTypedArray(array,name){if(isArrayBuffer(array))return array;if(isArrayBuffer(array.data))return array.data;Array.isArray(array)&&(array={data:array});var Type=array.type;return Type||(Type=isIndices(name)?Uint16Array:Float32Array),new Type(array.data)}function createAttribsFromArrays(gl,arrays){var attribs={};return Object.keys(arrays).forEach((function(arrayName){if(!isIndices(arrayName)){var array=arrays[arrayName],attribName=array.attrib||array.name||array.attribName||defaults_attribPrefix+arrayName;if(array.value){if(!Array.isArray(array.value)&&!isArrayBuffer(array.value))throw new Error("array.value is not array or typedarray");attribs[attribName]={value:array.value}}else{var buffer,type,normalization,numComponents;if(array.buffer&&array.buffer instanceof WebGLBuffer)buffer=array.buffer,numComponents=array.numComponents||array.size,type=array.type,normalization=array.normalize;else if("number"==typeof array||"number"==typeof array.data){var numValues=array.data||array,arrayType=array.type||Float32Array,numBytes=numValues*arrayType.BYTES_PER_ELEMENT;type=function getGLTypeForTypedArrayType(typedArrayType){if(typedArrayType===Int8Array)return 5120;if(typedArrayType===Uint8Array)return 5121;if(typedArrayType===Uint8ClampedArray)return 5121;if(typedArrayType===Int16Array)return 5122;if(typedArrayType===Uint16Array)return 5123;if(typedArrayType===Int32Array)return 5124;if(typedArrayType===Uint32Array)return 5125;if(typedArrayType===Float32Array)return 5126;throw new Error("unsupported typed array type")}(arrayType),normalization=void 0!==array.normalize?array.normalize:function getNormalizationForTypedArrayType(typedArrayType){return typedArrayType===Int8Array||typedArrayType===Uint8Array}(arrayType),numComponents=array.numComponents||array.size||guessNumComponentsFromName(arrayName,numValues),buffer=gl.createBuffer(),gl.bindBuffer(34962,buffer),gl.bufferData(34962,numBytes,array.drawType||35044)}else{var typedArray=makeTypedArray(array,arrayName);buffer=createBufferFromTypedArray(gl,typedArray,void 0,array.drawType),type=getGLTypeForTypedArray(typedArray),normalization=void 0!==array.normalize?array.normalize:function getNormalizationForTypedArray(typedArray){return typedArray instanceof Int8Array||typedArray instanceof Uint8Array}(typedArray),numComponents=getNumComponents(array,arrayName)}attribs[attribName]={buffer:buffer,numComponents:numComponents,type:type,normalize:normalization,stride:array.stride||0,offset:array.offset||0,divisor:void 0===array.divisor?void 0:array.divisor,drawType:array.drawType}}}})),gl.bindBuffer(34962,null),attribs}var positionKeys=["position","positions","a_position"];function createBufferInfoFromArrays(gl,arrays,srcBufferInfo){var newAttribs=createAttribsFromArrays(gl,arrays),bufferInfo=Object.assign({},srcBufferInfo||{});bufferInfo.attribs=Object.assign({},srcBufferInfo?srcBufferInfo.attribs:{},newAttribs);var indices=arrays.indices;if(indices){var newIndices=makeTypedArray(indices,"indices");bufferInfo.indices=createBufferFromTypedArray(gl,newIndices,34963),bufferInfo.numElements=newIndices.length,bufferInfo.elementType=getGLTypeForTypedArray(newIndices)}else bufferInfo.numElements||(bufferInfo.numElements=function getNumElementsFromAttributes(gl,attribs){var key,ii;for(ii=0;ii<positionKeys.length&&!((key=positionKeys[ii])in attribs)&&!((key=defaults_attribPrefix+key)in attribs);++ii);ii===positionKeys.length&&(key=Object.keys(attribs)[0]);var attrib=attribs[key];gl.bindBuffer(34962,attrib.buffer);var numBytes=gl.getBufferParameter(34962,34660);gl.bindBuffer(34962,null);var totalElements=numBytes/function getBytesPerValueForGLType(gl,type){return 5120===type||5121===type?1:5122===type||5123===type?2:5124===type||5125===type||5126===type?4:0}(0,attrib.type),numComponents=attrib.numComponents||attrib.size,numElements=totalElements/numComponents;if(numElements%1!=0)throw new Error("numComponents ".concat(numComponents," not correct for length ").concat(length));return numElements}(gl,bufferInfo.attribs));return bufferInfo}function createBuffersFromArrays(gl,arrays){var buffers={};return Object.keys(arrays).forEach((function(key){buffers[key]=function createBufferFromArray(gl,array,arrayName){var type="indices"===arrayName?34963:34962;return createBufferFromTypedArray(gl,makeTypedArray(array,arrayName),type)}(gl,arrays[key],key)})),arrays.indices?(buffers.numElements=arrays.indices.length,buffers.elementType=getGLTypeForTypedArray(makeTypedArray(arrays.indices))):buffers.numElements=function getNumElementsFromNonIndexedArrays(arrays){var key,ii;for(ii=0;ii<positionKeys.length&&!((key=positionKeys[ii])in arrays);++ii);ii===positionKeys.length&&(key=Object.keys(arrays)[0]);var array=arrays[key],length=getArray(array).length,numComponents=getNumComponents(array,key),numElements=length/numComponents;if(length%numComponents>0)throw new Error("numComponents ".concat(numComponents," not correct for length ").concat(length));return numElements}(arrays),buffers}var getArray$1=getArray,getNumComponents$1=getNumComponents;function augmentTypedArray(typedArray,numComponents){var cursor=0;return typedArray.push=function(){for(var ii=0;ii<arguments.length;++ii){var value=arguments[ii];if(value instanceof Array||isArrayBuffer(value))for(var jj=0;jj<value.length;++jj)typedArray[cursor++]=value[jj];else typedArray[cursor++]=value}},typedArray.reset=function(opt_index){cursor=opt_index||0},typedArray.numComponents=numComponents,Object.defineProperty(typedArray,"numElements",{get:function get(){return this.length/this.numComponents|0}}),typedArray}function createAugmentedTypedArray(numComponents,numElements,opt_type){return augmentTypedArray(new(opt_type||Float32Array)(numComponents*numElements),numComponents)}function allButIndices(name){return"indices"!==name}function applyFuncToV3Array(array,matrix,fn){for(var len=array.length,tmp=new Float32Array(3),ii=0;ii<len;ii+=3)fn(matrix,[array[ii],array[ii+1],array[ii+2]],tmp),array[ii]=tmp[0],array[ii+1]=tmp[1],array[ii+2]=tmp[2]}function transformNormal$1(mi,v,dst){dst=dst||create();var v0=v[0],v1=v[1],v2=v[2];return dst[0]=v0*mi[0]+v1*mi[1]+v2*mi[2],dst[1]=v0*mi[4]+v1*mi[5]+v2*mi[6],dst[2]=v0*mi[8]+v1*mi[9]+v2*mi[10],dst}function reorientDirections(array,matrix){return applyFuncToV3Array(array,matrix,transformDirection),array}function reorientNormals(array,matrix){return applyFuncToV3Array(array,inverse(matrix),transformNormal$1),array}function reorientPositions(array,matrix){return applyFuncToV3Array(array,matrix,transformPoint),array}function reorientVertices(arrays,matrix){return Object.keys(arrays).forEach((function(name){var array=arrays[name];name.indexOf("pos")>=0?reorientPositions(array,matrix):name.indexOf("tan")>=0||name.indexOf("binorm")>=0?reorientDirections(array,matrix):name.indexOf("norm")>=0&&reorientNormals(array,matrix)})),arrays}function createXYQuadVertices(size,xOffset,yOffset){return size=size||2,{position:{numComponents:2,data:[(xOffset=xOffset||0)+-1*(size*=.5),(yOffset=yOffset||0)+-1*size,xOffset+1*size,yOffset+-1*size,xOffset+-1*size,yOffset+1*size,xOffset+1*size,yOffset+1*size]},normal:[0,0,1,0,0,1,0,0,1,0,0,1],texcoord:[0,0,1,0,0,1,1,1],indices:[0,1,2,2,1,3]}}function createPlaneVertices(width,depth,subdivisionsWidth,subdivisionsDepth,matrix){width=width||1,depth=depth||1,subdivisionsWidth=subdivisionsWidth||1,subdivisionsDepth=subdivisionsDepth||1,matrix=matrix||identity();for(var numVertices=(subdivisionsWidth+1)*(subdivisionsDepth+1),positions=createAugmentedTypedArray(3,numVertices),normals=createAugmentedTypedArray(3,numVertices),texcoords=createAugmentedTypedArray(2,numVertices),z=0;z<=subdivisionsDepth;z++)for(var x=0;x<=subdivisionsWidth;x++){var u=x/subdivisionsWidth,v=z/subdivisionsDepth;positions.push(width*u-.5*width,0,depth*v-.5*depth),normals.push(0,1,0),texcoords.push(u,v)}for(var numVertsAcross=subdivisionsWidth+1,indices=createAugmentedTypedArray(3,subdivisionsWidth*subdivisionsDepth*2,Uint16Array),_z=0;_z<subdivisionsDepth;_z++)for(var _x=0;_x<subdivisionsWidth;_x++)indices.push((_z+0)*numVertsAcross+_x,(_z+1)*numVertsAcross+_x,(_z+0)*numVertsAcross+_x+1),indices.push((_z+1)*numVertsAcross+_x,(_z+1)*numVertsAcross+_x+1,(_z+0)*numVertsAcross+_x+1);return reorientVertices({position:positions,normal:normals,texcoord:texcoords,indices:indices},matrix)}function createSphereVertices(radius,subdivisionsAxis,subdivisionsHeight,opt_startLatitudeInRadians,opt_endLatitudeInRadians,opt_startLongitudeInRadians,opt_endLongitudeInRadians){if(subdivisionsAxis<=0||subdivisionsHeight<=0)throw new Error("subdivisionAxis and subdivisionHeight must be > 0");opt_startLatitudeInRadians=opt_startLatitudeInRadians||0,opt_startLongitudeInRadians=opt_startLongitudeInRadians||0;for(var latRange=(opt_endLatitudeInRadians=opt_endLatitudeInRadians||Math.PI)-opt_startLatitudeInRadians,longRange=(opt_endLongitudeInRadians=opt_endLongitudeInRadians||2*Math.PI)-opt_startLongitudeInRadians,numVertices=(subdivisionsAxis+1)*(subdivisionsHeight+1),positions=createAugmentedTypedArray(3,numVertices),normals=createAugmentedTypedArray(3,numVertices),texcoords=createAugmentedTypedArray(2,numVertices),y=0;y<=subdivisionsHeight;y++)for(var x=0;x<=subdivisionsAxis;x++){var u=x/subdivisionsAxis,v=y/subdivisionsHeight,theta=longRange*u+opt_startLongitudeInRadians,phi=latRange*v+opt_startLatitudeInRadians,sinTheta=Math.sin(theta),cosTheta=Math.cos(theta),sinPhi=Math.sin(phi),ux=cosTheta*sinPhi,uy=Math.cos(phi),uz=sinTheta*sinPhi;positions.push(radius*ux,radius*uy,radius*uz),normals.push(ux,uy,uz),texcoords.push(1-u,v)}for(var numVertsAround=subdivisionsAxis+1,indices=createAugmentedTypedArray(3,subdivisionsAxis*subdivisionsHeight*2,Uint16Array),_x2=0;_x2<subdivisionsAxis;_x2++)for(var _y=0;_y<subdivisionsHeight;_y++)indices.push((_y+0)*numVertsAround+_x2,(_y+0)*numVertsAround+_x2+1,(_y+1)*numVertsAround+_x2),indices.push((_y+1)*numVertsAround+_x2,(_y+0)*numVertsAround+_x2+1,(_y+1)*numVertsAround+_x2+1);return{position:positions,normal:normals,texcoord:texcoords,indices:indices}}var CUBE_FACE_INDICES=[[3,7,5,1],[6,2,0,4],[6,7,3,2],[0,1,5,4],[7,6,4,5],[2,3,1,0]];function createCubeVertices(size){for(var k=(size=size||1)/2,cornerVertices=[[-k,-k,-k],[+k,-k,-k],[-k,+k,-k],[+k,+k,-k],[-k,-k,+k],[+k,-k,+k],[-k,+k,+k],[+k,+k,+k]],faceNormals=[[1,0,0],[-1,0,0],[0,1,0],[0,-1,0],[0,0,1],[0,0,-1]],uvCoords=[[1,0],[0,0],[0,1],[1,1]],positions=createAugmentedTypedArray(3,24),normals=createAugmentedTypedArray(3,24),texcoords=createAugmentedTypedArray(2,24),indices=createAugmentedTypedArray(3,12,Uint16Array),f=0;f<6;++f){for(var faceIndices=CUBE_FACE_INDICES[f],v=0;v<4;++v){var position=cornerVertices[faceIndices[v]],normal=faceNormals[f],uv=uvCoords[v];positions.push(position),normals.push(normal),texcoords.push(uv)}var offset=4*f;indices.push(offset+0,offset+1,offset+2),indices.push(offset+0,offset+2,offset+3)}return{position:positions,normal:normals,texcoord:texcoords,indices:indices}}function createTruncatedConeVertices(bottomRadius,topRadius,height,radialSubdivisions,verticalSubdivisions,opt_topCap,opt_bottomCap){if(radialSubdivisions<3)throw new Error("radialSubdivisions must be 3 or greater");if(verticalSubdivisions<1)throw new Error("verticalSubdivisions must be 1 or greater");for(var topCap=void 0===opt_topCap||opt_topCap,bottomCap=void 0===opt_bottomCap||opt_bottomCap,extra=(topCap?2:0)+(bottomCap?2:0),numVertices=(radialSubdivisions+1)*(verticalSubdivisions+1+extra),positions=createAugmentedTypedArray(3,numVertices),normals=createAugmentedTypedArray(3,numVertices),texcoords=createAugmentedTypedArray(2,numVertices),indices=createAugmentedTypedArray(3,radialSubdivisions*(verticalSubdivisions+extra/2)*2,Uint16Array),vertsAroundEdge=radialSubdivisions+1,slant=Math.atan2(bottomRadius-topRadius,height),cosSlant=Math.cos(slant),sinSlant=Math.sin(slant),end=verticalSubdivisions+(bottomCap?2:0),yy=topCap?-2:0;yy<=end;++yy){var v=yy/verticalSubdivisions,y=height*v,ringRadius=void 0;yy<0?(y=0,v=1,ringRadius=bottomRadius):yy>verticalSubdivisions?(y=height,v=1,ringRadius=topRadius):ringRadius=bottomRadius+yy/verticalSubdivisions*(topRadius-bottomRadius),-2!==yy&&yy!==verticalSubdivisions+2||(ringRadius=0,v=0),y-=height/2;for(var ii=0;ii<vertsAroundEdge;++ii){var sin=Math.sin(ii*Math.PI*2/radialSubdivisions),cos=Math.cos(ii*Math.PI*2/radialSubdivisions);positions.push(sin*ringRadius,y,cos*ringRadius),yy<0?normals.push(0,-1,0):yy>verticalSubdivisions?normals.push(0,1,0):0===ringRadius?normals.push(0,0,0):normals.push(sin*cosSlant,sinSlant,cos*cosSlant),texcoords.push(ii/radialSubdivisions,1-v)}}for(var _yy=0;_yy<verticalSubdivisions+extra;++_yy)if(!(1===_yy&&topCap||_yy===verticalSubdivisions+extra-2&&bottomCap))for(var _ii=0;_ii<radialSubdivisions;++_ii)indices.push(vertsAroundEdge*(_yy+0)+0+_ii,vertsAroundEdge*(_yy+0)+1+_ii,vertsAroundEdge*(_yy+1)+1+_ii),indices.push(vertsAroundEdge*(_yy+0)+0+_ii,vertsAroundEdge*(_yy+1)+1+_ii,vertsAroundEdge*(_yy+1)+0+_ii);return{position:positions,normal:normals,texcoord:texcoords,indices:indices}}function expandRLEData(rleData,padding){padding=padding||[];for(var data=[],ii=0;ii<rleData.length;ii+=4){var runLength=rleData[ii],element=rleData.slice(ii+1,ii+4);element.push.apply(element,padding);for(var jj=0;jj<runLength;++jj)data.push.apply(data,element)}return data}function create3DFVertices(){var positions=[0,0,0,0,150,0,30,0,0,0,150,0,30,150,0,30,0,0,30,0,0,30,30,0,100,0,0,30,30,0,100,30,0,100,0,0,30,60,0,30,90,0,67,60,0,30,90,0,67,90,0,67,60,0,0,0,30,30,0,30,0,150,30,0,150,30,30,0,30,30,150,30,30,0,30,100,0,30,30,30,30,30,30,30,100,0,30,100,30,30,30,60,30,67,60,30,30,90,30,30,90,30,67,60,30,67,90,30,0,0,0,100,0,0,100,0,30,0,0,0,100,0,30,0,0,30,100,0,0,100,30,0,100,30,30,100,0,0,100,30,30,100,0,30,30,30,0,30,30,30,100,30,30,30,30,0,100,30,30,100,30,0,30,30,0,30,60,30,30,30,30,30,30,0,30,60,0,30,60,30,30,60,0,67,60,30,30,60,30,30,60,0,67,60,0,67,60,30,67,60,0,67,90,30,67,60,30,67,60,0,67,90,0,67,90,30,30,90,0,30,90,30,67,90,30,30,90,0,67,90,30,67,90,0,30,90,0,30,150,30,30,90,30,30,90,0,30,150,0,30,150,30,0,150,0,0,150,30,30,150,30,0,150,0,30,150,30,30,150,0,0,0,0,0,0,30,0,150,30,0,0,0,0,150,30,0,150,0],normals=expandRLEData([18,0,0,1,18,0,0,-1,6,0,1,0,6,1,0,0,6,0,-1,0,6,1,0,0,6,0,1,0,6,1,0,0,6,0,-1,0,6,1,0,0,6,0,-1,0,6,-1,0,0]),colors=expandRLEData([18,200,70,120,18,80,70,200,6,70,200,210,6,200,200,70,6,210,100,70,6,210,160,70,6,70,180,210,6,100,70,210,6,76,210,100,6,140,210,80,6,90,130,110,6,160,160,220],[255]),numVerts=positions.length/3,arrays={position:createAugmentedTypedArray(3,numVerts),texcoord:createAugmentedTypedArray(2,numVerts),normal:createAugmentedTypedArray(3,numVerts),color:createAugmentedTypedArray(4,numVerts,Uint8Array),indices:createAugmentedTypedArray(3,numVerts/3,Uint16Array)};arrays.position.push(positions),arrays.texcoord.push([.22,.19,.22,.79,.34,.19,.22,.79,.34,.79,.34,.19,.34,.19,.34,.31,.62,.19,.34,.31,.62,.31,.62,.19,.34,.43,.34,.55,.49,.43,.34,.55,.49,.55,.49,.43,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0]),arrays.normal.push(normals),arrays.color.push(colors);for(var ii=0;ii<numVerts;++ii)arrays.indices.push(ii);return arrays}function createCrescentVertices(verticalRadius,outerRadius,innerRadius,thickness,subdivisionsDown,startOffset,endOffset){if(subdivisionsDown<=0)throw new Error("subdivisionDown must be > 0");var offsetRange=(endOffset=endOffset||1)-(startOffset=startOffset||0),numVertices=2*(subdivisionsDown+1)*4,positions=createAugmentedTypedArray(3,numVertices),normals=createAugmentedTypedArray(3,numVertices),texcoords=createAugmentedTypedArray(2,numVertices);function lerp(a,b,s){return a+(b-a)*s}function createArc(arcRadius,x,normalMult,normalAdd,uMult,uAdd){for(var z=0;z<=subdivisionsDown;z++){var uBack=x/1,v=z/subdivisionsDown,xBack=2*(uBack-.5),angle=(startOffset+v*offsetRange)*Math.PI,s=Math.sin(angle),c=Math.cos(angle),radius=lerp(verticalRadius,arcRadius,s),px=xBack*thickness,py=c*verticalRadius,pz=s*radius;positions.push(px,py,pz);var n=add((a=[0,s,c],b=normalMult,(dst=(dst=void 0)||new VecType(3))[0]=a[0]*b[0],dst[1]=a[1]*b[1],dst[2]=a[2]*b[2],dst),normalAdd);normals.push(n),texcoords.push(uBack*uMult+uAdd,v)}var a,b,dst}for(var x=0;x<2;x++){var uBack=2*(x/1-.5);createArc(outerRadius,x,[1,1,1],[0,0,0],1,0),createArc(outerRadius,x,[0,0,0],[uBack,0,0],0,0),createArc(innerRadius,x,[1,1,1],[0,0,0],1,0),createArc(innerRadius,x,[0,0,0],[uBack,0,0],0,1)}var indices=createAugmentedTypedArray(3,2*subdivisionsDown*4,Uint16Array);function createSurface(leftArcOffset,rightArcOffset){for(var z=0;z<subdivisionsDown;++z)indices.push(leftArcOffset+z+0,leftArcOffset+z+1,rightArcOffset+z+0),indices.push(leftArcOffset+z+1,rightArcOffset+z+1,rightArcOffset+z+0)}var numVerticesDown=subdivisionsDown+1;return createSurface(0*numVerticesDown,4*numVerticesDown),createSurface(5*numVerticesDown,7*numVerticesDown),createSurface(6*numVerticesDown,2*numVerticesDown),createSurface(3*numVerticesDown,1*numVerticesDown),{position:positions,normal:normals,texcoord:texcoords,indices:indices}}function createCylinderVertices(radius,height,radialSubdivisions,verticalSubdivisions,topCap,bottomCap){return createTruncatedConeVertices(radius,radius,height,radialSubdivisions,verticalSubdivisions,topCap,bottomCap)}function createTorusVertices(radius,thickness,radialSubdivisions,bodySubdivisions,startAngle,endAngle){if(radialSubdivisions<3)throw new Error("radialSubdivisions must be 3 or greater");if(bodySubdivisions<3)throw new Error("verticalSubdivisions must be 3 or greater");startAngle=startAngle||0;for(var range=(endAngle=endAngle||2*Math.PI)-startAngle,radialParts=radialSubdivisions+1,bodyParts=bodySubdivisions+1,numVertices=radialParts*bodyParts,positions=createAugmentedTypedArray(3,numVertices),normals=createAugmentedTypedArray(3,numVertices),texcoords=createAugmentedTypedArray(2,numVertices),indices=createAugmentedTypedArray(3,radialSubdivisions*bodySubdivisions*2,Uint16Array),slice=0;slice<bodyParts;++slice)for(var v=slice/bodySubdivisions,sliceAngle=v*Math.PI*2,sliceSin=Math.sin(sliceAngle),ringRadius=radius+sliceSin*thickness,ny=Math.cos(sliceAngle),y=ny*thickness,ring=0;ring<radialParts;++ring){var u=ring/radialSubdivisions,ringAngle=startAngle+u*range,xSin=Math.sin(ringAngle),zCos=Math.cos(ringAngle),x=xSin*ringRadius,z=zCos*ringRadius,nx=xSin*sliceSin,nz=zCos*sliceSin;positions.push(x,y,z),normals.push(nx,ny,nz),texcoords.push(u,1-v)}for(var _slice=0;_slice<bodySubdivisions;++_slice)for(var _ring=0;_ring<radialSubdivisions;++_ring){var nextRingIndex=1+_ring,nextSliceIndex=1+_slice;indices.push(radialParts*_slice+_ring,radialParts*nextSliceIndex+_ring,radialParts*_slice+nextRingIndex),indices.push(radialParts*nextSliceIndex+_ring,radialParts*nextSliceIndex+nextRingIndex,radialParts*_slice+nextRingIndex)}return{position:positions,normal:normals,texcoord:texcoords,indices:indices}}function createDiscVertices(radius,divisions,stacks,innerRadius,stackPower){if(divisions<3)throw new Error("divisions must be at least 3");stackPower=stackPower||1,innerRadius=innerRadius||0;for(var numVertices=(divisions+1)*((stacks=stacks||1)+1),positions=createAugmentedTypedArray(3,numVertices),normals=createAugmentedTypedArray(3,numVertices),texcoords=createAugmentedTypedArray(2,numVertices),indices=createAugmentedTypedArray(3,stacks*divisions*2,Uint16Array),firstIndex=0,radiusSpan=radius-innerRadius,pointsPerStack=divisions+1,stack=0;stack<=stacks;++stack){for(var stackRadius=innerRadius+radiusSpan*Math.pow(stack/stacks,stackPower),i=0;i<=divisions;++i){var theta=2*Math.PI*i/divisions,x=stackRadius*Math.cos(theta),z=stackRadius*Math.sin(theta);if(positions.push(x,0,z),normals.push(0,1,0),texcoords.push(1-i/divisions,stack/stacks),stack>0&&i!==divisions){var a=firstIndex+(i+1),b=firstIndex+i,c=firstIndex+i-pointsPerStack,d=firstIndex+(i+1)-pointsPerStack;indices.push(a,b,c),indices.push(a,c,d)}}firstIndex+=divisions+1}return{position:positions,normal:normals,texcoord:texcoords,indices:indices}}function createBufferFunc(fn){return function(gl){var arrays=fn.apply(this,Array.prototype.slice.call(arguments,1));return createBuffersFromArrays(gl,arrays)}}function createBufferInfoFunc(fn){return function(gl){var arrays=fn.apply(null,Array.prototype.slice.call(arguments,1));return createBufferInfoFromArrays(gl,arrays)}}var arraySpecPropertyNames=["numComponents","size","type","normalize","stride","offset","attrib","name","attribName"];function copyElements(src,dst,dstNdx,offset){offset=offset||0;for(var length=src.length,ii=0;ii<length;++ii)dst[dstNdx+ii]=src[ii]+offset}function createArrayOfSameType(srcArray,length){var arraySrc=getArray$1(srcArray),newArray=new arraySrc.constructor(length),newArraySpec=newArray;return arraySrc.numComponents&&arraySrc.numElements&&augmentTypedArray(newArray,arraySrc.numComponents),srcArray.data&&function copyNamedProperties(names,src,dst){names.forEach((function(name){var value=src[name];void 0!==value&&(dst[name]=value)}))}(arraySpecPropertyNames,srcArray,newArraySpec={data:newArray}),newArraySpec}var create3DFBufferInfo=createBufferInfoFunc(create3DFVertices),create3DFBuffers=createBufferFunc(create3DFVertices),createCubeBufferInfo=createBufferInfoFunc(createCubeVertices),createCubeBuffers=createBufferFunc(createCubeVertices),createPlaneBufferInfo=createBufferInfoFunc(createPlaneVertices),createPlaneBuffers=createBufferFunc(createPlaneVertices),createSphereBufferInfo=createBufferInfoFunc(createSphereVertices),createSphereBuffers=createBufferFunc(createSphereVertices),createTruncatedConeBufferInfo=createBufferInfoFunc(createTruncatedConeVertices),createTruncatedConeBuffers=createBufferFunc(createTruncatedConeVertices),createXYQuadBufferInfo=createBufferInfoFunc(createXYQuadVertices),createXYQuadBuffers=createBufferFunc(createXYQuadVertices),createCrescentBufferInfo=createBufferInfoFunc(createCrescentVertices),createCrescentBuffers=createBufferFunc(createCrescentVertices),createCylinderBufferInfo=createBufferInfoFunc(createCylinderVertices),createCylinderBuffers=createBufferFunc(createCylinderVertices),createTorusBufferInfo=createBufferInfoFunc(createTorusVertices),createTorusBuffers=createBufferFunc(createTorusVertices),createDiscBufferInfo=createBufferInfoFunc(createDiscVertices),createDiscBuffers=createBufferFunc(createDiscVertices),createCresentBufferInfo=createCrescentBufferInfo,createCresentBuffers=createCrescentBuffers,createCresentVertices=createCrescentVertices,primitives=Object.freeze({__proto__:null,create3DFBufferInfo:create3DFBufferInfo,create3DFBuffers:create3DFBuffers,create3DFVertices:create3DFVertices,createAugmentedTypedArray:createAugmentedTypedArray,createCubeBufferInfo:createCubeBufferInfo,createCubeBuffers:createCubeBuffers,createCubeVertices:createCubeVertices,createPlaneBufferInfo:createPlaneBufferInfo,createPlaneBuffers:createPlaneBuffers,createPlaneVertices:createPlaneVertices,createSphereBufferInfo:createSphereBufferInfo,createSphereBuffers:createSphereBuffers,createSphereVertices:createSphereVertices,createTruncatedConeBufferInfo:createTruncatedConeBufferInfo,createTruncatedConeBuffers:createTruncatedConeBuffers,createTruncatedConeVertices:createTruncatedConeVertices,createXYQuadBufferInfo:createXYQuadBufferInfo,createXYQuadBuffers:createXYQuadBuffers,createXYQuadVertices:createXYQuadVertices,createCresentBufferInfo:createCresentBufferInfo,createCresentBuffers:createCresentBuffers,createCresentVertices:createCresentVertices,createCrescentBufferInfo:createCrescentBufferInfo,createCrescentBuffers:createCrescentBuffers,createCrescentVertices:createCrescentVertices,createCylinderBufferInfo:createCylinderBufferInfo,createCylinderBuffers:createCylinderBuffers,createCylinderVertices:createCylinderVertices,createTorusBufferInfo:createTorusBufferInfo,createTorusBuffers:createTorusBuffers,createTorusVertices:createTorusVertices,createDiscBufferInfo:createDiscBufferInfo,createDiscBuffers:createDiscBuffers,createDiscVertices:createDiscVertices,deindexVertices:function deindexVertices(vertices){var indices=vertices.indices,newVertices={},numElements=indices.length;return Object.keys(vertices).filter(allButIndices).forEach((function expandToUnindexed(channel){for(var srcBuffer=vertices[channel],numComponents=srcBuffer.numComponents,dstBuffer=createAugmentedTypedArray(numComponents,numElements,srcBuffer.constructor),ii=0;ii<numElements;++ii)for(var offset=indices[ii]*numComponents,jj=0;jj<numComponents;++jj)dstBuffer.push(srcBuffer[offset+jj]);newVertices[channel]=dstBuffer})),newVertices},flattenNormals:function flattenNormals(vertices){if(vertices.indices)throw new Error("can not flatten normals of indexed vertices. deindex them first");for(var normals=vertices.normal,numNormals=normals.length,ii=0;ii<numNormals;ii+=9){var nax=normals[ii+0],nay=normals[ii+1],naz=normals[ii+2],nbx=normals[ii+3],nby=normals[ii+4],nbz=normals[ii+5],nx=nax+nbx+normals[ii+6],ny=nay+nby+normals[ii+7],nz=naz+nbz+normals[ii+8],_length=Math.sqrt(nx*nx+ny*ny+nz*nz);nx/=_length,ny/=_length,nz/=_length,normals[ii+0]=nx,normals[ii+1]=ny,normals[ii+2]=nz,normals[ii+3]=nx,normals[ii+4]=ny,normals[ii+5]=nz,normals[ii+6]=nx,normals[ii+7]=ny,normals[ii+8]=nz}return vertices},makeRandomVertexColors:function makeRandomVertexColors(vertices,options){options=options||{};var numElements=vertices.position.numElements,vColors=createAugmentedTypedArray(4,numElements,Uint8Array),rand=options.rand||function(ndx,channel){return channel<3?function randInt(range){return Math.random()*range|0}(256):255};if(vertices.color=vColors,vertices.indices)for(var ii=0;ii<numElements;++ii)vColors.push(rand(ii,0),rand(ii,1),rand(ii,2),rand(ii,3));else for(var numVertsPerColor=options.vertsPerColor||3,numSets=numElements/numVertsPerColor,_ii2=0;_ii2<numSets;++_ii2)for(var color=[rand(_ii2,0),rand(_ii2,1),rand(_ii2,2),rand(_ii2,3)],jj=0;jj<numVertsPerColor;++jj)vColors.push(color);return vertices},reorientDirections:reorientDirections,reorientNormals:reorientNormals,reorientPositions:reorientPositions,reorientVertices:reorientVertices,concatVertices:function concatVertices(arrayOfArrays){for(var baseName,names={},_loop=function _loop(ii){var arrays=arrayOfArrays[ii];Object.keys(arrays).forEach((function(name){names[name]||(names[name]=[]),baseName||"indices"===name||(baseName=name);var arrayInfo=arrays[name],numComponents=getNumComponents$1(arrayInfo,name),numElements=getArray$1(arrayInfo).length/numComponents;names[name].push(numElements)}))},ii=0;ii<arrayOfArrays.length;++ii)_loop(ii);var base=names[baseName],newArrays={};return Object.keys(names).forEach((function(name){var info=function getLengthOfCombinedArrays(name){for(var arraySpec,length=0,_ii3=0;_ii3<arrayOfArrays.length;++_ii3){var arrayInfo=arrayOfArrays[_ii3][name];length+=getArray$1(arrayInfo).length,arraySpec&&!arrayInfo.data||(arraySpec=arrayInfo)}return{length:length,spec:arraySpec}}(name),newArraySpec=createArrayOfSameType(info.spec,info.length);!function copyArraysToNewArray(name,base,newArray){for(var baseIndex=0,offset=0,_ii4=0;_ii4<arrayOfArrays.length;++_ii4){var arrayInfo=arrayOfArrays[_ii4][name],array=getArray$1(arrayInfo);"indices"===name?(copyElements(array,newArray,offset,baseIndex),baseIndex+=base[_ii4]):copyElements(array,newArray,offset),offset+=array.length}}(name,base,getArray$1(newArraySpec)),newArrays[name]=newArraySpec})),newArrays},duplicateVertices:function duplicateVertices(arrays){var newArrays={};return Object.keys(arrays).forEach((function(name){var arraySpec=arrays[name],srcArray=getArray$1(arraySpec),newArraySpec=createArrayOfSameType(arraySpec,srcArray.length);copyElements(srcArray,getArray$1(newArraySpec),0),newArrays[name]=newArraySpec})),newArrays}});function isWebGL2(gl){return!!gl.texStorage2D}function isWebGL1(gl){return!gl.texStorage2D}var haveEnumsForType,enums,s_ctx,glEnumToString=(haveEnumsForType={},enums={},function glEnumToString(gl,value){return function addEnums(gl){var type=gl.constructor.name;if(!haveEnumsForType[type]){for(var key in gl)if("number"==typeof gl[key]){var existing=enums[gl[key]];enums[gl[key]]=existing?"".concat(existing," | ").concat(key):key}haveEnumsForType[type]=!0}}(gl),enums[value]||"0x"+value.toString(16)}),defaults$1={textureColor:new Uint8Array([128,192,255,255]),textureOptions:{},crossOrigin:void 0},isArrayBuffer$1=isArrayBuffer;function getShared2DContext(){return s_ctx=s_ctx||("undefined"!=typeof document&&document.createElement?document.createElement("canvas").getContext("2d"):null)}var s_textureInternalFormatInfo,RGB=6407,RG=33319,f={6406:{numColorComponents:1},6409:{numColorComponents:1},6410:{numColorComponents:2},6407:{numColorComponents:3},6408:{numColorComponents:4},6403:{numColorComponents:1},36244:{numColorComponents:1},33319:{numColorComponents:2},33320:{numColorComponents:2}};function getTextureInternalFormatInfo(internalFormat){if(!s_textureInternalFormatInfo){var t={6406:{textureFormat:6406,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[1,2,2,4],type:[5121,5131,36193,5126]},6409:{textureFormat:6409,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[1,2,2,4],type:[5121,5131,36193,5126]},6410:{textureFormat:6410,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[2,4,4,8],type:[5121,5131,36193,5126]}};t[RGB]={textureFormat:RGB,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[3,6,6,12,2],type:[5121,5131,36193,5126,33635]},t[6408]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4,8,8,16,2,2],type:[5121,5131,36193,5126,32819,32820]},t[33321]={textureFormat:6403,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[1],type:[5121]},t[36756]={textureFormat:6403,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[1],type:[5120]},t[33325]={textureFormat:6403,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[4,2],type:[5126,5131]},t[33326]={textureFormat:6403,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[4],type:[5126]},t[33330]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[1],type:[5121]},t[33329]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[1],type:[5120]},t[33332]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2],type:[5123]},t[33331]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2],type:[5122]},t[33334]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5125]},t[33333]={textureFormat:36244,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5124]},t[33323]={textureFormat:RG,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[2],type:[5121]},t[36757]={textureFormat:RG,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[2],type:[5120]},t[33327]={textureFormat:RG,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[8,4],type:[5126,5131]},t[33328]={textureFormat:RG,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[8],type:[5126]},t[33336]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2],type:[5121]},t[33335]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2],type:[5120]},t[33338]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5123]},t[33337]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5122]},t[33340]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[8],type:[5125]},t[33339]={textureFormat:33320,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[8],type:[5124]},t[32849]={textureFormat:RGB,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[3],type:[5121]},t[35905]={textureFormat:RGB,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[3],type:[5121]},t[36194]={textureFormat:RGB,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[3,2],type:[5121,33635]},t[36758]={textureFormat:RGB,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[3],type:[5120]},t[35898]={textureFormat:RGB,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[12,6,4],type:[5126,5131,35899]},t[35901]={textureFormat:RGB,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[12,6,4],type:[5126,5131,35902]},t[34843]={textureFormat:RGB,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[12,6],type:[5126,5131]},t[34837]={textureFormat:RGB,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[12],type:[5126]},t[36221]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[3],type:[5121]},t[36239]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[3],type:[5120]},t[36215]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[6],type:[5123]},t[36233]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[6],type:[5122]},t[36209]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[12],type:[5125]},t[36227]={textureFormat:36248,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[12],type:[5124]},t[32856]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4],type:[5121]},t[35907]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4],type:[5121]},t[36759]={textureFormat:6408,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[4],type:[5120]},t[32855]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4,2,4],type:[5121,32820,33640]},t[32854]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4,2],type:[5121,32819]},t[32857]={textureFormat:6408,colorRenderable:!0,textureFilterable:!0,bytesPerElement:[4],type:[33640]},t[34842]={textureFormat:6408,colorRenderable:!1,textureFilterable:!0,bytesPerElement:[16,8],type:[5126,5131]},t[34836]={textureFormat:6408,colorRenderable:!1,textureFilterable:!1,bytesPerElement:[16],type:[5126]},t[36220]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5121]},t[36238]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5120]},t[36975]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[33640]},t[36214]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[8],type:[5123]},t[36232]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[8],type:[5122]},t[36226]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[16],type:[5124]},t[36208]={textureFormat:36249,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[16],type:[5125]},t[33189]={textureFormat:6402,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[2,4],type:[5123,5125]},t[33190]={textureFormat:6402,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5125]},t[36012]={textureFormat:6402,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[5126]},t[35056]={textureFormat:34041,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[34042]},t[36013]={textureFormat:34041,colorRenderable:!0,textureFilterable:!1,bytesPerElement:[4],type:[36269]},Object.keys(t).forEach((function(internalFormat){var info=t[internalFormat];info.bytesPerElementMap={},info.bytesPerElement.forEach((function(bytesPerElement,ndx){var type=info.type[ndx];info.bytesPerElementMap[type]=bytesPerElement}))})),s_textureInternalFormatInfo=t}return s_textureInternalFormatInfo[internalFormat]}function getFormatAndTypeForInternalFormat(internalFormat){var info=getTextureInternalFormatInfo(internalFormat);if(!info)throw"unknown internal format";return{format:info.textureFormat,type:info.type[0]}}function isPowerOf2(value){return 0==(value&value-1)}function guessDimensions(gl,target,width,height,numElements){if(numElements%1!=0)throw"can't guess dimensions";if(width||height){if(height){if(!width&&(width=numElements/height)%1)throw"can't guess dimensions"}else if((height=numElements/width)%1)throw"can't guess dimensions"}else{var size=Math.sqrt(numElements/(34067===target?6:1));size%1==0?(width=size,height=size):(width=numElements,height=1)}return{width:width,height:height}}f[RGB]={numColorComponents:3},f[36248]={numColorComponents:3},f[6408]={numColorComponents:4},f[36249]={numColorComponents:4},f[6402]={numColorComponents:1},f[34041]={numColorComponents:2};var lastPackState={};function savePackState(gl,options){void 0!==options.colorspaceConversion&&(lastPackState.colorspaceConversion=gl.getParameter(37443),gl.pixelStorei(37443,options.colorspaceConversion)),void 0!==options.premultiplyAlpha&&(lastPackState.premultiplyAlpha=gl.getParameter(37441),gl.pixelStorei(37441,options.premultiplyAlpha)),void 0!==options.flipY&&(lastPackState.flipY=gl.getParameter(37440),gl.pixelStorei(37440,options.flipY))}function restorePackState(gl,options){void 0!==options.colorspaceConversion&&gl.pixelStorei(37443,lastPackState.colorspaceConversion),void 0!==options.premultiplyAlpha&&gl.pixelStorei(37441,lastPackState.premultiplyAlpha),void 0!==options.flipY&&gl.pixelStorei(37440,lastPackState.flipY)}function saveSkipState(gl){lastPackState.unpackAlignment=gl.getParameter(3317),isWebGL2(gl)&&(lastPackState.unpackRowLength=gl.getParameter(3314),lastPackState.unpackImageHeight=gl.getParameter(32878),lastPackState.unpackSkipPixels=gl.getParameter(3316),lastPackState.unpackSkipRows=gl.getParameter(3315),lastPackState.unpackSkipImages=gl.getParameter(32877))}function restoreSkipState(gl){gl.pixelStorei(3317,lastPackState.unpackAlignment),isWebGL2(gl)&&(gl.pixelStorei(3314,lastPackState.unpackRowLength),gl.pixelStorei(32878,lastPackState.unpackImageHeight),gl.pixelStorei(3316,lastPackState.unpackSkipPixels),gl.pixelStorei(3315,lastPackState.unpackSkipRows),gl.pixelStorei(32877,lastPackState.unpackSkipImages))}function setTextureSamplerParameters(gl,target,parameteriFn,options){options.minMag&&(parameteriFn.call(gl,target,10241,options.minMag),parameteriFn.call(gl,target,10240,options.minMag)),options.min&&parameteriFn.call(gl,target,10241,options.min),options.mag&&parameteriFn.call(gl,target,10240,options.mag),options.wrap&&(parameteriFn.call(gl,target,10242,options.wrap),parameteriFn.call(gl,target,10243,options.wrap),(32879===target||function isSampler(gl,t){return"undefined"!=typeof WebGLSampler&&t instanceof WebGLSampler}(0,target))&&parameteriFn.call(gl,target,32882,options.wrap)),options.wrapR&&parameteriFn.call(gl,target,32882,options.wrapR),options.wrapS&&parameteriFn.call(gl,target,10242,options.wrapS),options.wrapT&&parameteriFn.call(gl,target,10243,options.wrapT),options.minLod&&parameteriFn.call(gl,target,33082,options.minLod),options.maxLod&&parameteriFn.call(gl,target,33083,options.maxLod),options.baseLevel&&parameteriFn.call(gl,target,33084,options.baseLevel),options.maxLevel&&parameteriFn.call(gl,target,33085,options.maxLevel)}function setTextureParameters(gl,tex,options){var target=options.target||3553;gl.bindTexture(target,tex),setTextureSamplerParameters(gl,target,gl.texParameteri,options)}function setTextureFilteringForSize(gl,tex,options,width,height,internalFormat){internalFormat=internalFormat||6408;var target=(options=options||defaults$1.textureOptions).target||3553;if(width=width||options.width,height=height||options.height,gl.bindTexture(target,tex),function canGenerateMipmap(gl,width,height,internalFormat){if(!isWebGL2(gl))return isPowerOf2(width)&&isPowerOf2(height);var info=getTextureInternalFormatInfo(internalFormat);if(!info)throw"unknown internal format";return info.colorRenderable&&info.textureFilterable}(gl,width,height,internalFormat))gl.generateMipmap(target);else{var filtering=function canFilter(internalFormat){var info=getTextureInternalFormatInfo(internalFormat);if(!info)throw"unknown internal format";return info.textureFilterable}(internalFormat)?9729:9728;gl.texParameteri(target,10241,filtering),gl.texParameteri(target,10240,filtering),gl.texParameteri(target,10242,33071),gl.texParameteri(target,10243,33071)}}function shouldAutomaticallySetTextureFilteringForSize(options){return!0===options.auto||void 0===options.auto&&void 0===options.level}function getCubeFaceOrder(gl,options){return(options=options||{}).cubeFaceOrder||[34069,34070,34071,34072,34073,34074]}function getCubeFacesWithNdx(gl,options){var facesWithNdx=getCubeFaceOrder(0,options).map((function(face,ndx){return{face:face,ndx:ndx}}));return facesWithNdx.sort((function(a,b){return a.face-b.face})),facesWithNdx}function setTextureFromElement(gl,tex,element,options){var target=(options=options||defaults$1.textureOptions).target||3553,level=options.level||0,width=element.width,height=element.height,internalFormat=options.internalFormat||options.format||6408,formatType=getFormatAndTypeForInternalFormat(internalFormat),format=options.format||formatType.format,type=options.type||formatType.type;if(savePackState(gl,options),gl.bindTexture(target,tex),34067===target){var size,slices,imgWidth=element.width,imgHeight=element.height;if(imgWidth/6===imgHeight)size=imgHeight,slices=[0,0,1,0,2,0,3,0,4,0,5,0];else if(imgHeight/6===imgWidth)size=imgWidth,slices=[0,0,0,1,0,2,0,3,0,4,0,5];else if(imgWidth/3==imgHeight/2)size=imgWidth/3,slices=[0,0,1,0,2,0,0,1,1,1,2,1];else{if(imgWidth/2!=imgHeight/3)throw"can't figure out cube map from element: "+(element.src?element.src:element.nodeName);size=imgWidth/2,slices=[0,0,1,0,0,1,1,1,0,2,1,2]}var ctx=getShared2DContext();ctx?(ctx.canvas.width=size,ctx.canvas.height=size,width=size,height=size,getCubeFacesWithNdx(0,options).forEach((function(f){var xOffset=slices[2*f.ndx+0]*size,yOffset=slices[2*f.ndx+1]*size;ctx.drawImage(element,xOffset,yOffset,size,size,0,0,size,size),gl.texImage2D(f.face,level,internalFormat,format,type,ctx.canvas)})),ctx.canvas.width=1,ctx.canvas.height=1):"undefined"!=typeof createImageBitmap&&(width=size,height=size,getCubeFacesWithNdx(0,options).forEach((function(f){var xOffset=slices[2*f.ndx+0]*size,yOffset=slices[2*f.ndx+1]*size;gl.texImage2D(f.face,level,internalFormat,size,size,0,format,type,null),createImageBitmap(element,xOffset,yOffset,size,size,{premultiplyAlpha:"none",colorSpaceConversion:"none"}).then((function(imageBitmap){savePackState(gl,options),gl.bindTexture(target,tex),gl.texImage2D(f.face,level,internalFormat,format,type,imageBitmap),restorePackState(gl,options),shouldAutomaticallySetTextureFilteringForSize(options)&&setTextureFilteringForSize(gl,tex,options,width,height,internalFormat)}))})))}else if(32879===target||35866===target){var smallest=Math.min(element.width,element.height),largest=Math.max(element.width,element.height),depth=largest/smallest;if(depth%1!=0)throw"can not compute 3D dimensions of element";var xMult=element.width===largest?1:0,yMult=element.height===largest?1:0;saveSkipState(gl),gl.pixelStorei(3317,1),gl.pixelStorei(3314,element.width),gl.pixelStorei(32878,0),gl.pixelStorei(32877,0),gl.texImage3D(target,level,internalFormat,smallest,smallest,smallest,0,format,type,null);for(var d=0;d<depth;++d){var srcX=d*smallest*xMult,srcY=d*smallest*yMult;gl.pixelStorei(3316,srcX),gl.pixelStorei(3315,srcY),gl.texSubImage3D(target,level,0,0,d,smallest,smallest,1,format,type,element)}restoreSkipState(gl)}else gl.texImage2D(target,level,internalFormat,format,type,element);restorePackState(gl,options),shouldAutomaticallySetTextureFilteringForSize(options)&&setTextureFilteringForSize(gl,tex,options,width,height,internalFormat),setTextureParameters(gl,tex,options)}function noop(){}function setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url,crossOrigin){return void 0!==crossOrigin||function urlIsSameOrigin(url){if("undefined"!=typeof document){var a=document.createElement("a");return a.href=url,a.hostname===location.hostname&&a.port===location.port&&a.protocol===location.protocol}var localOrigin=new URL(location.href).origin;return new URL(url,location.href).origin===localOrigin}(url)?crossOrigin:"anonymous"}function isTexImageSource(obj){return"undefined"!=typeof ImageBitmap&&obj instanceof ImageBitmap||"undefined"!=typeof ImageData&&obj instanceof ImageData||"undefined"!=typeof HTMLElement&&obj instanceof HTMLElement}function loadAndUseImage(obj,crossOrigin,callback){return isTexImageSource(obj)?(setTimeout((function(){callback(null,obj)})),obj):function loadImage(url,crossOrigin,callback){var img;if(callback=callback||noop,crossOrigin=setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url,crossOrigin=void 0!==crossOrigin?crossOrigin:defaults$1.crossOrigin),"undefined"!=typeof Image){img=new Image,void 0!==crossOrigin&&(img.crossOrigin=crossOrigin);var clearEventHandlers=function clearEventHandlers(){img.removeEventListener("error",onError),img.removeEventListener("load",onLoad),img=null},onError=function onError(){var msg="couldn't load image: "+url;error(msg),callback(msg,img),clearEventHandlers()},onLoad=function onLoad(){callback(null,img),clearEventHandlers()};return img.addEventListener("error",onError),img.addEventListener("load",onLoad),img.src=url,img}if("undefined"!=typeof ImageBitmap){var err,bm,cb=function cb(){callback(err,bm)},options={};crossOrigin&&(options.mode="cors"),fetch(url,options).then((function(response){if(!response.ok)throw response;return response.blob()})).then((function(blob){return createImageBitmap(blob,{premultiplyAlpha:"none",colorSpaceConversion:"none"})})).then((function(bitmap){bm=bitmap,setTimeout(cb)})).catch((function(e){err=e,setTimeout(cb)})),img=null}return img}(obj,crossOrigin,callback)}function setTextureTo1PixelColor(gl,tex,options){var target=(options=options||defaults$1.textureOptions).target||3553;if(gl.bindTexture(target,tex),!1!==options.color){var color=function make1Pixel(color){return isArrayBuffer$1(color=color||defaults$1.textureColor)?color:new Uint8Array([255*color[0],255*color[1],255*color[2],255*color[3]])}(options.color);if(34067===target)for(var ii=0;ii<6;++ii)gl.texImage2D(34069+ii,0,6408,1,1,0,6408,5121,color);else 32879===target||35866===target?gl.texImage3D(target,0,6408,1,1,1,0,6408,5121,color):gl.texImage2D(target,0,6408,1,1,0,6408,5121,color)}}function loadCubemapFromUrls(gl,tex,options,callback){callback=callback||noop;var urls=options.src;if(6!==urls.length)throw"there must be 6 urls for a cubemap";var level=options.level||0,internalFormat=options.internalFormat||options.format||6408,formatType=getFormatAndTypeForInternalFormat(internalFormat),format=options.format||formatType.format,type=options.type||5121,target=options.target||3553;if(34067!==target)throw"target must be TEXTURE_CUBE_MAP";setTextureTo1PixelColor(gl,tex,options),options=Object.assign({},options);var imgs,numToLoad=6,errors=[],faces=getCubeFaceOrder(0,options);imgs=urls.map((function(url,ndx){return loadAndUseImage(url,options.crossOrigin,function uploadImg(faceTarget){return function(err,img){--numToLoad,err?errors.push(err):img.width!==img.height?errors.push("cubemap face img is not a square: "+img.src):(savePackState(gl,options),gl.bindTexture(target,tex),5===numToLoad?getCubeFaceOrder().forEach((function(otherTarget){gl.texImage2D(otherTarget,level,internalFormat,format,type,img)})):gl.texImage2D(faceTarget,level,internalFormat,format,type,img),restorePackState(gl,options),shouldAutomaticallySetTextureFilteringForSize(options)&&gl.generateMipmap(target)),0===numToLoad&&callback(errors.length?errors:void 0,tex,imgs)}}(faces[ndx]))}))}function loadSlicesFromUrls(gl,tex,options,callback){callback=callback||noop;var urls=options.src,internalFormat=options.internalFormat||options.format||6408,formatType=getFormatAndTypeForInternalFormat(internalFormat),format=options.format||formatType.format,type=options.type||5121,target=options.target||35866;if(32879!==target&&35866!==target)throw"target must be TEXTURE_3D or TEXTURE_2D_ARRAY";setTextureTo1PixelColor(gl,tex,options),options=Object.assign({},options);var imgs,numToLoad=urls.length,errors=[],level=options.level||0,width=options.width,height=options.height,depth=urls.length,firstImage=!0;imgs=urls.map((function(url,ndx){return loadAndUseImage(url,options.crossOrigin,function uploadImg(slice){return function(err,img){if(--numToLoad,err)errors.push(err);else{if(savePackState(gl,options),gl.bindTexture(target,tex),firstImage){firstImage=!1,width=options.width||img.width,height=options.height||img.height,gl.texImage3D(target,level,internalFormat,width,height,depth,0,format,type,null);for(var s=0;s<depth;++s)gl.texSubImage3D(target,level,0,0,s,width,height,1,format,type,img)}else{var ctx,src=img;img.width===width&&img.height===height||(src=(ctx=getShared2DContext()).canvas,ctx.canvas.width=width,ctx.canvas.height=height,ctx.drawImage(img,0,0,width,height)),gl.texSubImage3D(target,level,0,0,slice,width,height,1,format,type,src),ctx&&src===ctx.canvas&&(ctx.canvas.width=0,ctx.canvas.height=0)}restorePackState(gl,options),shouldAutomaticallySetTextureFilteringForSize(options)&&gl.generateMipmap(target)}0===numToLoad&&callback(errors.length?errors:void 0,tex,imgs)}}(ndx))}))}function setTextureFromArray(gl,tex,src,options){var target=(options=options||defaults$1.textureOptions).target||3553;gl.bindTexture(target,tex);var width=options.width,height=options.height,depth=options.depth,level=options.level||0,internalFormat=options.internalFormat||options.format||6408,formatType=getFormatAndTypeForInternalFormat(internalFormat),format=options.format||formatType.format,type=options.type||function getTextureTypeForArrayType(gl,src,defaultType){return isArrayBuffer$1(src)?getGLTypeForTypedArray(src):defaultType||5121}(0,src,formatType.type);if(isArrayBuffer$1(src))src instanceof Uint8ClampedArray&&(src=new Uint8Array(src.buffer));else{var Type=function getTypedArrayTypeForGLType(type){var CTOR=glTypeToTypedArray[type];if(!CTOR)throw new Error("unknown gl type");return CTOR}(type);src=new Type(src)}var dimensions,bytesPerElement=function getBytesPerElementForInternalFormat(internalFormat,type){var info=getTextureInternalFormatInfo(internalFormat);if(!info)throw"unknown internal format";var bytesPerElement=info.bytesPerElementMap[type];if(void 0===bytesPerElement)throw"unknown internal format";return bytesPerElement}(internalFormat,type),numElements=src.byteLength/bytesPerElement;if(numElements%1)throw"length wrong size for format: "+glEnumToString(gl,format);if(32879===target||35866===target)if(width||height||depth)!width||height&&depth?!height||width&&depth?(dimensions=guessDimensions(0,target,width,height,numElements/depth),width=dimensions.width,height=dimensions.height):(dimensions=guessDimensions(0,target,width,depth,numElements/height),width=dimensions.width,depth=dimensions.height):(dimensions=guessDimensions(0,target,height,depth,numElements/width),height=dimensions.width,depth=dimensions.height);else{var size=Math.cbrt(numElements);if(size%1!=0)throw"can't guess cube size of array of numElements: "+numElements;width=size,height=size,depth=size}else dimensions=guessDimensions(0,target,width,height,numElements),width=dimensions.width,height=dimensions.height;if(saveSkipState(gl),gl.pixelStorei(3317,options.unpackAlignment||1),savePackState(gl,options),34067===target){var faceSize=numElements/6*(bytesPerElement/src.BYTES_PER_ELEMENT);getCubeFacesWithNdx(0,options).forEach((function(f){var offset=faceSize*f.ndx,data=src.subarray(offset,offset+faceSize);gl.texImage2D(f.face,level,internalFormat,width,height,0,format,type,data)}))}else 32879===target||35866===target?gl.texImage3D(target,level,internalFormat,width,height,depth,0,format,type,src):gl.texImage2D(target,level,internalFormat,width,height,0,format,type,src);return restorePackState(gl,options),restoreSkipState(gl),{width:width,height:height,depth:depth,type:type}}function createTexture(gl,options,callback){callback=callback||noop,options=options||defaults$1.textureOptions;var tex=gl.createTexture(),target=options.target||3553,width=options.width||1,height=options.height||1,internalFormat=options.internalFormat||6408;gl.bindTexture(target,tex),34067===target&&(gl.texParameteri(target,10242,33071),gl.texParameteri(target,10243,33071));var src=options.src;if(src)if("function"==typeof src&&(src=src(gl,options)),"string"==typeof src)!function loadTextureFromUrl(gl,tex,options,callback){return callback=callback||noop,setTextureTo1PixelColor(gl,tex,options=options||defaults$1.textureOptions),loadAndUseImage((options=Object.assign({},options)).src,options.crossOrigin,(function(err,img){err?callback(err,tex,img):(setTextureFromElement(gl,tex,img,options),callback(null,tex,img))}))}(gl,tex,options,callback);else if(isArrayBuffer$1(src)||Array.isArray(src)&&("number"==typeof src[0]||Array.isArray(src[0])||isArrayBuffer$1(src[0]))){var dimensions=setTextureFromArray(gl,tex,src,options);width=dimensions.width,height=dimensions.height}else Array.isArray(src)&&("string"==typeof src[0]||isTexImageSource(src[0]))?34067===target?loadCubemapFromUrls(gl,tex,options,callback):loadSlicesFromUrls(gl,tex,options,callback):(setTextureFromElement(gl,tex,src,options),width=src.width,height=src.height);else!function setEmptyTexture(gl,tex,options){var target=options.target||3553;gl.bindTexture(target,tex);var level=options.level||0,internalFormat=options.internalFormat||options.format||6408,formatType=getFormatAndTypeForInternalFormat(internalFormat),format=options.format||formatType.format,type=options.type||formatType.type;if(savePackState(gl,options),34067===target)for(var ii=0;ii<6;++ii)gl.texImage2D(34069+ii,level,internalFormat,options.width,options.height,0,format,type,null);else 32879===target||35866===target?gl.texImage3D(target,level,internalFormat,options.width,options.height,options.depth,0,format,type,null):gl.texImage2D(target,level,internalFormat,options.width,options.height,0,format,type,null);restorePackState(gl,options)}(gl,tex,options);return shouldAutomaticallySetTextureFilteringForSize(options)&&setTextureFilteringForSize(gl,tex,options,width,height,internalFormat),setTextureParameters(gl,tex,options),tex}var error$1=error;function getElementById(id){return"undefined"!=typeof document&&document.getElementById?document.getElementById(id):null}var typeMap={};function getBindPointForSamplerType(gl,type){return typeMap[type].bindPoint}function intSetter(gl,location){return function(v){gl.uniform1i(location,v)}}function intArraySetter(gl,location){return function(v){gl.uniform1iv(location,v)}}function intVec2Setter(gl,location){return function(v){gl.uniform2iv(location,v)}}function intVec3Setter(gl,location){return function(v){gl.uniform3iv(location,v)}}function intVec4Setter(gl,location){return function(v){gl.uniform4iv(location,v)}}function samplerSetter(gl,type,unit,location){var bindPoint=getBindPointForSamplerType(0,type);return isWebGL2(gl)?function(textureOrPair){var texture,sampler;isTexture(0,textureOrPair)?(texture=textureOrPair,sampler=null):(texture=textureOrPair.texture,sampler=textureOrPair.sampler),gl.uniform1i(location,unit),gl.activeTexture(33984+unit),gl.bindTexture(bindPoint,texture),gl.bindSampler(unit,sampler)}:function(texture){gl.uniform1i(location,unit),gl.activeTexture(33984+unit),gl.bindTexture(bindPoint,texture)}}function samplerArraySetter(gl,type,unit,location,size){for(var bindPoint=getBindPointForSamplerType(0,type),units=new Int32Array(size),ii=0;ii<size;++ii)units[ii]=unit+ii;return isWebGL2(gl)?function(textures){gl.uniform1iv(location,units),textures.forEach((function(textureOrPair,index){var texture,sampler;gl.activeTexture(33984+units[index]),isTexture(0,textureOrPair)?(texture=textureOrPair,sampler=null):(texture=textureOrPair.texture,sampler=textureOrPair.sampler),gl.bindSampler(unit,sampler),gl.bindTexture(bindPoint,texture)}))}:function(textures){gl.uniform1iv(location,units),textures.forEach((function(texture,index){gl.activeTexture(33984+units[index]),gl.bindTexture(bindPoint,texture)}))}}function floatAttribSetter(gl,index){return function(b){if(b.value)switch(gl.disableVertexAttribArray(index),b.value.length){case 4:gl.vertexAttrib4fv(index,b.value);break;case 3:gl.vertexAttrib3fv(index,b.value);break;case 2:gl.vertexAttrib2fv(index,b.value);break;case 1:gl.vertexAttrib1fv(index,b.value);break;default:throw new Error("the length of a float constant value must be between 1 and 4!")}else gl.bindBuffer(34962,b.buffer),gl.enableVertexAttribArray(index),gl.vertexAttribPointer(index,b.numComponents||b.size,b.type||5126,b.normalize||!1,b.stride||0,b.offset||0),void 0!==b.divisor&&gl.vertexAttribDivisor(index,b.divisor)}}function intAttribSetter(gl,index){return function(b){if(b.value){if(gl.disableVertexAttribArray(index),4!==b.value.length)throw new Error("The length of an integer constant value must be 4!");gl.vertexAttrib4iv(index,b.value)}else gl.bindBuffer(34962,b.buffer),gl.enableVertexAttribArray(index),gl.vertexAttribIPointer(index,b.numComponents||b.size,b.type||5124,b.stride||0,b.offset||0),void 0!==b.divisor&&gl.vertexAttribDivisor(index,b.divisor)}}function uintAttribSetter(gl,index){return function(b){if(b.value){if(gl.disableVertexAttribArray(index),4!==b.value.length)throw new Error("The length of an unsigned integer constant value must be 4!");gl.vertexAttrib4uiv(index,b.value)}else gl.bindBuffer(34962,b.buffer),gl.enableVertexAttribArray(index),gl.vertexAttribIPointer(index,b.numComponents||b.size,b.type||5125,b.stride||0,b.offset||0),void 0!==b.divisor&&gl.vertexAttribDivisor(index,b.divisor)}}function matAttribSetter(gl,index,typeInfo){var defaultSize=typeInfo.size,count=typeInfo.count;return function(b){gl.bindBuffer(34962,b.buffer);for(var numComponents=b.size||b.numComponents||defaultSize,size=numComponents/count,type=b.type||5126,stride=typeMap[type].size*numComponents,normalize=b.normalize||!1,offset=b.offset||0,rowOffset=stride/count,i=0;i<count;++i)gl.enableVertexAttribArray(index+i),gl.vertexAttribPointer(index+i,size,type,normalize,stride,offset+rowOffset*i),void 0!==b.divisor&&gl.vertexAttribDivisor(index+i,b.divisor)}}typeMap[5126]={Type:Float32Array,size:4,setter:function floatSetter(gl,location){return function(v){gl.uniform1f(location,v)}},arraySetter:function floatArraySetter(gl,location){return function(v){gl.uniform1fv(location,v)}}},typeMap[35664]={Type:Float32Array,size:8,setter:function floatVec2Setter(gl,location){return function(v){gl.uniform2fv(location,v)}}},typeMap[35665]={Type:Float32Array,size:12,setter:function floatVec3Setter(gl,location){return function(v){gl.uniform3fv(location,v)}}},typeMap[35666]={Type:Float32Array,size:16,setter:function floatVec4Setter(gl,location){return function(v){gl.uniform4fv(location,v)}}},typeMap[5124]={Type:Int32Array,size:4,setter:intSetter,arraySetter:intArraySetter},typeMap[35667]={Type:Int32Array,size:8,setter:intVec2Setter},typeMap[35668]={Type:Int32Array,size:12,setter:intVec3Setter},typeMap[35669]={Type:Int32Array,size:16,setter:intVec4Setter},typeMap[5125]={Type:Uint32Array,size:4,setter:function uintSetter(gl,location){return function(v){gl.uniform1ui(location,v)}},arraySetter:function uintArraySetter(gl,location){return function(v){gl.uniform1uiv(location,v)}}},typeMap[36294]={Type:Uint32Array,size:8,setter:function uintVec2Setter(gl,location){return function(v){gl.uniform2uiv(location,v)}}},typeMap[36295]={Type:Uint32Array,size:12,setter:function uintVec3Setter(gl,location){return function(v){gl.uniform3uiv(location,v)}}},typeMap[36296]={Type:Uint32Array,size:16,setter:function uintVec4Setter(gl,location){return function(v){gl.uniform4uiv(location,v)}}},typeMap[35670]={Type:Uint32Array,size:4,setter:intSetter,arraySetter:intArraySetter},typeMap[35671]={Type:Uint32Array,size:8,setter:intVec2Setter},typeMap[35672]={Type:Uint32Array,size:12,setter:intVec3Setter},typeMap[35673]={Type:Uint32Array,size:16,setter:intVec4Setter},typeMap[35674]={Type:Float32Array,size:16,setter:function floatMat2Setter(gl,location){return function(v){gl.uniformMatrix2fv(location,!1,v)}}},typeMap[35675]={Type:Float32Array,size:36,setter:function floatMat3Setter(gl,location){return function(v){gl.uniformMatrix3fv(location,!1,v)}}},typeMap[35676]={Type:Float32Array,size:64,setter:function floatMat4Setter(gl,location){return function(v){gl.uniformMatrix4fv(location,!1,v)}}},typeMap[35685]={Type:Float32Array,size:24,setter:function floatMat23Setter(gl,location){return function(v){gl.uniformMatrix2x3fv(location,!1,v)}}},typeMap[35686]={Type:Float32Array,size:32,setter:function floatMat24Setter(gl,location){return function(v){gl.uniformMatrix2x4fv(location,!1,v)}}},typeMap[35687]={Type:Float32Array,size:24,setter:function floatMat32Setter(gl,location){return function(v){gl.uniformMatrix3x2fv(location,!1,v)}}},typeMap[35688]={Type:Float32Array,size:48,setter:function floatMat34Setter(gl,location){return function(v){gl.uniformMatrix3x4fv(location,!1,v)}}},typeMap[35689]={Type:Float32Array,size:32,setter:function floatMat42Setter(gl,location){return function(v){gl.uniformMatrix4x2fv(location,!1,v)}}},typeMap[35690]={Type:Float32Array,size:48,setter:function floatMat43Setter(gl,location){return function(v){gl.uniformMatrix4x3fv(location,!1,v)}}},typeMap[35678]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:3553},typeMap[35680]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:34067},typeMap[35679]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:32879},typeMap[35682]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:3553},typeMap[36289]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:35866},typeMap[36292]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:35866},typeMap[36293]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:34067},typeMap[36298]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:3553},typeMap[36299]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:32879},typeMap[36300]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:34067},typeMap[36303]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:35866},typeMap[36306]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:3553},typeMap[36307]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:32879},typeMap[36308]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:34067},typeMap[36311]={Type:null,size:0,setter:samplerSetter,arraySetter:samplerArraySetter,bindPoint:35866};var attrTypeMap={};attrTypeMap[5126]={size:4,setter:floatAttribSetter},attrTypeMap[35664]={size:8,setter:floatAttribSetter},attrTypeMap[35665]={size:12,setter:floatAttribSetter},attrTypeMap[35666]={size:16,setter:floatAttribSetter},attrTypeMap[5124]={size:4,setter:intAttribSetter},attrTypeMap[35667]={size:8,setter:intAttribSetter},attrTypeMap[35668]={size:12,setter:intAttribSetter},attrTypeMap[35669]={size:16,setter:intAttribSetter},attrTypeMap[5125]={size:4,setter:uintAttribSetter},attrTypeMap[36294]={size:8,setter:uintAttribSetter},attrTypeMap[36295]={size:12,setter:uintAttribSetter},attrTypeMap[36296]={size:16,setter:uintAttribSetter},attrTypeMap[35670]={size:4,setter:intAttribSetter},attrTypeMap[35671]={size:8,setter:intAttribSetter},attrTypeMap[35672]={size:12,setter:intAttribSetter},attrTypeMap[35673]={size:16,setter:intAttribSetter},attrTypeMap[35674]={size:4,setter:matAttribSetter,count:2},attrTypeMap[35675]={size:9,setter:matAttribSetter,count:3},attrTypeMap[35676]={size:16,setter:matAttribSetter,count:4};var spaceRE=/^[ \t]*\n/;function loadShader(gl,shaderSource,shaderType,opt_errorCallback){var errFn=opt_errorCallback||error$1,shader=gl.createShader(shaderType),lineOffset=0;if(spaceRE.test(shaderSource)&&(lineOffset=1,shaderSource=shaderSource.replace(spaceRE,"")),gl.shaderSource(shader,shaderSource),gl.compileShader(shader),!gl.getShaderParameter(shader,35713)){var lastError=gl.getShaderInfoLog(shader);return errFn(function addLineNumbers(src,lineOffset){return lineOffset=lineOffset||0,++lineOffset,src.split("\n").map((function(line,ndx){return ndx+lineOffset+": "+line})).join("\n")}(shaderSource,lineOffset)+"\n*** Error compiling shader: "+lastError),gl.deleteShader(shader),null}return shader}function getProgramOptions(opt_attribs,opt_locations,opt_errorCallback){var transformFeedbackVaryings,transformFeedbackMode;if("function"==typeof opt_locations&&(opt_errorCallback=opt_locations,opt_locations=void 0),"function"==typeof opt_attribs)opt_errorCallback=opt_attribs,opt_attribs=void 0;else if(opt_attribs&&!Array.isArray(opt_attribs)){if(opt_attribs.errorCallback)return opt_attribs;var opt=opt_attribs;opt_errorCallback=opt.errorCallback,opt_attribs=opt.attribLocations,transformFeedbackVaryings=opt.transformFeedbackVaryings,transformFeedbackMode=opt.transformFeedbackMode}var options={errorCallback:opt_errorCallback||error$1,transformFeedbackVaryings:transformFeedbackVaryings,transformFeedbackMode:transformFeedbackMode};if(opt_attribs){var attribLocations={};Array.isArray(opt_attribs)?opt_attribs.forEach((function(attrib,ndx){attribLocations[attrib]=opt_locations?opt_locations[ndx]:ndx})):attribLocations=opt_attribs,options.attribLocations=attribLocations}return options}var defaultShaderType=["VERTEX_SHADER","FRAGMENT_SHADER"];function deleteShaders(gl,shaders){shaders.forEach((function(shader){gl.deleteShader(shader)}))}function createProgramFromSources(gl,shaderSources,opt_attribs,opt_locations,opt_errorCallback){for(var progOptions=getProgramOptions(opt_attribs,opt_locations,opt_errorCallback),shaders=[],ii=0;ii<shaderSources.length;++ii){var shader=loadShader(gl,shaderSources[ii],gl[defaultShaderType[ii]],progOptions.errorCallback);if(!shader)return null;shaders.push(shader)}return function createProgram(gl,shaders,opt_attribs,opt_locations,opt_errorCallback){for(var t,scriptType,progOptions=getProgramOptions(opt_attribs,opt_locations,opt_errorCallback),realShaders=[],newShaders=[],ndx=0;ndx<shaders.length;++ndx){var shader=shaders[ndx];if("string"==typeof shader){var elem=getElementById(shader),src=elem?elem.text:shader,type=gl[defaultShaderType[ndx]];elem&&elem.type&&(type=((scriptType=elem.type).indexOf("frag")>=0?35632:scriptType.indexOf("vert")>=0?35633:void 0)||type),shader=loadShader(gl,src,type,progOptions.errorCallback),newShaders.push(shader)}t=shader,"undefined"!=typeof WebGLShader&&t instanceof WebGLShader&&realShaders.push(shader)}if(realShaders.length!==shaders.length)return progOptions.errorCallback("not enough shaders for program"),deleteShaders(gl,newShaders),null;var program=gl.createProgram();realShaders.forEach((function(shader){gl.attachShader(program,shader)})),progOptions.attribLocations&&Object.keys(progOptions.attribLocations).forEach((function(attrib){gl.bindAttribLocation(program,progOptions.attribLocations[attrib],attrib)}));var varyings=progOptions.transformFeedbackVaryings;if(varyings&&(varyings.attribs&&(varyings=varyings.attribs),Array.isArray(varyings)||(varyings=Object.keys(varyings)),gl.transformFeedbackVaryings(program,varyings,progOptions.transformFeedbackMode||35981)),gl.linkProgram(program),!gl.getProgramParameter(program,35714)){var lastError=gl.getProgramInfoLog(program);return progOptions.errorCallback("Error in program linking:"+lastError),gl.deleteProgram(program),deleteShaders(gl,newShaders),null}return program}(gl,shaders,progOptions)}function isBuiltIn(info){var name=info.name;return name.startsWith("gl_")||name.startsWith("webgl_")}function setUniforms(setters,values){for(var actualSetters=setters.uniformSetters||setters,numArgs=arguments.length,aNdx=1;aNdx<numArgs;++aNdx){var _values=arguments[aNdx];if(Array.isArray(_values))for(var numValues=_values.length,ii=0;ii<numValues;++ii)setUniforms(actualSetters,_values[ii]);else for(var name in _values){var setter=actualSetters[name];setter&&setter(_values[name])}}}function setBuffersAndAttributes(gl,programInfo,buffers){buffers.vertexArrayObject?gl.bindVertexArray(buffers.vertexArrayObject):(!function setAttributes(setters,buffers){for(var name in buffers){var setter=setters[name];setter&&setter(buffers[name])}}(programInfo.attribSetters||programInfo,buffers.attribs),buffers.indices&&gl.bindBuffer(34963,buffers.indices))}function createProgramInfoFromProgram(gl,program){var programInfo={program:program,uniformSetters:function createUniformSetters(gl,program){var textureUnit=0;function createUniformSetter(program,uniformInfo,location){var setter,isArray=uniformInfo.size>1&&"[0]"===uniformInfo.name.substr(-3),type=uniformInfo.type,typeInfo=typeMap[type];if(!typeInfo)throw new Error("unknown type: 0x".concat(type.toString(16)));if(typeInfo.bindPoint){var unit=textureUnit;textureUnit+=uniformInfo.size,setter=isArray?typeInfo.arraySetter(gl,type,unit,location,uniformInfo.size):typeInfo.setter(gl,type,unit,location,uniformInfo.size)}else setter=typeInfo.arraySetter&&isArray?typeInfo.arraySetter(gl,location):typeInfo.setter(gl,location);return setter.location=location,setter}for(var uniformSetters={},numUniforms=gl.getProgramParameter(program,35718),ii=0;ii<numUniforms;++ii){var uniformInfo=gl.getActiveUniform(program,ii);if(!isBuiltIn(uniformInfo)){var name=uniformInfo.name;"[0]"===name.substr(-3)&&(name=name.substr(0,name.length-3));var _location=gl.getUniformLocation(program,uniformInfo.name);_location&&(uniformSetters[name]=createUniformSetter(0,uniformInfo,_location))}}return uniformSetters}(gl,program),attribSetters:function createAttributeSetters(gl,program){for(var attribSetters={},numAttribs=gl.getProgramParameter(program,35721),ii=0;ii<numAttribs;++ii){var attribInfo=gl.getActiveAttrib(program,ii);if(!isBuiltIn(attribInfo)){var index=gl.getAttribLocation(program,attribInfo.name),typeInfo=attrTypeMap[attribInfo.type],setter=typeInfo.setter(gl,index,typeInfo);setter.location=index,attribSetters[attribInfo.name]=setter}}return attribSetters}(gl,program)};return isWebGL2(gl)&&(programInfo.uniformBlockSpec=function createUniformBlockSpecFromProgram(gl,program){for(var numUniforms=gl.getProgramParameter(program,35718),uniformData=[],uniformIndices=[],ii=0;ii<numUniforms;++ii){uniformIndices.push(ii),uniformData.push({});var uniformInfo=gl.getActiveUniform(program,ii);if(isBuiltIn(uniformInfo))break;uniformData[ii].name=uniformInfo.name}[["UNIFORM_TYPE","type"],["UNIFORM_SIZE","size"],["UNIFORM_BLOCK_INDEX","blockNdx"],["UNIFORM_OFFSET","offset"]].forEach((function(pair){var pname=pair[0],key=pair[1];gl.getActiveUniforms(program,uniformIndices,gl[pname]).forEach((function(value,ndx){uniformData[ndx][key]=value}))}));for(var blockSpecs={},numUniformBlocks=gl.getProgramParameter(program,35382),_ii5=0;_ii5<numUniformBlocks;++_ii5){var name=gl.getActiveUniformBlockName(program,_ii5),blockSpec={index:gl.getUniformBlockIndex(program,name),usedByVertexShader:gl.getActiveUniformBlockParameter(program,_ii5,35396),usedByFragmentShader:gl.getActiveUniformBlockParameter(program,_ii5,35398),size:gl.getActiveUniformBlockParameter(program,_ii5,35392),uniformIndices:gl.getActiveUniformBlockParameter(program,_ii5,35395)};blockSpec.used=blockSpec.usedByVertexShader||blockSpec.usedByFragmentShader,blockSpecs[name]=blockSpec}return{blockSpecs:blockSpecs,uniformData:uniformData}}(gl,program),programInfo.transformFeedbackInfo=function createTransformFeedbackInfo(gl,program){for(var info={},numVaryings=gl.getProgramParameter(program,35971),ii=0;ii<numVaryings;++ii){var varying=gl.getTransformFeedbackVarying(program,ii);info[varying.name]={index:ii,type:varying.type,size:varying.size}}return info}(gl,program)),programInfo}var defaults$2_addExtensionsToContext=!0,prefixRE=/^(.*?)_/;function addExtensionToContext(gl,extensionName){glEnumToString(gl,0);var ext=gl.getExtension(extensionName);if(ext){var enums={},fnSuffix=prefixRE.exec(extensionName)[1],enumSuffix="_"+fnSuffix;for(var key in ext){var value=ext[key],isFunc="function"==typeof value,suffix=isFunc?fnSuffix:enumSuffix,name=key;key.endsWith(suffix)&&(name=key.substring(0,key.length-suffix.length)),void 0!==gl[name]?isFunc||gl[name]===value||warn(name,gl[name],value,key):isFunc?gl[name]=function(origFn){return function(){return origFn.apply(ext,arguments)}}(value):(gl[name]=value,enums[name]=value)}enums.constructor={name:ext.constructor.name},glEnumToString(enums,0)}return ext}var supportedExtensions=["ANGLE_instanced_arrays","EXT_blend_minmax","EXT_color_buffer_float","EXT_color_buffer_half_float","EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2","EXT_frag_depth","EXT_sRGB","EXT_shader_texture_lod","EXT_texture_filter_anisotropic","OES_element_index_uint","OES_standard_derivatives","OES_texture_float","OES_texture_float_linear","OES_texture_half_float","OES_texture_half_float_linear","OES_vertex_array_object","WEBGL_color_buffer_float","WEBGL_compressed_texture_atc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_depth_texture","WEBGL_draw_buffers"];function addExtensionsToContext(gl){for(var ii=0;ii<supportedExtensions.length;++ii)addExtensionToContext(gl,supportedExtensions[ii])}function getWebGLContext(canvas,opt_attribs){return function create3DContext(canvas,opt_attribs){for(var names=["webgl","experimental-webgl"],context=null,ii=0;ii<names.length;++ii)if(context=canvas.getContext(names[ii],opt_attribs)){defaults$2_addExtensionsToContext&&addExtensionsToContext(context);break}return context}(canvas,opt_attribs)}function resizeCanvasToDisplaySize(canvas,multiplier){multiplier=multiplier||1,multiplier=Math.max(0,multiplier);var width=canvas.clientWidth*multiplier|0,height=canvas.clientHeight*multiplier|0;return(canvas.width!==width||canvas.height!==height)&&(canvas.width=width,canvas.height=height,!0)}var Renderer=function(){function Renderer(htmlCanvas,attributes){var _this=this;_classCallCheck(this,Renderer),_defineProperty(this,"gl",null),_defineProperty(this,"isWebGL2",null),_defineProperty(this,"instancedEnabled",!1),_defineProperty(this,"init",(function(){var gl=_this.gl;gl.viewport(0,0,gl.canvas.width,gl.canvas.height),gl.clearColor(0,0,0,1),gl.enable(gl.DEPTH_TEST),gl.enable(gl.CULL_FACE),gl.enable(gl.BLEND),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA)})),_defineProperty(this,"resize",(function(width,height){_this.gl.viewport(0,0,width,height)})),_defineProperty(this,"prepareRenderFrame",(function(){_this.gl.clear(_this.gl.COLOR_BUFFER_BIT|_this.gl.DEPTH_BUFFER_BIT)})),this.gl=getWebGLContext(htmlCanvas,attributes),this.isWebGL2=isWebGL2(this.gl)&&isWebGL1(this.gl),addExtensionsToContext(this.gl),this.gl.drawElementsInstanced&&(this.instancedEnabled=!0),resizeCanvasToDisplaySize(htmlCanvas)}return _createClass(Renderer,[{key:"clearColor",set:function set(clearColor){this.gl.clearColor(clearColor[0],clearColor[1],clearColor[2],clearColor[3])}}]),Renderer}(),ARRAY_TYPE="undefined"!=typeof Float32Array?Float32Array:Array;function create$2(){var out=new ARRAY_TYPE(16);return ARRAY_TYPE!=Float32Array&&(out[1]=0,out[2]=0,out[3]=0,out[4]=0,out[6]=0,out[7]=0,out[8]=0,out[9]=0,out[11]=0,out[12]=0,out[13]=0,out[14]=0),out[0]=1,out[5]=1,out[10]=1,out[15]=1,out}function identity$1(out){return out[0]=1,out[1]=0,out[2]=0,out[3]=0,out[4]=0,out[5]=1,out[6]=0,out[7]=0,out[8]=0,out[9]=0,out[10]=1,out[11]=0,out[12]=0,out[13]=0,out[14]=0,out[15]=1,out}function invert(out,a){var a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11],a30=a[12],a31=a[13],a32=a[14],a33=a[15],b00=a00*a11-a01*a10,b01=a00*a12-a02*a10,b02=a00*a13-a03*a10,b03=a01*a12-a02*a11,b04=a01*a13-a03*a11,b05=a02*a13-a03*a12,b06=a20*a31-a21*a30,b07=a20*a32-a22*a30,b08=a20*a33-a23*a30,b09=a21*a32-a22*a31,b10=a21*a33-a23*a31,b11=a22*a33-a23*a32,det=b00*b11-b01*b10+b02*b09+b03*b08-b04*b07+b05*b06;return det?(det=1/det,out[0]=(a11*b11-a12*b10+a13*b09)*det,out[1]=(a02*b10-a01*b11-a03*b09)*det,out[2]=(a31*b05-a32*b04+a33*b03)*det,out[3]=(a22*b04-a21*b05-a23*b03)*det,out[4]=(a12*b08-a10*b11-a13*b07)*det,out[5]=(a00*b11-a02*b08+a03*b07)*det,out[6]=(a32*b02-a30*b05-a33*b01)*det,out[7]=(a20*b05-a22*b02+a23*b01)*det,out[8]=(a10*b10-a11*b08+a13*b06)*det,out[9]=(a01*b08-a00*b10-a03*b06)*det,out[10]=(a30*b04-a31*b02+a33*b00)*det,out[11]=(a21*b02-a20*b04-a23*b00)*det,out[12]=(a11*b07-a10*b09-a12*b06)*det,out[13]=(a00*b09-a01*b07+a02*b06)*det,out[14]=(a31*b01-a30*b03-a32*b00)*det,out[15]=(a20*b03-a21*b01+a22*b00)*det,out):null}function multiply$2(out,a,b){var a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11],a30=a[12],a31=a[13],a32=a[14],a33=a[15],b0=b[0],b1=b[1],b2=b[2],b3=b[3];return out[0]=b0*a00+b1*a10+b2*a20+b3*a30,out[1]=b0*a01+b1*a11+b2*a21+b3*a31,out[2]=b0*a02+b1*a12+b2*a22+b3*a32,out[3]=b0*a03+b1*a13+b2*a23+b3*a33,b0=b[4],b1=b[5],b2=b[6],b3=b[7],out[4]=b0*a00+b1*a10+b2*a20+b3*a30,out[5]=b0*a01+b1*a11+b2*a21+b3*a31,out[6]=b0*a02+b1*a12+b2*a22+b3*a32,out[7]=b0*a03+b1*a13+b2*a23+b3*a33,b0=b[8],b1=b[9],b2=b[10],b3=b[11],out[8]=b0*a00+b1*a10+b2*a20+b3*a30,out[9]=b0*a01+b1*a11+b2*a21+b3*a31,out[10]=b0*a02+b1*a12+b2*a22+b3*a32,out[11]=b0*a03+b1*a13+b2*a23+b3*a33,b0=b[12],b1=b[13],b2=b[14],b3=b[15],out[12]=b0*a00+b1*a10+b2*a20+b3*a30,out[13]=b0*a01+b1*a11+b2*a21+b3*a31,out[14]=b0*a02+b1*a12+b2*a22+b3*a32,out[15]=b0*a03+b1*a13+b2*a23+b3*a33,out}function perspective$1(out,fovy,aspect,near,far){var nf,f=1/Math.tan(fovy/2);return out[0]=f/aspect,out[1]=0,out[2]=0,out[3]=0,out[4]=0,out[5]=f,out[6]=0,out[7]=0,out[8]=0,out[9]=0,out[11]=-1,out[12]=0,out[13]=0,out[15]=0,null!=far&&far!==1/0?(nf=1/(near-far),out[10]=(far+near)*nf,out[14]=2*far*near*nf):(out[10]=-1,out[14]=-2*near),out}function lookAt$1(out,eye,center,up){var x0,x1,x2,y0,y1,y2,z0,z1,z2,len,eyex=eye[0],eyey=eye[1],eyez=eye[2],upx=up[0],upy=up[1],upz=up[2],centerx=center[0],centery=center[1],centerz=center[2];return Math.abs(eyex-centerx)<1e-6&&Math.abs(eyey-centery)<1e-6&&Math.abs(eyez-centerz)<1e-6?identity$1(out):(z0=eyex-centerx,z1=eyey-centery,z2=eyez-centerz,x0=upy*(z2*=len=1/Math.hypot(z0,z1,z2))-upz*(z1*=len),x1=upz*(z0*=len)-upx*z2,x2=upx*z1-upy*z0,(len=Math.hypot(x0,x1,x2))?(x0*=len=1/len,x1*=len,x2*=len):(x0=0,x1=0,x2=0),y0=z1*x2-z2*x1,y1=z2*x0-z0*x2,y2=z0*x1-z1*x0,(len=Math.hypot(y0,y1,y2))?(y0*=len=1/len,y1*=len,y2*=len):(y0=0,y1=0,y2=0),out[0]=x0,out[1]=y0,out[2]=z0,out[3]=0,out[4]=x1,out[5]=y1,out[6]=z1,out[7]=0,out[8]=x2,out[9]=y2,out[10]=z2,out[11]=0,out[12]=-(x0*eyex+x1*eyey+x2*eyez),out[13]=-(y0*eyex+y1*eyey+y2*eyez),out[14]=-(z0*eyex+z1*eyey+z2*eyez),out[15]=1,out)}function create$3(){var out=new ARRAY_TYPE(3);return ARRAY_TYPE!=Float32Array&&(out[0]=0,out[1]=0,out[2]=0),out}function fromValues(x,y,z){var out=new ARRAY_TYPE(3);return out[0]=x,out[1]=y,out[2]=z,out}function normalize$1(out,a){var x=a[0],y=a[1],z=a[2],len=x*x+y*y+z*z;return len>0&&(len=1/Math.sqrt(len)),out[0]=a[0]*len,out[1]=a[1]*len,out[2]=a[2]*len,out}function dot(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]}function cross$1(out,a,b){var ax=a[0],ay=a[1],az=a[2],bx=b[0],by=b[1],bz=b[2];return out[0]=ay*bz-az*by,out[1]=az*bx-ax*bz,out[2]=ax*by-ay*bx,out}function transformMat4(out,a,m){var x=a[0],y=a[1],z=a[2],w=m[3]*x+m[7]*y+m[11]*z+m[15];return w=w||1,out[0]=(m[0]*x+m[4]*y+m[8]*z+m[12])/w,out[1]=(m[1]*x+m[5]*y+m[9]*z+m[13])/w,out[2]=(m[2]*x+m[6]*y+m[10]*z+m[14])/w,out}Math.hypot||(Math.hypot=function(){for(var y=0,i=arguments.length;i--;)y+=arguments[i]*arguments[i];return Math.sqrt(y)});var vec,len=function length$1(a){var x=a[0],y=a[1],z=a[2];return Math.hypot(x,y,z)};vec=create$3();!function(){var vec=function create$4(){var out=new ARRAY_TYPE(4);return ARRAY_TYPE!=Float32Array&&(out[0]=0,out[1]=0,out[2]=0,out[3]=0),out}()}();function create$5(){var out=new ARRAY_TYPE(4);return ARRAY_TYPE!=Float32Array&&(out[0]=0,out[1]=0,out[2]=0),out[3]=1,out}function slerp(out,a,b,t){var omega,cosom,sinom,scale0,scale1,ax=a[0],ay=a[1],az=a[2],aw=a[3],bx=b[0],by=b[1],bz=b[2],bw=b[3];return ax*bx+ay*by+az*bz+aw*bw<0&&(-cosom,-bx,-by,-bz,-bw),1-cosom>1e-6?(Math.acos(cosom),Math.sin(omega),Math.sin((1-t)*omega)/sinom,Math.sin(t*omega)/sinom):(1-t,t),out[0]=scale0*ax+scale1*bx,out[1]=scale0*ay+scale1*by,out[2]=scale0*az+scale1*bz,out[3]=scale0*aw+scale1*bw,out}var tmpvec3,xUnitVec3,yUnitVec3,temp1,temp2,matr,normalize$3=function normalize$2(out,a){var x=a[0],y=a[1],z=a[2],w=a[3],len=x*x+y*y+z*z+w*w;return len>0&&(len=1/Math.sqrt(len)),out[0]=x*len,out[1]=y*len,out[2]=z*len,out[3]=w*len,out};tmpvec3=create$3(),xUnitVec3=fromValues(1,0,0),yUnitVec3=fromValues(0,1,0),temp1=create$5(),temp2=create$5(),matr=function create$1(){var out=new ARRAY_TYPE(9);return ARRAY_TYPE!=Float32Array&&(out[1]=0,out[2]=0,out[3]=0,out[5]=0,out[6]=0,out[7]=0),out[0]=1,out[4]=1,out[8]=1,out}();!function(){var vec=function create$6(){var out=new ARRAY_TYPE(2);return ARRAY_TYPE!=Float32Array&&(out[0]=0,out[1]=0),out}()}();var wasm,Camera=function Camera(_width,_height){var _this=this;_classCallCheck(this,Camera),_defineProperty(this,"fov",void 0),_defineProperty(this,"width",void 0),_defineProperty(this,"height",void 0),_defineProperty(this,"aspect",void 0),_defineProperty(this,"zNear",void 0),_defineProperty(this,"zFar",void 0),_defineProperty(this,"projection",void 0),_defineProperty(this,"eye",void 0),_defineProperty(this,"target",void 0),_defineProperty(this,"up",void 0),_defineProperty(this,"view",void 0),_defineProperty(this,"viewProjection",void 0),_defineProperty(this,"world",void 0),_defineProperty(this,"resize",(function(width,height){_this.width=width,_this.height=height,_this.aspect=width/height,_this.projection=create$2(),perspective$1(_this.projection,_this.fov,_this.aspect,_this.zNear,_this.zFar)})),_defineProperty(this,"update",(function(time){lookAt$1(_this.view,_this.eye,_this.target,_this.up),invert(_this.camera,_this.view),multiply$2(_this.viewProjection,_this.projection,_this.view)})),_defineProperty(this,"setPosition",(function(pos){_this.eye=pos})),_defineProperty(this,"getUniforms",(function(time){var uniforms={};return uniforms.u_viewInverse=_this.camera,uniforms.u_world=_this.world,uniforms.u_worldInverseTranspose=create$2(),uniforms.u_view=_this.view,uniforms.u_resolution=[_this.width,_this.height],invert(uniforms.u_worldInverseTranspose,_this.world),function transpose$1(out,a){if(out===a){var a01=a[1],a02=a[2],a03=a[3],a12=a[6],a13=a[7],a23=a[11];out[1]=a[4],out[2]=a[8],out[3]=a[12],out[4]=a01,out[6]=a[9],out[7]=a[13],out[8]=a02,out[9]=a12,out[11]=a[14],out[12]=a03,out[13]=a13,out[14]=a23}else out[0]=a[0],out[1]=a[4],out[2]=a[8],out[3]=a[12],out[4]=a[1],out[5]=a[5],out[6]=a[9],out[7]=a[13],out[8]=a[2],out[9]=a[6],out[10]=a[10],out[11]=a[14],out[12]=a[3],out[13]=a[7],out[14]=a[11],out[15]=a[15];return out}(uniforms.u_worldInverseTranspose,uniforms.u_worldInverseTranspose),uniforms.u_worldViewProjection=create$2(),multiply$2(uniforms.u_worldViewProjection,_this.viewProjection,_this.world),uniforms.u_cameraPos=_this.eye,uniforms})),_defineProperty(this,"getRayFromScreen",(function(xNormalized,yNormalized){var x=2*xNormalized-1,y=2*yNormalized-1,near=_this.unproject([x,y,-1]),far=_this.unproject([x,y,1]),dir=create$3();return function subtract$1(out,a,b){return out[0]=a[0]-b[0],out[1]=a[1]-b[1],out[2]=a[2]-b[2],out}(dir,far,near),normalize$1(dir,dir),{origin:near,direction:dir}})),_defineProperty(this,"unproject",(function(position){var inverseProjection=create$2();invert(inverseProjection,_this.viewProjection);var result=fromValues(position[0],position[1],position[2]);return transformMat4(result,result,inverseProjection),result})),_defineProperty(this,"project",(function(position){var p=function clone(a){var out=new ARRAY_TYPE(3);return out[0]=a[0],out[1]=a[1],out[2]=a[2],out}(position);return transformMat4(p,p,_this.viewProjection),[(p[0]+1)/2,(p[1]+1)/2]})),this.fov=Math.PI/180*30,this.width=_width,this.height=_height,this.aspect=_width/_height,this.zNear=.01,this.zFar=100,this.projection=create$2(),perspective$1(this.projection,this.fov,this.aspect,this.zNear,this.zFar),this.eye=[0,0,6],this.target=[0,0,0],this.up=[0,1,0],this.view=create$2(),lookAt$1(this.view,this.eye,this.target,this.up),this.camera=create$2(),invert(this.camera,this.view),this.viewProjection=create$2(),multiply$2(this.viewProjection,this.projection,this.view),this.world=create$2(),identity$1(this.world)},Scene=function Scene(_width,_height){var _this=this;_classCallCheck(this,Scene),_defineProperty(this,"resize",(function(width,height){_this.camera.resize(width,height)})),_defineProperty(this,"update",(function(time){_this.camera.update(time)})),_defineProperty(this,"getUniforms",(function(time){var uniforms=_this.camera.getUniforms(time);return uniforms.time=time,uniforms})),this.camera=new Camera(_width,_height)},ShaderMaterial=function(){function ShaderMaterial(shaderStrings){var _this=this;_classCallCheck(this,ShaderMaterial),_defineProperty(this,"programInfo",null),_defineProperty(this,"textures",{}),_defineProperty(this,"uniforms",null),_defineProperty(this,"shaderStrings",null),_defineProperty(this,"isInit",!1),_defineProperty(this,"texturesLoaded",!1),_defineProperty(this,"init",(function(gl){_this.programInfo=function createProgramInfo(gl,shaderSources,opt_attribs,opt_locations,opt_errorCallback){var progOptions=getProgramOptions(opt_attribs,opt_locations,opt_errorCallback),good=!0;if(shaderSources=shaderSources.map((function(source){if(source.indexOf("\n")<0){var script=getElementById(source);script?source=script.text:(progOptions.errorCallback("no element with id: "+source),good=!1)}return source})),!good)return null;var program=createProgramFromSources(gl,shaderSources,progOptions);return program?createProgramInfoFromProgram(gl,program):null}(gl,Object.values(_this.shaderStrings)),_this.isInit=!0})),_defineProperty(this,"loadTextures",(function(gl,textures,onLoadCB){if(textures){var textureCount=Object.keys(textures).length,texturesLoaded=0;Object.entries(textures).forEach((function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],texture=_ref2[1];_this.textures[key]=createTexture(gl,texture,(function(){(texturesLoaded+=1)===textureCount&&(_this.texturesLoaded=!0,onLoadCB&&onLoadCB())}))}))}})),_defineProperty(this,"updateUniforms",(function(uniforms){Object.entries(uniforms).forEach((function(_ref3){var _ref4=_slicedToArray(_ref3,2),key=_ref4[0],value=_ref4[1];_this.uniforms[key]=value}))})),this.shaderStrings=shaderStrings}return _createClass(ShaderMaterial,[{key:"isReady",get:function get(){return this.isInit&&this.texturesLoaded}}]),ShaderMaterial}(),heap=new Array(32).fill(void 0);function getObject(idx){return heap[idx]}heap.push(void 0,null,!0,!1);var WASM_VECTOR_LEN=0,cachegetUint8Memory0=null;function getUint8Memory0(){return null!==cachegetUint8Memory0&&cachegetUint8Memory0.buffer===wasm.memory.buffer||(cachegetUint8Memory0=new Uint8Array(wasm.memory.buffer)),cachegetUint8Memory0}var cachedTextEncoder=new TextEncoder("utf-8"),encodeString="function"==typeof cachedTextEncoder.encodeInto?function(arg,view){return cachedTextEncoder.encodeInto(arg,view)}:function(arg,view){var buf=cachedTextEncoder.encode(arg);return view.set(buf),{read:arg.length,written:buf.length}};function passStringToWasm0(arg,malloc,realloc){if(void 0===realloc){var buf=cachedTextEncoder.encode(arg),_ptr=malloc(buf.length);return getUint8Memory0().subarray(_ptr,_ptr+buf.length).set(buf),WASM_VECTOR_LEN=buf.length,_ptr}for(var len=arg.length,ptr=malloc(len),mem=getUint8Memory0(),offset=0;offset<len;offset++){var code=arg.charCodeAt(offset);if(code>127)break;mem[ptr+offset]=code}if(offset!==len){0!==offset&&(arg=arg.slice(offset)),ptr=realloc(ptr,len,len=offset+3*arg.length);var view=getUint8Memory0().subarray(ptr+offset,ptr+len);offset+=encodeString(arg,view).written}return WASM_VECTOR_LEN=offset,ptr}var cachegetInt32Memory0=null;function getInt32Memory0(){return null!==cachegetInt32Memory0&&cachegetInt32Memory0.buffer===wasm.memory.buffer||(cachegetInt32Memory0=new Int32Array(wasm.memory.buffer)),cachegetInt32Memory0}var heap_next=heap.length;function takeObject(idx){var ret=getObject(idx);return function dropObject(idx){idx<36||(heap[idx]=heap_next,heap_next=idx)}(idx),ret}var cachedTextDecoder=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});function getStringFromWasm0(ptr,len){return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr,ptr+len))}function addHeapObject(obj){heap_next===heap.length&&heap.push(heap.length+1);var idx=heap_next;return heap_next=heap[idx],heap[idx]=obj,idx}cachedTextDecoder.decode();var cachegetFloat32Memory0=null;function passArrayF32ToWasm0(arg,malloc){var ptr=malloc(4*arg.length);return function getFloat32Memory0(){return null!==cachegetFloat32Memory0&&cachegetFloat32Memory0.buffer===wasm.memory.buffer||(cachegetFloat32Memory0=new Float32Array(wasm.memory.buffer)),cachegetFloat32Memory0}().set(arg,ptr/4),WASM_VECTOR_LEN=arg.length,ptr}var cachegetUint32Memory0=null;function passArray32ToWasm0(arg,malloc){var ptr=malloc(4*arg.length);return function getUint32Memory0(){return null!==cachegetUint32Memory0&&cachegetUint32Memory0.buffer===wasm.memory.buffer||(cachegetUint32Memory0=new Uint32Array(wasm.memory.buffer)),cachegetUint32Memory0}().set(arg,ptr/4),WASM_VECTOR_LEN=arg.length,ptr}var GKCollider=function(){function GKCollider(){_classCallCheck2(this,GKCollider)}return _createClass2(GKCollider,[{key:"free",value:function free(){var ptr=this.ptr;this.ptr=0,wasm.__wbg_gkcollider_free(ptr)}}],[{key:"create_collision_geometry",value:function create_collision_geometry(points,uvs,indices){var ptr0=passArrayF32ToWasm0(points,wasm.__wbindgen_malloc),len0=WASM_VECTOR_LEN,ptr1=passArrayF32ToWasm0(uvs,wasm.__wbindgen_malloc),len1=WASM_VECTOR_LEN,ptr2=passArray32ToWasm0(indices,wasm.__wbindgen_malloc),len2=WASM_VECTOR_LEN,ret=wasm.gkcollider_create_collision_geometry(ptr0,len0,ptr1,len1,ptr2,len2);return GKCollisionGeo.__wrap(ret)}}]),GKCollider}(),GKCollision=function(){function GKCollision(){_classCallCheck2(this,GKCollision)}return _createClass2(GKCollision,[{key:"free",value:function free(){var ptr=this.ptr;this.ptr=0,wasm.__wbg_gkcollision_free(ptr)}}]),GKCollision}(),GKCollisionGeo=function(){function GKCollisionGeo(){_classCallCheck2(this,GKCollisionGeo)}return _createClass2(GKCollisionGeo,[{key:"free",value:function free(){var ptr=this.ptr;this.ptr=0,wasm.__wbg_gkcollisiongeo_free(ptr)}},{key:"raycast",value:function raycast(origin,direction){var ptr0=passArrayF32ToWasm0(origin,wasm.__wbindgen_malloc),len0=WASM_VECTOR_LEN,ptr1=passArrayF32ToWasm0(direction,wasm.__wbindgen_malloc),len1=WASM_VECTOR_LEN;return takeObject(wasm.gkcollisiongeo_raycast(this.ptr,ptr0,len0,ptr1,len1))}},{key:"hitTest",value:function hitTest(origin,direction){var ptr0=passArrayF32ToWasm0(origin,wasm.__wbindgen_malloc),len0=WASM_VECTOR_LEN,ptr1=passArrayF32ToWasm0(direction,wasm.__wbindgen_malloc),len1=WASM_VECTOR_LEN;return 0!==wasm.gkcollisiongeo_hitTest(this.ptr,ptr0,len0,ptr1,len1)}}],[{key:"__wrap",value:function __wrap(ptr){var obj=Object.create(GKCollisionGeo.prototype);return obj.ptr=ptr,obj}}]),GKCollisionGeo}();function load(_x3,_x4){return _load.apply(this,arguments)}function _load(){return(_load=_asyncToGenerator(regeneratorRuntime.mark((function _callee(module,imports){var bytes,instance;return regeneratorRuntime.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:if(!("function"==typeof Response&&module instanceof Response)){_context.next=23;break}if("function"!=typeof WebAssembly.instantiateStreaming){_context.next=15;break}return _context.prev=2,_context.next=5,WebAssembly.instantiateStreaming(module,imports);case 5:return _context.abrupt("return",_context.sent);case 8:if(_context.prev=8,_context.t0=_context.catch(2),"application/wasm"==module.headers.get("Content-Type")){_context.next=14;break}console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",_context.t0),_context.next=15;break;case 14:throw _context.t0;case 15:return _context.next=17,module.arrayBuffer();case 17:return bytes=_context.sent,_context.next=20,WebAssembly.instantiate(bytes,imports);case 20:return _context.abrupt("return",_context.sent);case 23:return _context.next=25,WebAssembly.instantiate(module,imports);case 25:if(!((instance=_context.sent)instanceof WebAssembly.Instance)){_context.next=30;break}return _context.abrupt("return",{instance:instance,module:module});case 30:return _context.abrupt("return",instance);case 31:case"end":return _context.stop()}}),_callee,null,[[2,8]])})))).apply(this,arguments)}function init(_x5){return _init.apply(this,arguments)}function _init(){return(_init=_asyncToGenerator(regeneratorRuntime.mark((function _callee2(input){var imports,_yield$load,instance,module;return regeneratorRuntime.wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return void 0===input&&console.log("You must specify wasm location"),(imports={}).wbg={},imports.wbg.__wbindgen_json_serialize=function(arg0,arg1){var obj=getObject(arg1),ptr0=passStringToWasm0(JSON.stringify(void 0===obj?null:obj),wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),len0=WASM_VECTOR_LEN;getInt32Memory0()[arg0/4+1]=len0,getInt32Memory0()[arg0/4+0]=ptr0},imports.wbg.__wbindgen_object_drop_ref=function(arg0){takeObject(arg0)},imports.wbg.__wbindgen_json_parse=function(arg0,arg1){return addHeapObject(JSON.parse(getStringFromWasm0(arg0,arg1)))},imports.wbg.__wbindgen_string_new=function(arg0,arg1){return addHeapObject(getStringFromWasm0(arg0,arg1))},imports.wbg.__wbg_new_59cb74e423758ede=function(){return addHeapObject(new Error)},imports.wbg.__wbg_stack_558ba5917b466edd=function(arg0,arg1){var ptr0=passStringToWasm0(getObject(arg1).stack,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),len0=WASM_VECTOR_LEN;getInt32Memory0()[arg0/4+1]=len0,getInt32Memory0()[arg0/4+0]=ptr0},imports.wbg.__wbg_error_4bb6c2a97407129a=function(arg0,arg1){try{console.error(getStringFromWasm0(arg0,arg1))}finally{wasm.__wbindgen_free(arg0,arg1)}},imports.wbg.__wbg_debug_7020dcb48edf105b=function(arg0){console.debug(getObject(arg0))},imports.wbg.__wbg_error_b23efba5bfb5cec5=function(arg0){console.error(getObject(arg0))},imports.wbg.__wbg_info_8ce99578d0b91a35=function(arg0){console.info(getObject(arg0))},imports.wbg.__wbg_log_c180b836187d3c94=function(arg0){console.log(getObject(arg0))},imports.wbg.__wbg_warn_942f927afebcc748=function(arg0){console.warn(getObject(arg0))},imports.wbg.__wbindgen_throw=function(arg0,arg1){throw new Error(getStringFromWasm0(arg0,arg1))},("string"==typeof input||"function"==typeof Request&&input instanceof Request||"function"==typeof URL&&input instanceof URL)&&(input=fetch(input)),_context2.t0=load,_context2.next=20,input;case 20:return _context2.t1=_context2.sent,_context2.t2=imports,_context2.next=24,(0,_context2.t0)(_context2.t1,_context2.t2);case 24:return _yield$load=_context2.sent,instance=_yield$load.instance,module=_yield$load.module,wasm=instance.exports,init.__wbindgen_wasm_module=module,_context2.abrupt("return",wasm);case 30:case"end":return _context2.stop()}}),_callee2)})))).apply(this,arguments)}var Drawable=function(){function Drawable(){var _this=this;_classCallCheck(this,Drawable),_defineProperty(this,"id",null),_defineProperty(this,"geometry",null),_defineProperty(this,"collisionGeometry",null),_defineProperty(this,"material",null),_defineProperty(this,"_translation",[0,0,0]),_defineProperty(this,"_rotation",[0,0,0]),_defineProperty(this,"_scale",[1,1,1]),_defineProperty(this,"_modelMatrix",null),_defineProperty(this,"_modelIsDirty",!0),_defineProperty(this,"rayCast",!0),_defineProperty(this,"isInteractive",!1),_defineProperty(this,"isSelectable",!1),_defineProperty(this,"isHoverable",!1),_defineProperty(this,"shouldDraw",!0),_defineProperty(this,"setInteractive",(function(interactive,selectable,hoverable){_this.isInteractive="boolean"==typeof interactive&&interactive,_this.isSelectable="boolean"==typeof selectable&&selectable,_this.isHoverable="boolean"==typeof hoverable&&hoverable})),this.id="_"+Math.random().toString(36).substr(2,9)}return _createClass(Drawable,[{key:"update",value:function update(sceneProps){var _this2=this;sceneProps&&Object.entries(sceneProps).forEach((function(el){_this2.material.uniforms[el[0]]=el[1]}))}},{key:"isReady",get:function get(){return!(!this.geometry||!this.material)&&(this.geometry.isReady&&this.material.isReady)}},{key:"translation",get:function get(){return this._translation},set:function set(newTranslation){this._translation=newTranslation,this._modelIsDirty=!0}},{key:"rotation",get:function get(){return this._rotation},set:function set(newRotation){this._rotation=newRotation,this._modelIsDirty=!0}},{key:"scale",get:function get(){return this._scale},set:function set(newScale){this._scale=newScale,this._modelIsDirty=!0}},{key:"modelMatrix",get:function get(){if(this._modelIsDirty){var mat0=m4.identity(),translationMatrix=m4.translation(this._translation,mat0),scaleMatrix=m4.scaling(this._scale);this._modelMatrix=translationMatrix,m4.rotateX(translationMatrix,this._rotation[0],this._modelMatrix),m4.rotateY(translationMatrix,this._rotation[1],this._modelMatrix),m4.rotateZ(translationMatrix,this._rotation[2],this._modelMatrix),m4.multiply(this._modelMatrix,scaleMatrix,this._modelMatrix),this._modelIsDirty=!1}return this._modelMatrix}}]),Drawable}(),Globe=function(_Drawable){_inherits(Globe,_Drawable);var _super=_createSuper(Globe);function Globe(){return _classCallCheck(this,Globe),_super.apply(this,arguments)}return Globe}(Drawable),Geometry=function(){function Geometry(type){var _this=this;_classCallCheck(this,Geometry),_defineProperty(this,"isInit",!1),_defineProperty(this,"isDirty",!1),_defineProperty(this,"needsResize",!1),_defineProperty(this,"newGeometry",[]),_defineProperty(this,"bufferInfo",void 0),_defineProperty(this,"vertices",void 0),_defineProperty(this,"init",(function(gl){0===Object.keys(_this.vertices).length&&_this.vertices.constructor===Object||(_this.bufferInfo=createBufferInfoFromArrays(gl,_this.vertices),_this.isInit=!0,_this.isDirty=!1)})),_defineProperty(this,"resizeVertices",(function(length){})),_defineProperty(this,"updateGeometry",(function(newGeo,start,end){void 0!==start&&"number"==typeof start||(start=0),console.log("Update geo",newGeo),Object.keys(newGeo).forEach((function(key){var _this$vertices$key$da;(_this$vertices$key$da=_this.vertices[key].data).splice.apply(_this$vertices$key$da,[start,newGeo[key].data.length].concat(_toConsumableArray(newGeo[key].data)))})),_this.isDirty=!0})),_defineProperty(this,"updateBuffers",(function(gl){Object.keys(_this.bufferInfo.attribs).forEach((function(attr){!function setAttribInfoBufferFromArray(gl,attribInfo,array,offset){array=makeTypedArray(array),void 0!==offset?(gl.bindBuffer(34962,attribInfo.buffer),gl.bufferSubData(34962,offset,array)):setBufferFromTypedArray(gl,34962,attribInfo.buffer,array,attribInfo.drawType)}(gl,_this.bufferInfo.attribs[attr],_this.vertices[attr])})),_this.isDirty=!1})),_defineProperty(this,"reloadBuffers",(function(gl){_this.deleteBuffers(gl),_this.bufferInfo=createBufferInfoFromArrays(gl,_this.vertices),_this.isDirty=!1,_this.needsResize=!1})),_defineProperty(this,"deleteBuffers",(function(gl){Object.keys(_this.bufferInfo.attribs).forEach((function(attr){gl.deleteBuffer(attr.buffer)})),gl.deleteBuffer(_this.bufferInfo.indices),_this.bufferInfo={}})),this.vertices="sphere"===type?primitives.createSphereVertices(1,128,128):{}}return _createClass(Geometry,[{key:"isReady",get:function get(){return this.isInit}}]),Geometry}(),GKUtils=function(){function GKUtils(){_classCallCheck(this,GKUtils)}return _createClass(GKUtils,null,[{key:"radiansForPosition",value:function radiansForPosition(x,z){return z>0?x>=0?Math.atan(x/z):2*Math.PI+Math.atan(x/z):z<0?Math.PI+Math.atan(x/z):x>0?Math.PI/2:3*Math.PI/2}},{key:"latLonFromWorld",value:function latLonFromWorld(pos){var normal=create$3();normalize$1(normal,pos);for(var latRad=Math.asin(normal[1]),lonRad=this.radiansForPosition(normal[0],normal[2]),latDeg=180*latRad/Math.PI,lonDeg=180*lonRad/Math.PI;lonDeg>180;)lonDeg-=360;return{lat:latDeg,lon:lonDeg}}},{key:"distanceBetweenPoints",value:function distanceBetweenPoints(p0,p1){var degreesToRadians=function degreesToRadians(degrees){return degrees*(Math.PI/180)},phi1=degreesToRadians(p0.lat),phi2=degreesToRadians(p1.lat),deltaPhi=degreesToRadians(p1.lat-p0.lat),deltaLambda=degreesToRadians(p1.lon-p0.lon),a=Math.sin(deltaPhi/2)*Math.sin(deltaPhi/2)+Math.cos(phi1)*Math.cos(phi2)*Math.sin(deltaLambda/2)*Math.sin(deltaLambda/2);return 6371*(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)))}},{key:"worldFromLatLon",value:function worldFromLatLon(lat,lon,alt){var altitude=alt||0,latRad=lat*Math.PI/180,lngRad=lon*Math.PI/180,radius=Math.cos(latRad),y=Math.sin(latRad),pos=fromValues(Math.sin(lngRad)*radius,y,Math.cos(lngRad)*radius),norm=create$3();return normalize$1(norm,pos),function add$1(out,a,b){return out[0]=a[0]+b[0],out[1]=a[1]+b[1],out[2]=a[2]+b[2],out}(pos,pos,function scale$1(out,a,b){return out[0]=a[0]*b,out[1]=a[1]*b,out[2]=a[2]*b,out}(norm,norm,altitude)),pos}},{key:"hexToRGB",value:function hexToRGB(h,normalize){var r=0,g=0,b=0,norm=!1!==normalize;return 4===h.length?(r="0x".concat(h[1]).concat(h[1]),g="0x".concat(h[2]).concat(h[2]),b="0x".concat(h[3]).concat(h[3])):7===h.length&&(r="0x".concat(h[1]).concat(h[2]),g="0x".concat(h[3]).concat(h[4]),b="0x".concat(h[5]).concat(h[6])),norm?(r/=255,g/=255,b/=255):(r=parseInt(r,16),g=parseInt(g,16),b=parseInt(b,16)),[r,g,b]}},{key:"hexToRGBA",value:function hexToRGBA(h,a,normalize){var rgb=this.hexToRGB(h,normalize),alpha=!1!==normalize?a:255*a;return[rgb[0],rgb[1],rgb[2],alpha]}},{key:"isSubSet",value:function isSubSet(a,b){return a.every((function(el){return void 0!==b.find((function(e){return e===el}))}))}},{key:"lerpColor",value:function lerpColor(a,b,amount){var ah=parseInt(a.replace(/#/g,""),16),ar=ah>>16,ag=ah>>8&255,ab=255&ah,bh=parseInt(b.replace(/#/g,""),16);return"#".concat(((1<<24)+(ar+amount*((bh>>16)-ar)<<16)+(ag+amount*((bh>>8&255)-ag)<<8)+(ab+amount*((255&bh)-ab))|0).toString(16).slice(1))}}]),GKUtils}(),shaders={vertex:"#define GLSLIFY 1\nattribute vec4 position;attribute vec3 normal;attribute vec2 texcoord;uniform mat4 u_worldViewProjection;uniform mat4 u_viewInverse;uniform mat4 u_model;uniform vec3 u_cameraPos;varying float vAlpha;varying vec2 vTexture;void main(){vec4 pos=u_worldViewProjection*u_model*position;vAlpha=dot(normalize(u_cameraPos),normalize(normal.xyz));vTexture=texcoord;gl_Position=pos;}",fragment:"precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D uTexture;varying float vAlpha;varying vec2 vTexture;void main(){vec4 textureColor=texture2D(uTexture,vec2(vTexture.x-0.25,vTexture.y));float nDot=(vAlpha+1.0)/2.0;float roundness=smoothstep(0.0,1.0,nDot);float edge=smoothstep(0.5,0.6,nDot);gl_FragColor=vec4(textureColor.rgb*vAlpha,1.0);}"},uniforms={u_lightWorldPos:[1,3,-8],u_lightColor:[1,.8,.8,1],u_ambient:[1,1,1,1],u_specular:[1,1,1,1],u_shininess:100,u_specularFactor:.1,uModelMatrix:[],uCameraMatrix:[],uPerspectiveMatrix:[],uCameraPos:[0,0,0]},Icosphere=function(_Globe){_inherits(Icosphere,_Globe);var _super=_createSuper(Icosphere);function Icosphere(textureSrc){var _thisSuper,_this;return _classCallCheck(this,Icosphere),_defineProperty(_assertThisInitialized(_this=_super.call(this)),"material",null),_defineProperty(_assertThisInitialized(_this),"init",(function(gl){_this.geometry=new Geometry("sphere"),_this.geometry.init(gl);var texturesConfig={surface:{src:_this.textureSrc.surface,minMag:gl.LINEAR}};_this.material.init(gl),_this.material.loadTextures(gl,texturesConfig,(function(){_this.material.uniforms.uTexture=_this.material.textures.surface})),_this.material.uniforms.uModelMatrix=_this.modelMatrix})),_defineProperty(_assertThisInitialized(_this),"createCollisionGeo",(function(){_this.collisionGeometry&&_this.collisionGeometry instanceof GKCollision||(_this.collisionGeometry=GKCollider.create_collision_geometry(_this.geometry.vertices.position,_this.geometry.vertices.texcoord,_this.geometry.vertices.indices))})),_defineProperty(_assertThisInitialized(_this),"rayCastFrom",(function(ray){return _this.collisionGeometry.raycast(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"hitTest",(function(ray){return _this.collisionGeometry.hitTest(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"onSelection",(function(lat,lon,selection){console.log("Icosphere.onSelection",GKUtils.latLonFromWorld(selection.point))})),_defineProperty(_assertThisInitialized(_this),"update",(function(gl,sceneProps,time){_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(Icosphere.prototype)),"update",_thisSuper).call(_thisSuper,sceneProps,time),_this.material.uniforms.u_model=_this.modelMatrix,console.log()})),_defineProperty(_assertThisInitialized(_this),"draw",(function(gl){_this.isReady&&(gl.useProgram(_this.material.programInfo.program),setBuffersAndAttributes(gl,_this.material.programInfo,_this.geometry.bufferInfo),setUniforms(_this.material.programInfo,_this.material.uniforms),gl.drawElements(gl.TRIANGLES,_this.geometry.bufferInfo.numElements,gl.UNSIGNED_SHORT,0))})),_this.material=new ShaderMaterial(shaders),_this.material.uniforms=uniforms,_this.textureSrc={surface:textureSrc},_this}return Icosphere}(Globe),ImageLookup=function ImageLookup(src,onInitCB){var _this=this;_classCallCheck(this,ImageLookup),_defineProperty(this,"isLoaded",!1),_defineProperty(this,"ctx",void 0),_defineProperty(this,"canvas",void 0),_defineProperty(this,"image",void 0),_defineProperty(this,"getIdFromLatLon",(function(lat,lon){if(_this.isLoaded){var nY=1-(lat/90+1)/2,x=(lon/180+1)/2*_this.canvas.width,y=nY*_this.canvas.height;return _this.ctx.getImageData(x,y,1,1).data[0]}})),this.image=new Image,this.image.src=src,this.image.addEventListener("load",(function(){_this.canvas=document.createElement("canvas"),_this.canvas.width=_this.image.width,_this.canvas.height=_this.image.height,_this.ctx=_this.canvas.getContext("2d"),_this.ctx.drawImage(_this.image,0,0),_this.isLoaded=!0,onInitCB()}))},Lookup=function Lookup(data,image){var _this=this;_classCallCheck(this,Lookup),_defineProperty(this,"isInit",!1),_defineProperty(this,"useImageLookup",!1),_defineProperty(this,"imageLookup",null),_defineProperty(this,"getIdFromLatLon",(function(lat,lon){return _this.imageLookup.getIdFromLatLon(lat,lon)})),_defineProperty(this,"getFromId",(function(id){return _this.data.find((function(obj){return obj.id===id}))})),_defineProperty(this,"getFromCode",(function(code){return _this.data.find((function(obj){return obj.code===code}))})),_defineProperty(this,"getFromName",(function(name){return _this.data.find((function(obj){return obj.name===name}))})),data instanceof Array&&(this.data=data,image&&(this.useImageLookup=!0,this.imageLookup=new ImageLookup(image,(function(){_this.isInit=!0}))))},Tween=function(){function Tween(from,to,time,props){var _this=this;_classCallCheck(this,Tween),_defineProperty(this,"time",void 0),_defineProperty(this,"delay",0),_defineProperty(this,"ease",(function(p){return p})),_defineProperty(this,"onComplete",(function(finished){})),_defineProperty(this,"onUpdate",(function(value){})),_defineProperty(this,"endAt",void 0),_defineProperty(this,"isNumeric",!1),_defineProperty(this,"toObj",null),_defineProperty(this,"fromObj",null),_defineProperty(this,"currentObj",null),_defineProperty(this,"mechanism",(function(){if(_this.isRunning){if(_this.stopped)return!1;var timeLeft=_this.endAt-(new Date).getTime();timeLeft<=0?(clearTimeout(_this.playTimeout),_this.stopped=!0,_this.advanceFrame(1,1),_this.isNumeric?_this.onUpdate(_this.currentObj.value):_this.onUpdate(_this.currentObj),_this.onComplete(!0),_this.cleanup()):(_this.advanceFrame(_this.time-timeLeft,_this.time),_this.isNumeric?_this.onUpdate(_this.currentObj.value):_this.onUpdate(_this.currentObj))}})),props=props||{},this.time=time,this.endAt=(new Date).getTime()+this.time,this.isNumeric=!isNaN(from),this.isNumeric?(this.toObj={value:to},this.fromObj={value:from}):(this.toObj=_objectSpread2({},to),this.fromObj=_objectSpread2({},from)),this.currentObj=_objectSpread2({},this.fromObj),this.id=Tween.getId(),Tween.tweens[this.id]=this,props.onComplete&&(this.onComplete=props.onComplete,delete props.onComplete),props.onUpdate&&(this.onUpdate=props.onUpdate,delete props.onUpdate),props.ease&&(this.ease=props.ease,delete props.ease),props.delay&&(this.endAt+=props.delay,this.delay=props.delay,delete props.delay),this.playTimeout=setTimeout((function(){_this.play()}),this.delay)}return _createClass(Tween,[{key:"play",value:function play(){this.endAt=(new Date).getTime()+this.time,this.isRunning=!0,Tween.isRunning||(Tween.isRunning=!0,requestAnimationFrame(Tween.mechanism))}},{key:"stop",value:function stop(){clearTimeout(this.playTimeout),this.stopped=!0,this.onComplete(!1),this.cleanup()}},{key:"currentValue",value:function currentValue(){return this.isNumeric?this.currentObj.value:this.currentObj}},{key:"cleanup",value:function cleanup(){this.isRunning=!1,delete Tween.tweens[this.id],0===Object.keys(Tween.tweens).length&&(Tween.isRunning=!1)}},{key:"advanceFrame",value:function advanceFrame(frame,frames){var t=0!==frames?frame/frames:1;for(var prop in t=this.ease(t),this.toObj){var b=this.fromObj[prop],m=this.toObj[prop]-b;this.currentObj[prop]=b+m*t}}}]),Tween}();Tween.id=0,Tween.tweens={},Tween.killTweensOf=function(obj){for(var x in Tween.tweens){var t=Tween.tweens[x];t.obj===obj&&t.stop()}},Tween.getId=function(){return++Tween.id},Tween.isRunning=!1,Tween.mechanism=function(){for(var key in Tween.tweens)Tween.tweens[key].mechanism();Tween.isRunning&&requestAnimationFrame(Tween.mechanism)};var DataTexture=function DataTexture(width,height){var _this=this;_classCallCheck(this,DataTexture),_defineProperty(this,"width",4),_defineProperty(this,"height",4),_defineProperty(this,"channels",4),_defineProperty(this,"elementLength",1),_defineProperty(this,"data",void 0),_defineProperty(this,"texture",void 0),_defineProperty(this,"isInit",!1),_defineProperty(this,"init",(function(gl){var textureSettings={width:_this.width,height:_this.height,mag:gl.NEAREST,min:gl.NEAREST,src:_this.data};_this.texture=createTexture(gl,textureSettings),_this.isInit=!0})),_defineProperty(this,"updatePixel",(function(gl,c,row,column){if(_this.isInit){var color=new Uint8Array(c);gl.bindTexture(gl.TEXTURE_2D,_this.texture),gl.texSubImage2D(gl.TEXTURE_2D,0,column,row,1,1,gl.RGBA,gl.UNSIGNED_BYTE,color)}})),_defineProperty(this,"updatePixelId",(function(gl,c,id){var row=Math.floor(id/_this.width),col=id-row*_this.width;_this.updatePixel(gl,c,row,col)})),_defineProperty(this,"updateSubrect",(function(gl,c){_this.isInit&&(gl.bindTexture(gl.TEXTURE_2D,_this.texture),gl.texSubImage2D(gl.TEXTURE_2D,0,0,0,_this.width,_this.height,gl.RGBA,gl.UNSIGNED_BYTE,c))})),this.width=width||this.width,this.height=height||this.height,this.data=new Uint8Array(this.width*this.height*this.channels).fill(0)},shaders$1={vertex:"#define GLSLIFY 1\nattribute vec4 position;attribute vec3 normal;attribute vec2 texcoord;uniform mat4 u_worldViewProjection;uniform mat4 u_viewInverse;uniform mat4 u_model;uniform vec3 u_cameraPos;varying float vAlpha;varying vec2 vTexture;void main(){vec4 pos=u_worldViewProjection*u_model*position;vAlpha=dot(normalize(u_cameraPos),normalize(position.xyz));vTexture=texcoord;gl_Position=pos;}",fragment:"precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_inactive;uniform sampler2D u_active;uniform sampler2D u_id;uniform sampler2D u_data;uniform float u_idAnimateIn;uniform float u_idAnimateOut;uniform float u_animateIn;uniform float u_animateOut;uniform vec3 u_animateHover;uniform vec3 u_animatable0;uniform vec3 u_animatable1;uniform vec3 u_animatable2;uniform vec3 u_animatable3;uniform vec3 u_animatable4;uniform vec3 u_animatable5;varying float vAlpha;varying vec2 vTexture;float when_eq(float x,float y){return 1.0-abs(sign(x-y));}float when_lt(float x,float y){return max(sign(y-x),0.0);}vec2 get_data_coords_from_id(float id){float width=16.0;float height=16.0;float w_pixel=1.0/width;float h_pixel=1.0/height;float row=floor(id/width);float col=id-(row*width);return vec2(col*w_pixel,row*h_pixel);}void main(){vec4 inactiveColor=texture2D(u_inactive,vec2(vTexture.x-0.25,vTexture.y));vec4 activeColor=texture2D(u_active,vec2(vTexture.x-0.25,vTexture.y));vec4 idColor=texture2D(u_id,vec2(vTexture.x-0.25,vTexture.y));vec4 dataColor=texture2D(u_data,get_data_coords_from_id(floor(idColor.r*255.0)))*idColor.a;vec3 base=inactiveColor.rgb*(1.0-dataColor.a)+dataColor.rgb*(dataColor.a);vec3 color=base;gl_FragColor=vec4(color,1.0);}"},uniforms$1={u_lightWorldPos:[1,3,-8],u_lightColor:[1,.8,.8,1],u_ambient:[1,1,1,1],u_specular:[1,1,1,1],u_shininess:100,u_specularFactor:.1},IcosphereLookup=function(_Globe){_inherits(IcosphereLookup,_Globe);var _super=_createSuper(IcosphereLookup);function IcosphereLookup(textureSrc){var _thisSuper,_this;return _classCallCheck(this,IcosphereLookup),_defineProperty(_assertThisInitialized(_this=_super.call(this)),"material",null),_defineProperty(_assertThisInitialized(_this),"lookup",null),_defineProperty(_assertThisInitialized(_this),"currentSelection",-1),_defineProperty(_assertThisInitialized(_this),"previousSelection",-1),_defineProperty(_assertThisInitialized(_this),"inAnimation",null),_defineProperty(_assertThisInitialized(_this),"outAnimation",null),_defineProperty(_assertThisInitialized(_this),"currentHover",-1),_defineProperty(_assertThisInitialized(_this),"hoverables",[]),_defineProperty(_assertThisInitialized(_this),"hoverableUniforms",["u_animatable0","u_animatable1","u_animatable2","u_animatable3","u_animatable4","u_animatable5"]),_defineProperty(_assertThisInitialized(_this),"selection0",236),_defineProperty(_assertThisInitialized(_this),"selection1",144),_defineProperty(_assertThisInitialized(_this),"current",236),_defineProperty(_assertThisInitialized(_this),"dataTexture",void 0),_defineProperty(_assertThisInitialized(_this),"dataTextureSize",16),_defineProperty(_assertThisInitialized(_this),"updateCMDs",[]),_defineProperty(_assertThisInitialized(_this),"highlightAnimationProps",{start:0,stop:1,duration:1e3,onUpdate:function onUpdate(value){_this.material.uniforms.u_animateIn=value}}),_defineProperty(_assertThisInitialized(_this),"init",(function(gl,cb){_this.geometry=new Geometry("sphere"),_this.geometry.init(gl);var texturesConfig={inactive:{src:_this.textureSrc.inactive,minMag:gl.LINEAR},active:{src:_this.textureSrc.active,minMag:gl.LINEAR},id:{src:_this.textureSrc.id,minMag:gl.NEAREST}};_this.material.init(gl),_this.material.loadTextures(gl,texturesConfig,(function(){_this.material.uniforms.u_inactive=_this.material.textures.inactive,_this.material.uniforms.u_active=_this.material.textures.active,_this.material.uniforms.u_id=_this.material.textures.id,_this.dataTexture.init(gl),_this.material.uniforms.u_data=_this.dataTexture.texture,cb&&cb()}))})),_defineProperty(_assertThisInitialized(_this),"getValueForId",(function(id){return _this.lookup.getFromId(id)})),_defineProperty(_assertThisInitialized(_this),"getValueForCode",(function(code){return _this.lookup.getFromCode(code)})),_defineProperty(_assertThisInitialized(_this),"getValueForName",(function(name){return _this.lookup.getFromName(name)})),_defineProperty(_assertThisInitialized(_this),"setIdColor",(function(id,color,alpha){var a=void 0===alpha?1:alpha,c=GKUtils.hexToRGBA(color,a,!1);_this.updateCMDs.push((function(gl){_this.dataTexture.updatePixelId(gl,c,id)}))})),_defineProperty(_assertThisInitialized(_this),"createCollisionGeo",(function(){_this.collisionGeometry&&_this.collisionGeometry instanceof GKCollision||(_this.collisionGeometry=GKCollider.create_collision_geometry(_this.geometry.vertices.position,_this.geometry.vertices.texcoord,_this.geometry.vertices.indices))})),_defineProperty(_assertThisInitialized(_this),"rayCastFrom",(function(ray){return _this.collisionGeometry.raycast(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"hitTest",(function(ray){return _this.collisionGeometry.hitTest(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"onSelectionCB",(function(selectionObj){})),_defineProperty(_assertThisInitialized(_this),"onSelection",(function(lat,lon,collision){var coords=GKUtils.latLonFromWorld(collision.point);return _this.current=_this.lookup.getIdFromLatLon(coords.lat,coords.lon),_this.setHighlightId(_this.current),_this.onSelectionCB(_this.current),{id:_this.current,name:_this.lookup.getFromId(_this.current)}})),_defineProperty(_assertThisInitialized(_this),"onHover",(function(collision){console.log("IcosphereLookup.onHover",collision)})),_defineProperty(_assertThisInitialized(_this),"update",(function(gl,sceneProps,time){_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(IcosphereLookup.prototype)),"update",_thisSuper).call(_thisSuper,sceneProps,time),_this.material.uniforms.u_model=_this.modelMatrix,_this.updateCMDs.forEach((function(cmd){cmd(gl)})),_this.updateCMDs=[]})),_defineProperty(_assertThisInitialized(_this),"draw",(function(gl){_this.isReady&&_this.shouldDraw&&(gl.useProgram(_this.material.programInfo.program),setBuffersAndAttributes(gl,_this.material.programInfo,_this.geometry.bufferInfo),setUniforms(_this.material.programInfo,_this.material.uniforms),gl.drawElements(gl.TRIANGLES,_this.geometry.bufferInfo.numElements,gl.UNSIGNED_SHORT,0))})),_defineProperty(_assertThisInitialized(_this),"setCountryHover",(function(countryIndex){})),_defineProperty(_assertThisInitialized(_this),"setHighlightId",(function(id){_this.previousSelection=_this.currentSelection,_this.currentSelection=id;var animateOutStart=_this.inAnimation?_this.inAnimation.currentValue():1,animateOutDuration=300*animateOutStart;_this.animateIn(_this.currentSelection,500),_this.animateOut(_this.previousSelection,animateOutDuration,animateOutStart)})),_defineProperty(_assertThisInitialized(_this),"animateIn",(function(id,duration,cb){_this.material.uniforms.u_idAnimateIn=id,_this.inAnimation&&_this.inAnimation.stop(),_this.material.uniforms.u_animateIn=0,_this.inAnimation=new Tween(_this.highlightAnimationProps.start,_this.highlightAnimationProps.stop,_this.highlightAnimationProps.duration,{onUpdate:_this.highlightAnimationProps.onUpdate})})),_defineProperty(_assertThisInitialized(_this),"animateOut",(function(id,duration,start,cb){_this.material.uniforms.u_idAnimateOut=id,_this.outAnimation&&_this.outAnimation.stop(),_this.material.uniforms.u_animateOut=start,_this.outAnimation=new Tween(start,0,duration,{onUpdate:function onUpdate(value){_this.material.uniforms.u_animateOut=value}})})),_defineProperty(_assertThisInitialized(_this),"addDataset",(function(data){_this.lookup=new Lookup(data,_this.textureSrc.id)})),_defineProperty(_assertThisInitialized(_this),"updateIdState",(function(id,state){})),_this.material=new ShaderMaterial(shaders$1),_this.material.uniforms=uniforms$1,_this.textureSrc={inactive:textureSrc.inactive,active:textureSrc.active,id:textureSrc.id},_this.dataTexture=new DataTexture(_this.dataTextureSize,_this.dataTextureSize),_this}return IcosphereLookup}(Globe);"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==global||"undefined"!=typeof self&&self;function createCommonjsModule(fn,module){return fn(module={exports:{}},module.exports),module.exports}createCommonjsModule((function(module){!function(a,b,c,d){function e(a,b,c){return setTimeout(j(a,c),b)}function f(a,b,c){return!!Array.isArray(a)&&(g(a,c[b],c),!0)}function g(a,b,c){var e;if(a)if(a.forEach)a.forEach(b,c);else if(a.length!==d)for(e=0;e<a.length;)b.call(c,a[e],e,a),e++;else for(e in a)a.hasOwnProperty(e)&&b.call(c,a[e],e,a)}function h(b,c,d){var e="DEPRECATED METHOD: "+c+"\n"+d+" AT \n";return function(){var c=new Error("get-stack-trace"),d=c&&c.stack?c.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",f=a.console&&(a.console.warn||a.console.log);return f&&f.call(a.console,e,d),b.apply(this,arguments)}}function i(a,b,c){var d,e=b.prototype;(d=a.prototype=Object.create(e)).constructor=a,d._super=e,c&&la(d,c)}function j(a,b){return function(){return a.apply(b,arguments)}}function k(a,b){return _typeof(a)==oa?a.apply(b&&b[0]||d,b):a}function l(a,b){return a===d?b:a}function m(a,b,c){g(q(b),(function(b){a.addEventListener(b,c,!1)}))}function n(a,b,c){g(q(b),(function(b){a.removeEventListener(b,c,!1)}))}function o(a,b){for(;a;){if(a==b)return!0;a=a.parentNode}return!1}function p(a,b){return a.indexOf(b)>-1}function q(a){return a.trim().split(/\s+/g)}function r(a,b,c){if(a.indexOf&&!c)return a.indexOf(b);for(var d=0;d<a.length;){if(c&&a[d][c]==b||!c&&a[d]===b)return d;d++}return-1}function s(a){return Array.prototype.slice.call(a,0)}function t(a,b,c){for(var d=[],e=[],f=0;f<a.length;){var g=b?a[f][b]:a[f];r(e,g)<0&&d.push(a[f]),e[f]=g,f++}return c&&(d=b?d.sort((function(a,c){return a[b]>c[b]})):d.sort()),d}function u(a,b){for(var c,e,f=b[0].toUpperCase()+b.slice(1),g=0;g<ma.length;){if((e=(c=ma[g])?c+f:b)in a)return e;g++}return d}function w(b){var c=b.ownerDocument||b;return c.defaultView||c.parentWindow||a}function x(a,b){var c=this;this.manager=a,this.callback=b,this.element=a.element,this.target=a.options.inputTarget,this.domHandler=function(b){k(a.options.enable,[a])&&c.handler(b)},this.init()}function z(a,b,c){var d=c.pointers.length,e=c.changedPointers.length,f=b&Ea&&d-e==0,g=b&(Ga|Ha)&&d-e==0;c.isFirst=!!f,c.isFinal=!!g,f&&(a.session={}),c.eventType=b,function A(a,b){var c=a.session,d=b.pointers,e=d.length;c.firstInput||(c.firstInput=D(b)),e>1&&!c.firstMultiple?c.firstMultiple=D(b):1===e&&(c.firstMultiple=!1);var f=c.firstInput,g=c.firstMultiple,h=g?g.center:f.center,i=b.center=E(d);b.timeStamp=ra(),b.deltaTime=b.timeStamp-f.timeStamp,b.angle=I(h,i),b.distance=H(h,i),function B(a,b){var c=b.center,d=a.offsetDelta||{},e=a.prevDelta||{},f=a.prevInput||{};b.eventType!==Ea&&f.eventType!==Ga||(e=a.prevDelta={x:f.deltaX||0,y:f.deltaY||0},d=a.offsetDelta={x:c.x,y:c.y}),b.deltaX=e.x+(c.x-d.x),b.deltaY=e.y+(c.y-d.y)}(c,b),b.offsetDirection=G(b.deltaX,b.deltaY);var j=F(b.deltaTime,b.deltaX,b.deltaY);b.overallVelocityX=j.x,b.overallVelocityY=j.y,b.overallVelocity=qa(j.x)>qa(j.y)?j.x:j.y,b.scale=g?function K(a,b){return H(b[0],b[1],Ra)/H(a[0],a[1],Ra)}(g.pointers,d):1,b.rotation=g?function J(a,b){return I(b[1],b[0],Ra)+I(a[1],a[0],Ra)}(g.pointers,d):0,b.maxPointers=c.prevInput?b.pointers.length>c.prevInput.maxPointers?b.pointers.length:c.prevInput.maxPointers:b.pointers.length,C(c,b);var k=a.element;o(b.srcEvent.target,k)&&(k=b.srcEvent.target),b.target=k}(a,c),a.emit("hammer.input",c),a.recognize(c),a.session.prevInput=c}function C(a,b){var c,e,f,g,h=a.lastInterval||b,i=b.timeStamp-h.timeStamp;if(b.eventType!=Ha&&(i>Da||h.velocity===d)){var j=b.deltaX-h.deltaX,k=b.deltaY-h.deltaY,l=F(i,j,k);e=l.x,f=l.y,c=qa(l.x)>qa(l.y)?l.x:l.y,g=G(j,k),a.lastInterval=b}else c=h.velocity,e=h.velocityX,f=h.velocityY,g=h.direction;b.velocity=c,b.velocityX=e,b.velocityY=f,b.direction=g}function D(a){for(var b=[],c=0;c<a.pointers.length;)b[c]={clientX:pa(a.pointers[c].clientX),clientY:pa(a.pointers[c].clientY)},c++;return{timeStamp:ra(),pointers:b,center:E(b),deltaX:a.deltaX,deltaY:a.deltaY}}function E(a){var b=a.length;if(1===b)return{x:pa(a[0].clientX),y:pa(a[0].clientY)};for(var c=0,d=0,e=0;b>e;)c+=a[e].clientX,d+=a[e].clientY,e++;return{x:pa(c/b),y:pa(d/b)}}function F(a,b,c){return{x:b/a||0,y:c/a||0}}function G(a,b){return a===b?Ia:qa(a)>=qa(b)?0>a?Ja:Ka:0>b?La:Ma}function H(a,b,c){c||(c=Qa);var d=b[c[0]]-a[c[0]],e=b[c[1]]-a[c[1]];return Math.sqrt(d*d+e*e)}function I(a,b,c){c||(c=Qa);var d=b[c[0]]-a[c[0]],e=b[c[1]]-a[c[1]];return 180*Math.atan2(e,d)/Math.PI}function L(){this.evEl=Ta,this.evWin=Ua,this.pressed=!1,x.apply(this,arguments)}function M(){this.evEl=Xa,this.evWin=Ya,x.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function N(){this.evTarget=$a,this.evWin=_a,this.started=!1,x.apply(this,arguments)}function O(a,b){var c=s(a.touches),d=s(a.changedTouches);return b&(Ga|Ha)&&(c=t(c.concat(d),"identifier",!0)),[c,d]}function P(){this.evTarget=bb,this.targetIds={},x.apply(this,arguments)}function Q(a,b){var c=s(a.touches),d=this.targetIds;if(b&(Ea|Fa)&&1===c.length)return d[c[0].identifier]=!0,[c,c];var e,f,g=s(a.changedTouches),h=[],i=this.target;if(f=c.filter((function(a){return o(a.target,i)})),b===Ea)for(e=0;e<f.length;)d[f[e].identifier]=!0,e++;for(e=0;e<g.length;)d[g[e].identifier]&&h.push(g[e]),b&(Ga|Ha)&&delete d[g[e].identifier],e++;return h.length?[t(f.concat(h),"identifier",!0),h]:void 0}function R(){x.apply(this,arguments);var a=j(this.handler,this);this.touch=new P(this.manager,a),this.mouse=new L(this.manager,a),this.primaryTouch=null,this.lastTouches=[]}function S(a,b){a&Ea?(this.primaryTouch=b.changedPointers[0].identifier,T.call(this,b)):a&(Ga|Ha)&&T.call(this,b)}function T(a){var b=a.changedPointers[0];if(b.identifier===this.primaryTouch){var c={x:b.clientX,y:b.clientY};this.lastTouches.push(c);var d=this.lastTouches;setTimeout((function e(){var a=d.indexOf(c);a>-1&&d.splice(a,1)}),cb)}}function U(a){for(var b=a.srcEvent.clientX,c=a.srcEvent.clientY,d=0;d<this.lastTouches.length;d++){var e=this.lastTouches[d],f=Math.abs(b-e.x),g=Math.abs(c-e.y);if(db>=f&&db>=g)return!0}return!1}function V(a,b){this.manager=a,this.set(b)}function Y(a){this.options=la({},this.defaults,a||{}),this.id=function v(){return ua++}(),this.manager=null,this.options.enable=l(this.options.enable,!0),this.state=nb,this.simultaneous={},this.requireFail=[]}function Z(a){return a&sb?"cancel":a&qb?"end":a&pb?"move":a&ob?"start":""}function $(a){return a==Ma?"down":a==La?"up":a==Ja?"left":a==Ka?"right":""}function _(a,b){var c=b.manager;return c?c.get(a):a}function aa(){Y.apply(this,arguments)}function ba(){aa.apply(this,arguments),this.pX=null,this.pY=null}function ca(){aa.apply(this,arguments)}function da(){Y.apply(this,arguments),this._timer=null,this._input=null}function ea(){aa.apply(this,arguments)}function fa(){aa.apply(this,arguments)}function ga(){Y.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function ha(a,b){return(b=b||{}).recognizers=l(b.recognizers,ha.defaults.preset),new ia(a,b)}function ia(a,b){this.options=la({},ha.defaults,b||{}),this.options.inputTarget=this.options.inputTarget||a,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=a,this.input=function y(a){var c=a.options.inputClass;return new(c||(xa?M:ya?P:wa?R:L))(a,z)}(this),this.touchAction=new V(this,this.options.touchAction),ja(this,!0),g(this.options.recognizers,(function(a){var b=this.add(new a[0](a[1]));a[2]&&b.recognizeWith(a[2]),a[3]&&b.requireFailure(a[3])}),this)}function ja(a,b){var d,c=a.element;c.style&&(g(a.options.cssProps,(function(e,f){d=u(c.style,f),b?(a.oldCssProps[d]=c.style[d],c.style[d]=e):c.style[d]=a.oldCssProps[d]||""})),b||(a.oldCssProps={}))}function ka(a,c){var d=b.createEvent("Event");d.initEvent(a,!0,!0),d.gesture=c,c.target.dispatchEvent(d)}var la,ma=["","webkit","Moz","MS","ms","o"],na=b.createElement("div"),oa="function",pa=Math.round,qa=Math.abs,ra=Date.now;la="function"!=typeof Object.assign?function(a){if(a===d||null===a)throw new TypeError("Cannot convert undefined or null to object");for(var b=Object(a),c=1;c<arguments.length;c++){var e=arguments[c];if(e!==d&&null!==e)for(var f in e)e.hasOwnProperty(f)&&(b[f]=e[f])}return b}:Object.assign;var sa=h((function(a,b,c){for(var e=Object.keys(b),f=0;f<e.length;)(!c||c&&a[e[f]]===d)&&(a[e[f]]=b[e[f]]),f++;return a}),"extend","Use `assign`."),ta=h((function(a,b){return sa(a,b,!0)}),"merge","Use `assign`."),ua=1,wa="ontouchstart"in a,xa=u(a,"PointerEvent")!==d,ya=wa&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),za="touch",Ba="mouse",Da=25,Ea=1,Fa=2,Ga=4,Ha=8,Ia=1,Ja=2,Ka=4,La=8,Ma=16,Na=Ja|Ka,Oa=La|Ma,Pa=Na|Oa,Qa=["x","y"],Ra=["clientX","clientY"];x.prototype={handler:function handler(){},init:function init(){this.evEl&&m(this.element,this.evEl,this.domHandler),this.evTarget&&m(this.target,this.evTarget,this.domHandler),this.evWin&&m(w(this.element),this.evWin,this.domHandler)},destroy:function destroy(){this.evEl&&n(this.element,this.evEl,this.domHandler),this.evTarget&&n(this.target,this.evTarget,this.domHandler),this.evWin&&n(w(this.element),this.evWin,this.domHandler)}};var Sa={mousedown:Ea,mousemove:Fa,mouseup:Ga},Ta="mousedown",Ua="mousemove mouseup";i(L,x,{handler:function handler(a){var b=Sa[a.type];b&Ea&&0===a.button&&(this.pressed=!0),b&Fa&&1!==a.which&&(b=Ga),this.pressed&&(b&Ga&&(this.pressed=!1),this.callback(this.manager,b,{pointers:[a],changedPointers:[a],pointerType:Ba,srcEvent:a}))}});var Va={pointerdown:Ea,pointermove:Fa,pointerup:Ga,pointercancel:Ha,pointerout:Ha},Wa={2:za,3:"pen",4:Ba,5:"kinect"},Xa="pointerdown",Ya="pointermove pointerup pointercancel";a.MSPointerEvent&&!a.PointerEvent&&(Xa="MSPointerDown",Ya="MSPointerMove MSPointerUp MSPointerCancel"),i(M,x,{handler:function handler(a){var b=this.store,c=!1,d=a.type.toLowerCase().replace("ms",""),e=Va[d],f=Wa[a.pointerType]||a.pointerType,g=f==za,h=r(b,a.pointerId,"pointerId");e&Ea&&(0===a.button||g)?0>h&&(b.push(a),h=b.length-1):e&(Ga|Ha)&&(c=!0),0>h||(b[h]=a,this.callback(this.manager,e,{pointers:b,changedPointers:[a],pointerType:f,srcEvent:a}),c&&b.splice(h,1))}});var Za={touchstart:Ea,touchmove:Fa,touchend:Ga,touchcancel:Ha},$a="touchstart",_a="touchstart touchmove touchend touchcancel";i(N,x,{handler:function handler(a){var b=Za[a.type];if(b===Ea&&(this.started=!0),this.started){var c=O.call(this,a,b);b&(Ga|Ha)&&c[0].length-c[1].length==0&&(this.started=!1),this.callback(this.manager,b,{pointers:c[0],changedPointers:c[1],pointerType:za,srcEvent:a})}}});var ab={touchstart:Ea,touchmove:Fa,touchend:Ga,touchcancel:Ha},bb="touchstart touchmove touchend touchcancel";i(P,x,{handler:function handler(a){var b=ab[a.type],c=Q.call(this,a,b);c&&this.callback(this.manager,b,{pointers:c[0],changedPointers:c[1],pointerType:za,srcEvent:a})}});var cb=2500,db=25;i(R,x,{handler:function handler(a,b,c){var d=c.pointerType==za,e=c.pointerType==Ba;if(!(e&&c.sourceCapabilities&&c.sourceCapabilities.firesTouchEvents)){if(d)S.call(this,b,c);else if(e&&U.call(this,c))return;this.callback(a,b,c)}},destroy:function destroy(){this.touch.destroy(),this.mouse.destroy()}});var eb=u(na.style,"touchAction"),fb=eb!==d,gb="compute",hb="auto",ib="manipulation",jb="none",kb="pan-x",lb="pan-y",mb=function X(){if(!fb)return!1;var b={},c=a.CSS&&a.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(d){b[d]=!c||a.CSS.supports("touch-action",d)})),b}();V.prototype={set:function set(a){a==gb&&(a=this.compute()),fb&&this.manager.element.style&&mb[a]&&(this.manager.element.style[eb]=a),this.actions=a.toLowerCase().trim()},update:function update(){this.set(this.manager.options.touchAction)},compute:function compute(){var a=[];return g(this.manager.recognizers,(function(b){k(b.options.enable,[b])&&(a=a.concat(b.getTouchAction()))})),function W(a){if(p(a,jb))return jb;var b=p(a,kb),c=p(a,lb);return b&&c?jb:b||c?b?kb:lb:p(a,ib)?ib:hb}(a.join(" "))},preventDefaults:function preventDefaults(a){var b=a.srcEvent,c=a.offsetDirection;if(!this.manager.session.prevented){var d=this.actions,e=p(d,jb)&&!mb[jb],f=p(d,lb)&&!mb[lb],g=p(d,kb)&&!mb[kb];if(e){var h=1===a.pointers.length,i=a.distance<2,j=a.deltaTime<250;if(h&&i&&j)return}return g&&f?void 0:e||f&&c&Na||g&&c&Oa?this.preventSrc(b):void 0}b.preventDefault()},preventSrc:function preventSrc(a){this.manager.session.prevented=!0,a.preventDefault()}};var nb=1,ob=2,pb=4,qb=8,rb=qb,sb=16;Y.prototype={defaults:{},set:function set(a){return la(this.options,a),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function recognizeWith(a){if(f(a,"recognizeWith",this))return this;var b=this.simultaneous;return b[(a=_(a,this)).id]||(b[a.id]=a,a.recognizeWith(this)),this},dropRecognizeWith:function dropRecognizeWith(a){return f(a,"dropRecognizeWith",this)||(a=_(a,this),delete this.simultaneous[a.id]),this},requireFailure:function requireFailure(a){if(f(a,"requireFailure",this))return this;var b=this.requireFail;return-1===r(b,a=_(a,this))&&(b.push(a),a.requireFailure(this)),this},dropRequireFailure:function dropRequireFailure(a){if(f(a,"dropRequireFailure",this))return this;a=_(a,this);var b=r(this.requireFail,a);return b>-1&&this.requireFail.splice(b,1),this},hasRequireFailures:function hasRequireFailures(){return this.requireFail.length>0},canRecognizeWith:function canRecognizeWith(a){return!!this.simultaneous[a.id]},emit:function emit(a){function b(b){c.manager.emit(b,a)}var c=this,d=this.state;qb>d&&b(c.options.event+Z(d)),b(c.options.event),a.additionalEvent&&b(a.additionalEvent),d>=qb&&b(c.options.event+Z(d))},tryEmit:function tryEmit(a){return this.canEmit()?this.emit(a):void(this.state=32)},canEmit:function canEmit(){for(var a=0;a<this.requireFail.length;){if(!(this.requireFail[a].state&(32|nb)))return!1;a++}return!0},recognize:function recognize(a){var b=la({},a);return k(this.options.enable,[this,b])?(this.state&(rb|sb|32)&&(this.state=nb),this.state=this.process(b),void(this.state&(ob|pb|qb|sb)&&this.tryEmit(b))):(this.reset(),void(this.state=32))},process:function process(a){},getTouchAction:function getTouchAction(){},reset:function reset(){}},i(aa,Y,{defaults:{pointers:1},attrTest:function attrTest(a){var b=this.options.pointers;return 0===b||a.pointers.length===b},process:function process(a){var b=this.state,c=a.eventType,d=b&(ob|pb),e=this.attrTest(a);return d&&(c&Ha||!e)?b|sb:d||e?c&Ga?b|qb:b&ob?b|pb:ob:32}}),i(ba,aa,{defaults:{event:"pan",threshold:10,pointers:1,direction:Pa},getTouchAction:function getTouchAction(){var a=this.options.direction,b=[];return a&Na&&b.push(lb),a&Oa&&b.push(kb),b},directionTest:function directionTest(a){var b=this.options,c=!0,d=a.distance,e=a.direction,f=a.deltaX,g=a.deltaY;return e&b.direction||(b.direction&Na?(e=0===f?Ia:0>f?Ja:Ka,c=f!=this.pX,d=Math.abs(a.deltaX)):(e=0===g?Ia:0>g?La:Ma,c=g!=this.pY,d=Math.abs(a.deltaY))),a.direction=e,c&&d>b.threshold&&e&b.direction},attrTest:function attrTest(a){return aa.prototype.attrTest.call(this,a)&&(this.state&ob||!(this.state&ob)&&this.directionTest(a))},emit:function emit(a){this.pX=a.deltaX,this.pY=a.deltaY;var b=$(a.direction);b&&(a.additionalEvent=this.options.event+b),this._super.emit.call(this,a)}}),i(ca,aa,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function getTouchAction(){return[jb]},attrTest:function attrTest(a){return this._super.attrTest.call(this,a)&&(Math.abs(a.scale-1)>this.options.threshold||this.state&ob)},emit:function emit(a){if(1!==a.scale){var b=a.scale<1?"in":"out";a.additionalEvent=this.options.event+b}this._super.emit.call(this,a)}}),i(da,Y,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function getTouchAction(){return[hb]},process:function process(a){var b=this.options,c=a.pointers.length===b.pointers,d=a.distance<b.threshold,f=a.deltaTime>b.time;if(this._input=a,!d||!c||a.eventType&(Ga|Ha)&&!f)this.reset();else if(a.eventType&Ea)this.reset(),this._timer=e((function(){this.state=rb,this.tryEmit()}),b.time,this);else if(a.eventType&Ga)return rb;return 32},reset:function reset(){clearTimeout(this._timer)},emit:function emit(a){this.state===rb&&(a&&a.eventType&Ga?this.manager.emit(this.options.event+"up",a):(this._input.timeStamp=ra(),this.manager.emit(this.options.event,this._input)))}}),i(ea,aa,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function getTouchAction(){return[jb]},attrTest:function attrTest(a){return this._super.attrTest.call(this,a)&&(Math.abs(a.rotation)>this.options.threshold||this.state&ob)}}),i(fa,aa,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Na|Oa,pointers:1},getTouchAction:function getTouchAction(){return ba.prototype.getTouchAction.call(this)},attrTest:function attrTest(a){var b,c=this.options.direction;return c&(Na|Oa)?b=a.overallVelocity:c&Na?b=a.overallVelocityX:c&Oa&&(b=a.overallVelocityY),this._super.attrTest.call(this,a)&&c&a.offsetDirection&&a.distance>this.options.threshold&&a.maxPointers==this.options.pointers&&qa(b)>this.options.velocity&&a.eventType&Ga},emit:function emit(a){var b=$(a.offsetDirection);b&&this.manager.emit(this.options.event+b,a),this.manager.emit(this.options.event,a)}}),i(ga,Y,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function getTouchAction(){return[ib]},process:function process(a){var b=this.options,c=a.pointers.length===b.pointers,d=a.distance<b.threshold,f=a.deltaTime<b.time;if(this.reset(),a.eventType&Ea&&0===this.count)return this.failTimeout();if(d&&f&&c){if(a.eventType!=Ga)return this.failTimeout();var g=!this.pTime||a.timeStamp-this.pTime<b.interval,h=!this.pCenter||H(this.pCenter,a.center)<b.posThreshold;if(this.pTime=a.timeStamp,this.pCenter=a.center,h&&g?this.count+=1:this.count=1,this._input=a,0===this.count%b.taps)return this.hasRequireFailures()?(this._timer=e((function(){this.state=rb,this.tryEmit()}),b.interval,this),ob):rb}return 32},failTimeout:function failTimeout(){return this._timer=e((function(){this.state=32}),this.options.interval,this),32},reset:function reset(){clearTimeout(this._timer)},emit:function emit(){this.state==rb&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),ha.VERSION="2.0.8",ha.defaults={domEvents:!1,touchAction:gb,enable:!0,inputTarget:null,inputClass:null,preset:[[ea,{enable:!1}],[ca,{enable:!1},["rotate"]],[fa,{direction:Na}],[ba,{direction:Na},["swipe"]],[ga],[ga,{event:"doubletap",taps:2},["tap"]],[da]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};ia.prototype={set:function set(a){return la(this.options,a),a.touchAction&&this.touchAction.update(),a.inputTarget&&(this.input.destroy(),this.input.target=a.inputTarget,this.input.init()),this},stop:function stop(a){this.session.stopped=a?2:1},recognize:function recognize(a){var b=this.session;if(!b.stopped){this.touchAction.preventDefaults(a);var c,d=this.recognizers,e=b.curRecognizer;(!e||e&&e.state&rb)&&(e=b.curRecognizer=null);for(var f=0;f<d.length;)c=d[f],2===b.stopped||e&&c!=e&&!c.canRecognizeWith(e)?c.reset():c.recognize(a),!e&&c.state&(ob|pb|qb)&&(e=b.curRecognizer=c),f++}},get:function get(a){if(a instanceof Y)return a;for(var b=this.recognizers,c=0;c<b.length;c++)if(b[c].options.event==a)return b[c];return null},add:function add(a){if(f(a,"add",this))return this;var b=this.get(a.options.event);return b&&this.remove(b),this.recognizers.push(a),a.manager=this,this.touchAction.update(),a},remove:function remove(a){if(f(a,"remove",this))return this;if(a=this.get(a)){var b=this.recognizers,c=r(b,a);-1!==c&&(b.splice(c,1),this.touchAction.update())}return this},on:function on(a,b){if(a!==d&&b!==d){var c=this.handlers;return g(q(a),(function(a){c[a]=c[a]||[],c[a].push(b)})),this}},off:function off(a,b){if(a!==d){var c=this.handlers;return g(q(a),(function(a){b?c[a]&&c[a].splice(r(c[a],b),1):delete c[a]})),this}},emit:function emit(a,b){this.options.domEvents&&ka(a,b);var c=this.handlers[a]&&this.handlers[a].slice();if(c&&c.length){b.type=a,b.preventDefault=function(){b.srcEvent.preventDefault()};for(var d=0;d<c.length;)c[d](b),d++}},destroy:function destroy(){this.element&&ja(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},la(ha,{INPUT_START:Ea,INPUT_MOVE:Fa,INPUT_END:Ga,INPUT_CANCEL:Ha,STATE_POSSIBLE:nb,STATE_BEGAN:ob,STATE_CHANGED:pb,STATE_ENDED:qb,STATE_RECOGNIZED:rb,STATE_CANCELLED:sb,STATE_FAILED:32,DIRECTION_NONE:Ia,DIRECTION_LEFT:Ja,DIRECTION_RIGHT:Ka,DIRECTION_UP:La,DIRECTION_DOWN:Ma,DIRECTION_HORIZONTAL:Na,DIRECTION_VERTICAL:Oa,DIRECTION_ALL:Pa,Manager:ia,Input:x,TouchAction:V,TouchInput:P,MouseInput:L,PointerEventInput:M,TouchMouseInput:R,SingleTouchInput:N,Recognizer:Y,AttrRecognizer:aa,Tap:ga,Pan:ba,Swipe:fa,Pinch:ca,Rotate:ea,Press:da,on:m,off:n,each:g,merge:ta,extend:sa,assign:la,inherit:i,bindFn:j,prefixed:u}),(void 0!==a?a:"undefined"!=typeof self?self:{}).Hammer=ha,module.exports?module.exports=ha:a.Hammer=ha}(window,document)}));var MovementModel=function(){function MovementModel(){var _this=this;_classCallCheck(this,MovementModel),_defineProperty(this,"isInteractive",!0),_defineProperty(this,"hasAmbient",!1),_defineProperty(this,"init",(function(width,height,aspect,fov){_this.zStart=_this._zBounded(_this.settings.CAM_Z_INI),_this.zCurrent=_this.zStart,_this.zTarget=_this.zStart,_this.rotStart=[0,0],_this.rotCurrent=_this.rotStart,_this.rotTarget=_this.rotStart,_this.rotVelocity=[0,0],_this.interacting=!1,_this.lastGestureChange=0,_this.pointsPerRadian=Math.PI/(width/window.devicePixelRatio),_this.zFullWidth=_this.settings.CAM_Z_MAX,_this.camFov=fov,_this.camAspect=aspect,_this.zFullWidth=_this._frustumDist(1/_this.camAspect*2,_this.camFov)})),_defineProperty(this,"resize",(function(width,height,aspect,fov){_this.pointsPerRadian=Math.PI/(width/window.devicePixelRatio),_this.camFov=fov,_this.camAspect=aspect,_this.zFullWidth=_this._frustumDist(1/_this.camAspect*2,_this.camFov)})),_defineProperty(this,"activate",(function(){_this.hammertime.on("panstart",_this._onPanStart.bind(_this)),_this.hammertime.on("pan",_this._onPanContinue.bind(_this)),_this.hammertime.on("panend",_this._onPanEnd.bind(_this)),_this.hammertime.on("tap",_this._onTap.bind(_this))})),_defineProperty(this,"deactivate",(function(){_this.hammertime.off("panstart",_this._onPanStart.bind(_this)),_this.hammertime.off("pan",_this._onPanContinue.bind(_this)),_this.hammertime.off("panend",_this._onPanEnd.bind(_this)),_this.hammertime.off("tap",_this._onTap.bind(_this))})),_defineProperty(this,"_zForScale",(function(scale){return scale<1?_this.zStart*(1/scale):_this.zStart+(_this.settings.CAM_Z_MIN-_this.zStart)*(1-1/scale)})),_defineProperty(this,"_onWheel",(function(event){if(_this.isInteractive){event.preventDefault();var absScaledDeltaY=Math.pow((event.deltaY+10)/100,3)/250,scaledDeltaY=event.deltaY>0?absScaledDeltaY:1/absScaledDeltaY;scaledDeltaY=Math.max(.9,scaledDeltaY),scaledDeltaY=Math.min(1.2,scaledDeltaY),_this.zStart=_this.zCurrent,_this.rotVelocity=[0,0],_this.zTarget=_this._zBounded(_this._zForScale(scaledDeltaY)),_this.lastGestureChange=event.timeStamp}})),_defineProperty(this,"_onPanContinue",(function(event){if(_this.isInteractive&&!0===_this.interacting){var t=[event.deltaY/devicePixelRatio*6,event.deltaX/devicePixelRatio*6],d=_this._rotForDelta([_this.panStart[0]-t[0],_this.panStart[1]-t[1]]);_this.rotTarget=_this._rotBounded([_this.rotStart[0]+d[0],_this.rotStart[1]+d[1]]),_this.lastGestureChange=event.timeStamp}})),_defineProperty(this,"_onPanEnd",(function(event){if(_this.isInteractive)if(_this.interacting=!1,event.timeStamp-_this.lastGestureChange>.1)_this.rotVelocity=[0,0];else{var d=_this._rotForDelta([event.overallVelocityX,event.overallVelocityY]);_this.rotVelocity=[.016*d[0],.016*d[1]],_this.rotDir=d[0]>0?1:-1;var pitchNorm=_this.rotTarget[0]/(Math.PI/2)/.5;Math.abs(pitchNorm)<1?_this.ambientPitchX=Math.asin(pitchNorm):_this.ambientPitchX=Math.PI/2*(pitchNorm/Math.abs(pitchNorm)),_this.ambientPitchDir=d[1]>0?-1:1}})),_defineProperty(this,"_updateRot",(function(){if(_this.interacting)_this.ambientYaw=0,_this.ambientPitch=0,_this.ambientTween&&(_this.ambientTween.stop(),_this.ambientTween=null);else{var ambientPitchY;ambientPitchY=Math.sin(_this.ambientPitchX)*(Math.PI/2)*.5,_this.ambientPitchX+=.001*_this.ambientPitchDir*_this.ambientPitch,_this.rotTarget=[_this.rotTarget[0]*(1-_this.ambientPitch)+ambientPitchY*_this.ambientPitch,_this.rotTarget[1]];var targetBounded=[Math.max(Math.min(_this.rotTarget[0],_this.settings.CAM_PITCH_SPRING_MAX),_this.settings.CAM_PITCH_SPRING_MIN),_this.rotTarget[1]],targetDelta=[_this.rotTarget[0]-targetBounded[0]+_this.rotVelocity[0],_this.rotTarget[1]-targetBounded[1]+_this.rotVelocity[1]];_this.rotTarget=[_this.rotTarget[0]-targetDelta[0]*_this.settings.SPRING_STR*3,_this.rotTarget[1]-targetDelta[1]*_this.settings.SPRING_STR*3],_this.rotVelocity=[_this.rotVelocity[0]*_this.settings.FRICTION,_this.rotVelocity[1]*_this.settings.FRICTION];var camP=_this.zCurrent/_this.settings.CAM_Z_MAX;_this.hasAmbient&&0===_this.ambientYaw&&!_this.ambientTween&&_this.setAmbientAnimated(!0,2500);var yawMin=_this.ambientYaw*(camP*camP);Math.abs(_this.rotVelocity[1])<yawMin&&(_this.rotVelocity[1]=yawMin*_this.rotDir)}var rotDelta=[_this.rotTarget[0]-_this.rotCurrent[0],_this.rotTarget[1]-_this.rotCurrent[1]];_this.rotCurrent=[_this.rotCurrent[0]+rotDelta[0]*_this.settings.SPRING_STR,_this.rotCurrent[1]+rotDelta[1]*_this.settings.SPRING_STR]})),_defineProperty(this,"_updateZ",(function(){if(!_this.interacting){_this.zBounded=Math.max(Math.min(_this.zTarget,_this.settings.CAM_Z_SPRING_MAX),_this.settings.CAM_Z_SPRING_MIN);var _zDelta=_this.zTarget-_this.zBounded;_this.zTarget-=_zDelta*_this.settings.SPRING_STR*3}var zDelta=_this.zTarget-_this.zCurrent;_this.zCurrent+=zDelta*_this.settings.SPRING_STR})),_defineProperty(this,"update",(function(newFOV){_this.fov=newFOV,_this._updateZ(),_this._updateRot()})),_defineProperty(this,"setAltitude",(function(altitude){_this.zTarget=1+altitude/_this.settings.EARTH_RADIUS})),_defineProperty(this,"getAltitude",(function(){return(_this.zCurrent-1)*_this.settings.EARTH_RADIUS})),_defineProperty(this,"setAmbient",(function(ambient){_this.ambientTween&&(_this.ambientTween.stop(),_this.ambientTween=null),_this.hasAmbient=ambient,ambient?(_this.ambientYaw=1*_this.settings.YAW_MIN_VELOCITY,_this.ambientPitch=1):(_this.ambientYaw=0,_this.ambientPitch=0);var pitchNorm=_this.rotTarget[0]/(Math.PI/2)/.5;Math.abs(pitchNorm)<1?_this.ambientPitchX=Math.asin(pitchNorm):_this.ambientPitchX=Math.PI/2*(pitchNorm/Math.abs(pitchNorm))})),_defineProperty(this,"setAmbientAnimated",(function(ambient,duration){_this.hasAmbient=ambient;var startValue=ambient?0:1,endValue=ambient?1:0;_this.ambientTween&&(startValue=_this.ambientTween.currentValue(),_this.ambientTween.stop());var d=(duration||250)*Math.abs(endValue-startValue);if(0!==d){var pitchNorm=_this.rotTarget[0]/(Math.PI/2)/.5;Math.abs(pitchNorm)<1?_this.ambientPitchX=Math.asin(pitchNorm):_this.ambientPitchX=Math.PI/2*(pitchNorm/Math.abs(pitchNorm)),_this.ambientTween=new Tween(startValue,endValue,d,{onUpdate:function onUpdate(value){_this.ambientYaw=value*_this.settings.YAW_MIN_VELOCITY,_this.ambientPitch=value},onComplete:function onComplete(didFinish){didFinish&&(_this.ambientTween=null)}})}else _this.setAmbient(ambient)})),_defineProperty(this,"reset",(function(){_this.zStart=_this._zBounded(_this.settings.CAM_Z_INI),_this.zCurrent=_this.zStart,_this.zTarget=_this.zStart,_this.rotStart=[0,0],_this.rotCurrent=_this.rotStart,_this.rotTarget=_this.rotStart,_this.rotVelocity=[0,0],_this.interacting=!1,_this.lastGestureChange=0})),_defineProperty(this,"_zBounded",(function(z){if(z>_this.settings.CAM_Z_SPRING_MAX){var d=z-_this.settings.CAM_Z_SPRING_MAX,x=_this.settings.CAM_Z_MAX-_this.settings.CAM_Z_SPRING_MAX,f=_this.easeOutSin(Math.min(d/x,1));return _this.settings.CAM_Z_SPRING_MAX+x*f}if(z<_this.settings.CAM_Z_SPRING_MIN){var _d=z-_this.settings.CAM_Z_SPRING_MIN,_x=_this.settings.CAM_Z_MIN-_this.settings.CAM_Z_SPRING_MIN,_f=_this.easeOutSin(Math.min(_d/_x,1));return _this.settings.CAM_Z_SPRING_MIN+_x*_f}return z})),_defineProperty(this,"_rotBounded",(function(r){if(r[0]>_this.settings.CAM_PITCH_SPRING_MAX){var d=r[0]-_this.settings.CAM_PITCH_SPRING_MAX,x=_this.settings.CAM_PITCH_MAX-_this.settings.CAM_PITCH_SPRING_MAX,f=_this.easeOutSin(Math.min(d/x,1));return[_this.settings.CAM_PITCH_SPRING_MAX+x*f,r[1]]}if(r[0]<_this.settings.CAM_PITCH_SPRING_MIN){var _d2=r[0]-_this.settings.CAM_PITCH_SPRING_MIN,_x2=_this.settings.CAM_PITCH_MIN-_this.settings.CAM_PITCH_SPRING_MIN,_f2=_this.easeOutSin(Math.min(_d2/_x2,1));return[_this.settings.CAM_PITCH_SPRING_MIN+_x2*_f2,r[1]]}return r})),_defineProperty(this,"_frustumDist",(function(height,fov){return.5*height/Math.tan(.5*fov*(Math.PI/180))})),_defineProperty(this,"_rotForDelta",(function(delta){return[delta[0]*(_this.pointsPerRadian*(_this.zCurrent/_this.zFullWidth)),delta[1]*(_this.pointsPerRadian*(_this.zCurrent/_this.zFullWidth))]})),_defineProperty(this,"easeOutSin",(function(x){return Math.sin(x*Math.PI/2)})),this.settings={},this.settings.EARTH_RADIUS=6378137,this.settings.CAM_Z_MIN=1,this.settings.CAM_Z_MAX=45,this.settings.CAM_Z_INI=.5*(this.settings.CAM_Z_MIN+this.settings.CAM_Z_MAX),this.settings.CAM_Z_SPRING_BND=.8,this.settings.CAM_Z_SPRING_MAX=this.settings.CAM_Z_MAX*this.settings.CAM_Z_SPRING_BND,this.settings.CAM_Z_SPRING_MIN=this.settings.CAM_Z_MIN*(1/this.settings.CAM_Z_SPRING_BND),this.settings.CAM_PITCH_MAX=.5*Math.PI,this.settings.CAM_PITCH_MIN=.5*-Math.PI,this.settings.CAM_PITCH_INI=0,this.settings.CAM_PITCH_SPRING_BND=.8,this.settings.CAM_PITCH_SPRING_MAX=this.settings.CAM_PITCH_MAX*this.settings.CAM_PITCH_SPRING_BND,this.settings.CAM_PITCH_SPRING_MIN=this.settings.CAM_PITCH_MIN*this.settings.CAM_PITCH_SPRING_BND,this.settings.FRICTION=.1,this.settings.SPRING_STR=.16,this.settings.YAW_MIN_VELOCITY=.01,this.zStart=0,this.zCurrent=0,this.zTarget=0,this.panStart=[0,0],this.rotStart=[0,0],this.rotCurrent=[0,0],this.rotTarget=[0,0],this.rotVelocity=[0,0],this.rotDir=1,this.ambientYaw=0,this.ambientPitch=0,this.ambientPitchX=0,this.ambientPitchDir=-1,this.ambientTween=null,this.interacting=!1,this.getInteractionState=function(){return _this.interacting},this.lastGestureChange=0,this.pointsPerRadian=0,this.zFullWidth=0,this.onTap=function(event){},this.onPanCB=function(event){}}return _createClass(MovementModel,[{key:"_onTap",value:function _onTap(event){this.isInteractive&&this.onTap(event)}},{key:"_onPinch",value:function _onPinch(event){this.isInteractive&&(event.isFirst?(this.zStart=this.zCurrent,this.rotVelocity=[0,0]):event.isFinal||(this.zTarget=this._zBounded(this._zForScale(event.scale)),this.lastGestureChange=event.timeStamp))}},{key:"_onPanStart",value:function _onPanStart(event){this.interacting=!0,this.rotStart=this.rotCurrent,this.panStart=[event.deltaX/devicePixelRatio,event.deltaY/devicePixelRatio],this.rotVelocity=[0,0]}},{key:"camPos",get:function get(){return[0,0,this.zCurrent]}},{key:"camYaw",get:function get(){return this.rotCurrent[1]}},{key:"camPitch",get:function get(){return this.rotCurrent[0]}}]),MovementModel}(),InteractionController=function(){function InteractionController(targetElement,camera,options){var _this=this;_classCallCheck(this,InteractionController),_defineProperty(this,"isInteractive",!1),_defineProperty(this,"targetElement",null),_defineProperty(this,"targetDrawable",null),_defineProperty(this,"camera",null),_defineProperty(this,"movementModel",null),_defineProperty(this,"boundingRect",null),_defineProperty(this,"onTapCB",null),_defineProperty(this,"options",{tap:!0,pan:!0,pinch:!0}),_defineProperty(this,"release",(function(){_this.hammer.destroy()})),_defineProperty(this,"resize",(function(){_this.boundingRect=_this.targetElement.getBoundingClientRect(),_this.movementModel.resize(_this.boundingRect.width,_this.boundingRect.height,_this.camera.aspect,_this.camera.fov)})),_defineProperty(this,"update",(function(){_this.movementModel.update(_this.camera.fov)})),_defineProperty(this,"isOverTarget",(function(x,y){var xNorm=x-_this.boundingRect.x,yNorm=y-_this.boundingRect.y,xNormalized=xNorm/_this.boundingRect.width,yNormalized=(_this.boundingRect.height-yNorm)/_this.boundingRect.height,ray=_this.camera.getRayFromScreen(xNormalized,yNormalized);return _this.targetDrawable.hitTest(ray)})),_defineProperty(this,"onPanStart",(function(event){_this.isOverTarget(event.center.x,event.center.y)&&(_this.movementModel._onPanStart(event),_this.onPan&&_this.onPan(event))})),_defineProperty(this,"onPanContinue",(function(event){0!==event.center.x&&0!==event.center.y&&(_this.movementModel._onPanContinue(event),_this.onPan&&_this.onPan(event))})),_defineProperty(this,"onPanEnd",(function(event){_this.movementModel._onPanEnd(event)})),_defineProperty(this,"onTap",(function(event){var xNorm=event.center.x-_this.boundingRect.x,yNorm=event.center.y-_this.boundingRect.y;_this.onTapCB&&_this.onTapCB(xNorm,yNorm)})),targetElement?(this.targetElement=targetElement,this.boundingRect=this.targetElement.getBoundingClientRect()):targetElement=window,this.camera=camera,options&&(options.tap&&(this.options.tap=options.tap),options.pan&&(this.options.pan=options.pan),options.pinch&&(this.options.pinch=options.pinch)),this.movementModel=new MovementModel,this.movementModel.init(this.boundingRect.width,this.boundingRect.height,this.camera.aspect,this.camera.fov),this.movementModel.isInteractive=!0,this.movementModel.hasAmbient=!1,this.hammer=window.Hammer(this.targetElement,null),this.options.tap&&this.hammer.on("tap",this.onTap),this.options.pan&&this.hammer.on("panstart",this.onPanStart),this.options.pan&&this.hammer.on("pan",this.onPanContinue),this.options.pan&&this.hammer.on("panend",this.onPanEnd),this.options.pinch&&this.hammer.on("tap",this.onPinch),this.isInteractive=!0}return _createClass(InteractionController,[{key:"target",set:function set(newTarget){this.targetDrawable=newTarget}}]),InteractionController}(),CubicBezier=function CubicBezier(){_classCallCheck(this,CubicBezier)};CubicBezier.create=function(p1x,p1y,p2x,p2y){var cx=3*p1x,bx=3*(p2x-p1x)-cx,ax=1-cx-bx,cy=3*p1y,by=3*(p2y-p1y)-cy,ay=1-cy-by,sampleCurveX=function sampleCurveX(t){return((ax*t+bx)*t+cx)*t},sampleCurveDerivativeX=function sampleCurveDerivativeX(t){return(3*ax*t+2*bx)*t+cx};return function(x){return function sampleCurveY(t){return((ay*t+by)*t+cy)*t}(function solveCurveX(x,epsilon){var t0,t1,t2,x2,d2;t2=x;for(var i=0;i<8;i++){if(x2=sampleCurveX(t2)-x,Math.abs(x2)<epsilon)return t2;if(d2=sampleCurveDerivativeX(t2),Math.abs(d2)<1e-6)break;t2-=x2/d2}if((t2=x)<(t0=0))return t0;if(t2>(t1=1))return t1;for(;t0<t1;){if(x2=sampleCurveX(t2),Math.abs(x2-x)<epsilon)return t2;x>x2?t0=t2:t1=t2,t2=.5*(t1-t0)+t0}return t2}(x,1e-9))}};var asin=Math.asin,cos=Math.cos,sin=Math.sin,sqrt=Math.sqrt,PI=Math.PI;function toRad(x){return x*PI/180}function hav(x){return function squared(x){return x*x}(sin(x/2))}var haversineDistance_1=function haversineDistance(a,b){var aLat=toRad(Array.isArray(a)?a[1]:a.latitude||a.lat),bLat=toRad(Array.isArray(b)?b[1]:b.latitude||b.lat),aLng=toRad(Array.isArray(a)?a[0]:a.longitude||a.lng||a.lon),bLng=toRad(Array.isArray(b)?b[0]:b.longitude||b.lng||b.lon),ht=hav(bLat-aLat)+cos(aLat)*cos(bLat)*hav(bLng-aLng);return 12756274*asin(sqrt(ht))},DataDrawable=function(_Drawable){_inherits(DataDrawable,_Drawable);var _super=_createSuper(DataDrawable);function DataDrawable(){return _classCallCheck(this,DataDrawable),_super.apply(this,arguments)}return DataDrawable}(Drawable),MapShim=function(){if("undefined"!=typeof Map)return Map;function getIndex(arr,key){var result=-1;return arr.some((function(entry,index){return entry[0]===key&&(result=index,!0)})),result}return function(){function class_1(){this.__entries__=[]}return Object.defineProperty(class_1.prototype,"size",{get:function get(){return this.__entries__.length},enumerable:!0,configurable:!0}),class_1.prototype.get=function(key){var index=getIndex(this.__entries__,key),entry=this.__entries__[index];return entry&&entry[1]},class_1.prototype.set=function(key,value){var index=getIndex(this.__entries__,key);~index?this.__entries__[index][1]=value:this.__entries__.push([key,value])},class_1.prototype.delete=function(key){var entries=this.__entries__,index=getIndex(entries,key);~index&&entries.splice(index,1)},class_1.prototype.has=function(key){return!!~getIndex(this.__entries__,key)},class_1.prototype.clear=function(){this.__entries__.splice(0)},class_1.prototype.forEach=function(callback,ctx){void 0===ctx&&(ctx=null);for(var _i=0,_a=this.__entries__;_i<_a.length;_i++){var entry=_a[_i];callback.call(ctx,entry[1],entry[0])}},class_1}()}(),isBrowser="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,global$1=void 0!==global&&global.Math===Math?global:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),requestAnimationFrame$1="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(global$1):function(callback){return setTimeout((function(){return callback(Date.now())}),1e3/60)};var transitionKeys=["top","right","bottom","left","width","height","size","weight"],mutationObserverSupported="undefined"!=typeof MutationObserver,ResizeObserverController=function(){function ResizeObserverController(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function throttle(callback,delay){var leadingCall=!1,trailingCall=!1,lastCallTime=0;function resolvePending(){leadingCall&&(leadingCall=!1,callback()),trailingCall&&proxy()}function timeoutCallback(){requestAnimationFrame$1(resolvePending)}function proxy(){var timeStamp=Date.now();if(leadingCall){if(timeStamp-lastCallTime<2)return;trailingCall=!0}else leadingCall=!0,trailingCall=!1,setTimeout(timeoutCallback,delay);lastCallTime=timeStamp}return proxy}(this.refresh.bind(this),20)}return ResizeObserverController.prototype.addObserver=function(observer){~this.observers_.indexOf(observer)||this.observers_.push(observer),this.connected_||this.connect_()},ResizeObserverController.prototype.removeObserver=function(observer){var observers=this.observers_,index=observers.indexOf(observer);~index&&observers.splice(index,1),!observers.length&&this.connected_&&this.disconnect_()},ResizeObserverController.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},ResizeObserverController.prototype.updateObservers_=function(){var activeObservers=this.observers_.filter((function(observer){return observer.gatherActive(),observer.hasActive()}));return activeObservers.forEach((function(observer){return observer.broadcastActive()})),activeObservers.length>0},ResizeObserverController.prototype.connect_=function(){isBrowser&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),mutationObserverSupported?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},ResizeObserverController.prototype.disconnect_=function(){isBrowser&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},ResizeObserverController.prototype.onTransitionEnd_=function(_a){var _b=_a.propertyName,propertyName=void 0===_b?"":_b;transitionKeys.some((function(key){return!!~propertyName.indexOf(key)}))&&this.refresh()},ResizeObserverController.getInstance=function(){return this.instance_||(this.instance_=new ResizeObserverController),this.instance_},ResizeObserverController.instance_=null,ResizeObserverController}(),defineConfigurable=function defineConfigurable(target,props){for(var _i=0,_a=Object.keys(props);_i<_a.length;_i++){var key=_a[_i];Object.defineProperty(target,key,{value:props[key],enumerable:!1,writable:!1,configurable:!0})}return target},getWindowOf=function getWindowOf(target){return target&&target.ownerDocument&&target.ownerDocument.defaultView||global$1},emptyRect=createRectInit(0,0,0,0);function toFloat(value){return parseFloat(value)||0}function getBordersSize(styles){for(var positions=[],_i=1;_i<arguments.length;_i++)positions[_i-1]=arguments[_i];return positions.reduce((function(size,position){return size+toFloat(styles["border-"+position+"-width"])}),0)}function getHTMLElementContentRect(target){var clientWidth=target.clientWidth,clientHeight=target.clientHeight;if(!clientWidth&&!clientHeight)return emptyRect;var styles=getWindowOf(target).getComputedStyle(target),paddings=function getPaddings(styles){for(var paddings={},_i=0,positions_1=["top","right","bottom","left"];_i<positions_1.length;_i++){var position=positions_1[_i],value=styles["padding-"+position];paddings[position]=toFloat(value)}return paddings}(styles),horizPad=paddings.left+paddings.right,vertPad=paddings.top+paddings.bottom,width=toFloat(styles.width),height=toFloat(styles.height);if("border-box"===styles.boxSizing&&(Math.round(width+horizPad)!==clientWidth&&(width-=getBordersSize(styles,"left","right")+horizPad),Math.round(height+vertPad)!==clientHeight&&(height-=getBordersSize(styles,"top","bottom")+vertPad)),!function isDocumentElement(target){return target===getWindowOf(target).document.documentElement}(target)){var vertScrollbar=Math.round(width+horizPad)-clientWidth,horizScrollbar=Math.round(height+vertPad)-clientHeight;1!==Math.abs(vertScrollbar)&&(width-=vertScrollbar),1!==Math.abs(horizScrollbar)&&(height-=horizScrollbar)}return createRectInit(paddings.left,paddings.top,width,height)}var isSVGGraphicsElement="undefined"!=typeof SVGGraphicsElement?function(target){return target instanceof getWindowOf(target).SVGGraphicsElement}:function(target){return target instanceof getWindowOf(target).SVGElement&&"function"==typeof target.getBBox};function getContentRect(target){return isBrowser?isSVGGraphicsElement(target)?function getSVGContentRect(target){var bbox=target.getBBox();return createRectInit(0,0,bbox.width,bbox.height)}(target):getHTMLElementContentRect(target):emptyRect}function createRectInit(x,y,width,height){return{x:x,y:y,width:width,height:height}}var ResizeObservation=function(){function ResizeObservation(target){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=createRectInit(0,0,0,0),this.target=target}return ResizeObservation.prototype.isActive=function(){var rect=getContentRect(this.target);return this.contentRect_=rect,rect.width!==this.broadcastWidth||rect.height!==this.broadcastHeight},ResizeObservation.prototype.broadcastRect=function(){var rect=this.contentRect_;return this.broadcastWidth=rect.width,this.broadcastHeight=rect.height,rect},ResizeObservation}(),ResizeObserverEntry=function ResizeObserverEntry(target,rectInit){var contentRect=function createReadOnlyRect(_a){var x=_a.x,y=_a.y,width=_a.width,height=_a.height,Constr="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,rect=Object.create(Constr.prototype);return defineConfigurable(rect,{x:x,y:y,width:width,height:height,top:y,right:x+width,bottom:height+y,left:x}),rect}(rectInit);defineConfigurable(this,{target:target,contentRect:contentRect})},ResizeObserverSPI=function(){function ResizeObserverSPI(callback,controller,callbackCtx){if(this.activeObservations_=[],this.observations_=new MapShim,"function"!=typeof callback)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=callback,this.controller_=controller,this.callbackCtx_=callbackCtx}return ResizeObserverSPI.prototype.observe=function(target){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(target instanceof getWindowOf(target).Element))throw new TypeError('parameter 1 is not of type "Element".');var observations=this.observations_;observations.has(target)||(observations.set(target,new ResizeObservation(target)),this.controller_.addObserver(this),this.controller_.refresh())}},ResizeObserverSPI.prototype.unobserve=function(target){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(target instanceof getWindowOf(target).Element))throw new TypeError('parameter 1 is not of type "Element".');var observations=this.observations_;observations.has(target)&&(observations.delete(target),observations.size||this.controller_.removeObserver(this))}},ResizeObserverSPI.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},ResizeObserverSPI.prototype.gatherActive=function(){var _this=this;this.clearActive(),this.observations_.forEach((function(observation){observation.isActive()&&_this.activeObservations_.push(observation)}))},ResizeObserverSPI.prototype.broadcastActive=function(){if(this.hasActive()){var ctx=this.callbackCtx_,entries=this.activeObservations_.map((function(observation){return new ResizeObserverEntry(observation.target,observation.broadcastRect())}));this.callback_.call(ctx,entries,ctx),this.clearActive()}},ResizeObserverSPI.prototype.clearActive=function(){this.activeObservations_.splice(0)},ResizeObserverSPI.prototype.hasActive=function(){return this.activeObservations_.length>0},ResizeObserverSPI}(),observers="undefined"!=typeof WeakMap?new WeakMap:new MapShim,ResizeObserver=function ResizeObserver(callback){if(!(this instanceof ResizeObserver))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var controller=ResizeObserverController.getInstance(),observer=new ResizeObserverSPI(callback,controller,this);observers.set(this,observer)};["observe","unobserve","disconnect"].forEach((function(method){ResizeObserver.prototype[method]=function(){var _a;return(_a=observers.get(this))[method].apply(_a,arguments)}}));var index=void 0!==global$1.ResizeObserver?global$1.ResizeObserver:ResizeObserver,CalloutManager=function(){function CalloutManager(container){var _this=this;_classCallCheck(this,CalloutManager),_defineProperty(this,"_container",null),_defineProperty(this,"_callouts",{}),_defineProperty(this,"_calloutDefinitions",[]),_defineProperty(this,"_currentlyRemoving",[]),_defineProperty(this,"onAutoRemove",null),_defineProperty(this,"autoRemoveCallouts",!0),_defineProperty(this,"autoRemoveThreshholdSimilarity",.5),_defineProperty(this,"shouldAutoRemoveCallout",null),_defineProperty(this,"autoRemoveThreshholdMargins",{top:0,right:0,left:0,bottom:0}),container&&"DIV"===container.tagName?(this._container=container,this._container.style.pointerEvents="none",this.resizeObserver=new index((function(entries){entries.length&&(_this.bounds=entries[0].contentRect)})),this.resizeObserver.observe(this._container)):console.warn("CalloutManager expects a DIV element as a container."),this._removeCalloutComplete=this._removeCalloutComplete.bind(this)}return _createClass(CalloutManager,[{key:"release",value:function release(){this.resizeObserver.disconnect()}},{key:"addCallout",value:function addCallout(definition){this.replaceCallouts([].concat(_toConsumableArray(this._calloutDefinitions),[definition]))}},{key:"removeCallout",value:function removeCallout(definition){var index=this._calloutDefinitions.findIndex((function(def){return def.id===definition.id}));-1!==index&&this.replaceCallouts([].concat(_toConsumableArray(this._calloutDefinitions.slice(0,index)),_toConsumableArray(this._calloutDefinitions.slice(index+1))))}},{key:"replaceCallouts",value:function replaceCallouts(calloutDefinitions){var _this2=this,addCalloutDefs=calloutDefinitions.filter((function(c){return!_this2._calloutDefinitions.includes(c)})),newlyRemovedCalloutDefs=this._calloutDefinitions.filter((function(c){return!calloutDefinitions.includes(c)})).filter((function(c){return!_this2._currentlyRemoving.includes(c)}));this._currentlyRemoving=[].concat(_toConsumableArray(this._currentlyRemoving),_toConsumableArray(newlyRemovedCalloutDefs)),this._calloutDefinitions=[].concat(_toConsumableArray(this._calloutDefinitions),_toConsumableArray(addCalloutDefs)),addCalloutDefs.map((function(def){var CalloutClass=def.calloutClass;if(CalloutClass)return new CalloutClass(def)})).filter((function(c){return c})).forEach((function(callout){_this2._callouts[callout.definition.id]=callout,_this2._container.appendChild(callout.element),callout.animateIn()})),newlyRemovedCalloutDefs.map((function(def){return _this2._callouts[def.id]})).forEach((function(callout){callout.animateOut(_this2._removeCalloutComplete)}))}},{key:"removeAllCallouts",value:function removeAllCallouts(){this.replaceCallouts([])}},{key:"update",value:function update(time){var _this3=this;if(this.positionProvider){var toAutoRemove=[],positions=this.positionProvider(this._calloutDefinitions);this._calloutDefinitions.forEach((function(def,index){var ref=_this3._callouts[def.id],position=positions[index];if(ref&&(ref.setPosition(position),ref.update(time)),_this3.autoRemoveCallouts){var similarity=_this3.autoRemoveThreshholdSimilarity,margins=_this3.autoRemoveThreshholdMargins;(position.world.similarityToCameraVector<similarity||position.screen.x<margins.left||position.screen.x>_this3.bounds.width-margins.right||position.screen.y<margins.top||position.screen.y>_this3.bounds.height-margins.bottom)&&toAutoRemove.push(def)}})),toAutoRemove.forEach((function(def){_this3.shouldAutoRemoveCallout&&!_this3.shouldAutoRemoveCallout(def)||(_this3.removeCallout(def),_this3.onAutoRemove&&_this3.onAutoRemove(def))}))}}},{key:"_removeCalloutComplete",value:function _removeCalloutComplete(callout){var key=callout.definition.id,index=this._calloutDefinitions.findIndex((function(def){return def.id===key}));-1!==index&&(this._calloutDefinitions=[].concat(_toConsumableArray(this._calloutDefinitions.slice(0,index)),_toConsumableArray(this._calloutDefinitions.slice(index+1))),index=this._currentlyRemoving.findIndex((function(def){return def.id===key})),this._currentlyRemoving=[].concat(_toConsumableArray(this._currentlyRemoving.slice(0,index)),_toConsumableArray(this._currentlyRemoving.slice(index+1))),this._container.removeChild(this._callouts[key].element),this._callouts[key].release(),delete this._callouts[key])}},{key:"drawables",get:function get(){var _this4=this;return this._calloutDefinitions.map((function(def){return _this4._callouts[def.id].drawables}))}}]),CalloutManager}(),GlobeKitView=function(){function GlobeKitView(_canvas,options,onInitCB){var _this=this;_classCallCheck(this,GlobeKitView),_defineProperty(this,"_wasmLoaded",!1),_defineProperty(this,"isInit",!1),_defineProperty(this,"shouldDraw",!1),_defineProperty(this,"isInteractive",!1),_defineProperty(this,"renderer",null),_defineProperty(this,"scene",null),_defineProperty(this,"_alt",4),_defineProperty(this,"tartgetDrawable",null),_defineProperty(this,"calloutManager",null),_defineProperty(this,"interactionController",null),_defineProperty(this,"boundingRect",null),_defineProperty(this,"_onWasmLoad",[]),_defineProperty(this,"drawqueue",[]),_defineProperty(this,"loadWasm",(function(wasmPath){init(void 0===wasmPath?"./gkweb_bg.wasm":wasmPath).then((function(){_this._wasmLoaded=!0,function init_gkweb(){wasm.init_gkweb()}(),_this._onWasmLoad.forEach((function(el){el()})),_this._onInitCB()}))})),_defineProperty(this,"init",(function(canvas){_this.renderer=new Renderer(canvas,_this.gkOptions.attributes),_this.renderer.init(),_this.gkOptions.clearColor&&(_this.renderer.clearColor=_this.gkOptions.clearColor),_this.scene=new Scene(canvas.width,canvas.height),_this.interactionController=new InteractionController(canvas,_this.scene.camera),_this.interactionController.onTapCB=_this.onTapCB,window.onresize=_this.onResizeCB,window.onscroll=_this.onResizeCB,_this.isInit=!0})),_defineProperty(this,"release",(function(){_this.stopDrawing(),_this.calloutManager&&_this.calloutManager.release(),_this.interactionController&&_this.interactionController.release()})),_defineProperty(this,"_onInitCB",(function(){_this.onInitCB(_this),_this.renderloop(0)})),_defineProperty(this,"onResizeCB",(function(){_this.boundingRect=_this.renderer.gl.canvas.getBoundingClientRect(),resizeCanvasToDisplaySize(_this.renderer.gl.canvas),_this.scene.resize(_this.boundingRect.width,_this.boundingRect.height),_this.renderer.resize(_this.boundingRect.width,_this.boundingRect.height),_this.interactionController.resize()})),_defineProperty(this,"setCameratargetDrawable",(function(targetDrawable){_this.interactionController.hitTarget=targetDrawable.hitTest})),_defineProperty(this,"setAbsMovementModelTo",(function(lat,lon,alt){_this.interactionController.movementModel.rotCurrent[0]=lat*(-Math.PI/180),_this.interactionController.movementModel.rotCurrent[1]=lon*(Math.PI/180),_this.interactionController.movementModel.rotTarget[0]=lat*(-Math.PI/180),_this.interactionController.movementModel.rotTarget[1]=lon*(Math.PI/180),void 0!==alt&&(_this._alt=alt)})),_defineProperty(this,"animateToLatLon",(function(lat,lon,duration){_this.interactionController.movementModel.interacting=!0,_this.interactionController.movementModel.setAmbientAnimated(!1,100),_this.currentTween&&_this.currentTween.stop();for(var startLat=_this.interactionController.movementModel.rotTarget[0]/(-Math.PI/180),startLon=_this.interactionController.movementModel.rotTarget[1]/(Math.PI/180);startLon<-180;)startLon+=360;for(;startLon>180;)startLon-=360;var distance=haversineDistance_1({lat:startLat,lon:startLon},{lat:lat,lon:lon}),baseDuration=Math.max(Math.round(distance/1e4),350),endLon=lon,latDelta=lat-startLat,lonDelta=endLon-startLon,lonDelta0=endLon+360-startLon,lonDelta1=endLon-360-startLon;Math.abs(lonDelta0)<Math.abs(lonDelta)&&(endLon=lon+360,lonDelta=lonDelta0),Math.abs(lonDelta1)<Math.abs(lonDelta)&&(endLon=lon-360,lonDelta=lonDelta1);var d=duration||baseDuration,deltaDuration=Math.min(Math.max(d-350,0),1)/100,ease=CubicBezier.create(.315,.015,1-(.55+(.85-.55)*deltaDuration),1);_this.currentTween=new Tween(0,1,d,{onUpdate:function onUpdate(value){for(var v=ease(value),lonV=startLon+lonDelta*v,latV=startLat+latDelta*v;lonV<-180;)lonV+=360;for(;lonV>180;)lonV-=360;_this.setAbsMovementModelTo(latV,lonV)},onComplete:function onComplete(didFinish){didFinish&&(_this.currentTween=null)}})})),_defineProperty(this,"setMovementModelTo",(function(lat,lon,alt){_this.interactionController.movementModel.rotTarget[0]=lat*(-Math.PI/180),_this.interactionController.movementModel.rotTarget[1]=lon*(Math.PI/180),void 0!==alt&&(_this._alt=alt)})),_defineProperty(this,"moveCameraTo",(function(lat,lon,alt){var pos=GKUtils.worldFromLatLon(lat,lon,alt);_this.scene.camera.setPosition(pos)})),_defineProperty(this,"addDrawable",(function(drawable,cb){return drawable instanceof Drawable&&(drawable instanceof Globe&&null===_this.tartgetDrawable&&(_this.tartgetDrawable=drawable,_this.interactionController.target=drawable),drawable.init(_this.renderer.gl,cb),_this.drawqueue.push(drawable),_this._wasmLoaded?drawable.createCollisionGeo():_this._onWasmLoad.push(drawable.createCollisionGeo),!0)})),_defineProperty(this,"startDrawing",(function(){_this.shouldDraw=!0,_this.renderloop(0)})),_defineProperty(this,"stopDrawing",(function(){_this.shouldDraw=!1})),_defineProperty(this,"renderloop",(function(time){var scaledTime=time/1e4;if(_this.shouldDraw){_this.interactionController.update();var lat=-_this.interactionController.movementModel.camPitch*(180/Math.PI),lon=_this.interactionController.movementModel.camYaw*(180/Math.PI);_this.updateCameraFunction(scaledTime),_this.moveCameraTo(lat,lon,_this._alt),_this.renderer.prepareRenderFrame(),_this.scene.update(scaledTime);var sceneProps=_this.scene.getUniforms(scaledTime);_this.drawqueue.forEach((function(el){el.update(_this.renderer.gl,sceneProps,scaledTime)})),_this.calloutManager&&_this.calloutManager.update(scaledTime),_this.onUpdate&&_this.onUpdate(),_this.drawqueue.forEach((function(el){el.draw(_this.renderer.gl)})),requestAnimationFrame(_this.renderloop)}})),_defineProperty(this,"onTapCB",(function(x,y){var xNormalized=x/_this.boundingRect.width,yNormalized=(_this.boundingRect.height-y)/_this.boundingRect.height,ray=_this.scene.camera.getRayFromScreen(xNormalized,yNormalized),coords=_this.targetLatLon(ray);_this.onTap&&_this.onTap({x:x,y:y},coords);var collisionList={drawables:[]};coords&&(collisionList.lat=coords.lat,collisionList.lon=coords.lon),_this.drawqueue.forEach((function(el){if(el.isInteractive&&el.isSelectable){var drawableEvent={};drawableEvent.obj=el;var collision=el.rayCastFrom(ray);collision&&el.isSelectable&&(drawableEvent.selection=el.onSelection(coords.lat,coords.lon,collision)),collisionList.drawables.push(drawableEvent)}})),_this.userDefinedSelection(collisionList)})),_defineProperty(this,"targetLatLon",(function(ray){var coords,collision=_this.tartgetDrawable.rayCastFrom(ray);return!1!==collision&&(coords=GKUtils.latLonFromWorld(collision.point)),coords})),_defineProperty(this,"onMouseMoveCB",(function(x,y){var xNormalized=x/_this.boundingRect.width,yNormalized=(_this.boundingRect.height-y)/_this.boundingRect.height,ray=_this.scene.camera.getRayFromScreen(xNormalized,yNormalized);_this.drawqueue.forEach((function(el){if(el.isInteractive&&el.isHoverable){var collision=el.rayCastFrom(ray);collision&&el.isHoverable&&el.onHover(collision)}}))})),_defineProperty(this,"updateCameraFunction",(function(time){})),_defineProperty(this,"moveCameraToLatLon",(function(lat,lon,alt){})),_defineProperty(this,"getPosition",(function(lat,lon,alt){alt||(alt=0);var worldCoord=GKUtils.worldFromLatLon(lat,lon,alt),screenCoord=_this.scene.camera.project(worldCoord);screenCoord[0]*=_this.boundingRect.width,screenCoord[1]*=_this.boundingRect.height,screenCoord[1]=_this.boundingRect.height-screenCoord[1];var sceneCenterScreenCoord=_this.scene.camera.project(_this.scene.camera.target);sceneCenterScreenCoord[0]*=_this.boundingRect.width,sceneCenterScreenCoord[1]*=_this.boundingRect.height,sceneCenterScreenCoord[1]=_this.boundingRect.height-sceneCenterScreenCoord[1];var diff=[];diff.push(screenCoord[0]-sceneCenterScreenCoord[0]),diff.push(screenCoord[1]-sceneCenterScreenCoord[1]);var nWorldCoord=create$3();normalize$1(nWorldCoord,worldCoord);var cameraPos=_this.scene.camera.eye,nCameraPos=create$3();normalize$1(nCameraPos,cameraPos);var similarity=dot(nWorldCoord,nCameraPos);return{screen:{x:screenCoord[0],y:screenCoord[1]},world:{x:diff[0],y:diff[1],similarityToCameraVector:similarity}}})),_defineProperty(this,"registerCalloutManager",(function(calloutManager){!calloutManager||!calloutManager instanceof CalloutManager?console.warn("registerCalloutManager must be passed an instance of CalloutManager"):(calloutManager.positionProvider=function(callouts){return callouts.map((function(c){return _this.getPosition(c.latitude,c.longitude,c.altitude)}))},_this.calloutManager=calloutManager)})),_defineProperty(this,"computeGlobeSize",(function(){var vFOV=_this.scene.camera.fov,dist=function distance(a,b){var x=b[0]-a[0],y=b[1]-a[1],z=b[2]-a[2];return Math.hypot(x,y,z)}(_this.scene.camera.eye,_this.tartgetDrawable.translation),height=2*Math.asin(1/dist)/vFOV*_this.boundingRect.height;console.log(dist,height,_this.boundingRect.height)})),_defineProperty(this,"setGlobeSize",(function(size){var vFOV=_this.scene.camera.fov,dist=1*Math.sin(size/_this.boundingRect.height*vFOV/2);console.log(dist)})),_defineProperty(this,"setAmbient",(function(bool){_this.interactionController.movementModel.hasAmbient=bool})),this.gkOptions=void 0===options?{}:options,onInitCB&&(this.onInitCB=onInitCB),this.boundingRect=_canvas.getBoundingClientRect(),this.init(_canvas),this.loadWasm(this.gkOptions.wasmPath)}return _createClass(GlobeKitView,[{key:"isWebGL1",get:function get(){return!!this.gl&&isWebGL1(this.gl)}},{key:"isWebGL2",get:function get(){return!!this.gl&&isWebGL2(this.gl)}}]),GlobeKitView}(),kdTreeMin=createCommonjsModule((function(module,exports){!function(t){function n(t,n,o){this.obj=t,this.left=null,this.right=null,this.parent=o,this.dimension=n}function o(t){this.content=[],this.scoreFunction=t}o.prototype={push:function push(t){this.content.push(t),this.bubbleUp(this.content.length-1)},pop:function pop(){var t=this.content[0],n=this.content.pop();return this.content.length>0&&(this.content[0]=n,this.sinkDown(0)),t},peek:function peek(){return this.content[0]},remove:function remove(t){for(var n=this.content.length,o=0;o<n;o++)if(this.content[o]==t){var i=this.content.pop();return void(o!=n-1&&(this.content[o]=i,this.scoreFunction(i)<this.scoreFunction(t)?this.bubbleUp(o):this.sinkDown(o)))}throw new Error("Node not found.")},size:function size(){return this.content.length},bubbleUp:function bubbleUp(t){for(var n=this.content[t];t>0;){var o=Math.floor((t+1)/2)-1,i=this.content[o];if(!(this.scoreFunction(n)<this.scoreFunction(i)))break;this.content[o]=n,this.content[t]=i,t=o}},sinkDown:function sinkDown(t){for(var n=this.content.length,o=this.content[t],i=this.scoreFunction(o);;){var e=2*(t+1),r=e-1,l=null;if(r<n){var u=this.content[r],h=this.scoreFunction(u);h<i&&(l=r)}if(e<n){var s=this.content[e];this.scoreFunction(s)<(null==l?i:h)&&(l=e)}if(null==l)break;this.content[t]=this.content[l],this.content[l]=o,t=l}}},t.kdTree=function(t,i,e){var l=this;Array.isArray(t)?this.root=function r(t,o,i){var l,u,h=o%e.length;return 0===t.length?null:1===t.length?new n(t[0],h,i):(t.sort((function(t,n){return t[e[h]]-n[e[h]]})),(u=new n(t[l=Math.floor(t.length/2)],h,i)).left=r(t.slice(0,l),o+1,u),u.right=r(t.slice(l+1),o+1,u),u)}(t,0,null):function(t){l.root=t,function n(t){t.left&&(t.left.parent=t,n(t.left)),t.right&&(t.right.parent=t,n(t.right))}(l.root)}(t),this.toJSON=function(t){t||(t=this.root);var o=new n(t.obj,t.dimension,null);return t.left&&(o.left=l.toJSON(t.left)),t.right&&(o.right=l.toJSON(t.right)),o},this.insert=function(t){var i,r,l=function o(n,i){if(null===n)return i;var r=e[n.dimension];return t[r]<n.obj[r]?o(n.left,n):o(n.right,n)}(this.root,null);null!==l?(i=new n(t,(l.dimension+1)%e.length,l),r=e[l.dimension],t[r]<l.obj[r]?l.left=i:l.right=i):this.root=new n(t,0,null)},this.remove=function(t){var i;null!==(i=function n(o){if(null===o)return null;if(o.obj===t)return o;var i=e[o.dimension];return t[i]<o.obj[i]?n(o.left):n(o.right)}(l.root))&&function o(t){function n(t,o){var i,r,l,u,h;return null===t?null:(i=e[o],t.dimension===o?null!==t.left?n(t.left,o):t:(r=t.obj[i],l=n(t.left,o),u=n(t.right,o),h=t,null!==l&&l.obj[i]<r&&(h=l),null!==u&&u.obj[i]<h.obj[i]&&(h=u),h))}var i,r,u;if(null===t.left&&null===t.right)return null===t.parent?void(l.root=null):(u=e[t.parent.dimension],void(t.obj[u]<t.parent.obj[u]?t.parent.left=null:t.parent.right=null));null!==t.right?(r=(i=n(t.right,t.dimension)).obj,o(i),t.obj=r):(r=(i=n(t.left,t.dimension)).obj,o(i),t.right=t.left,t.left=null,t.obj=r)}(i)},this.nearest=function(t,n,r){var h,s,f;if(f=new o((function(t){return-t[1]})),r)for(h=0;h<n;h+=1)f.push([null,r]);for(l.root&&function u(o){function r(t,o){f.push([t,o]),f.size()>n&&f.pop()}var l,h,s,c,a=e[o.dimension],g=i(t,o.obj),p={};for(c=0;c<e.length;c+=1)c===o.dimension?p[e[c]]=t[e[c]]:p[e[c]]=o.obj[e[c]];h=i(p,o.obj),null!==o.right||null!==o.left?(u(l=null===o.right?o.left:null===o.left?o.right:t[a]<o.obj[a]?o.left:o.right),(f.size()<n||g<f.peek()[1])&&r(o,g),(f.size()<n||Math.abs(h)<f.peek()[1])&&null!==(s=l===o.left?o.right:o.left)&&u(s)):(f.size()<n||g<f.peek()[1])&&r(o,g)}(l.root),s=[],h=0;h<Math.min(n,f.content.length);h+=1)f.content[h][0]&&s.push([f.content[h][0].obj,f.content[h][1]]);return s},this.balanceFactor=function(){return function t(n){return null===n?0:Math.max(t(n.left),t(n.right))+1}(l.root)/(Math.log(function n(t){return null===t?0:n(t.left)+n(t.right)+1}(l.root))/Math.log(2))}},t.BinaryHeap=o}(exports)})),DataStore=function(){function DataStore(){var _this=this;_classCallCheck(this,DataStore),_defineProperty(this,"data",[]),_defineProperty(this,"types",[]),_defineProperty(this,"lastElementId",void 0),_defineProperty(this,"kdtree",null),_defineProperty(this,"addGeojson",(function(data){"FeatureCollection"===data.type&&data.features instanceof Array&&(data.features.forEach((function(element,index){var datapoint={id:"_".concat(Math.random().toString(36).substr(2,9)),lat:element.geometry.coordinates[1],lon:element.geometry.coordinates[0],properties:element.properties};_this.data.push(datapoint),_this.lastElementId=index})),_this.kdtree=new kdTreeMin.kdTree(_this.data,GKUtils.distanceBetweenPoints,["lat","lon"]))})),_defineProperty(this,"addGeojsonPoint",(function(geojsonPoint){var lat=geojsonPoint.geometry.coordinates[1],lon=geojsonPoint.geometry.coordinates[0],props=geojsonPoint.properties;return _this.addPoint(lat,lon,props)})),_defineProperty(this,"addPoint",(function(lat,lon,data){var datapoint={id:"_".concat(Math.random().toString(36).substr(2,9)),lat:lat,lon:lon,properties:data};return _this.data.push(datapoint),_this.lastElementId=datapoint.id,datapoint})),_defineProperty(this,"updateDataset",(function(newData){newData.features.forEach((function(dataPoint){var currentData=_this.data.find((function(el){var lat=el.lat===dataPoint.geometry.coordinates[1],lon=el.lon===dataPoint.geometry.coordinates[0];return lat&&lon}));void 0===currentData?_this.addGeojsonPoint(dataPoint):currentData.properties=dataPoint.properties}))})),_defineProperty(this,"deleteDataset",(function(){_this.data=[]})),_defineProperty(this,"getNearest",(function(lat,lon,maxDistance,maxCount){var nearest=_this.kdtree.nearest({lat:lat,lon:lon},maxCount,maxDistance).sort((function(a,b){return a[1]-b[1]}));if(void 0!==nearest[0])return nearest})),_defineProperty(this,"getElementFromId",(function(id){return _this.data.find((function(element){return element.id===id}))})),_defineProperty(this,"getElementFromKey",(function(key,value){return _this.data.find((function(element){return element.properties[key]===value}))})),_defineProperty(this,"getTypeList",(function(){var types=[];return types.push([_this.data[0]]),_this.data.forEach((function(el){var elProps=Object.keys(el.properties),foundType=!1;types.forEach((function(type){var typeProps=Object.keys(type[0].properties),elInType=GKUtils.isSubSet(elProps,typeProps),typeInEl=GKUtils.isSubSet(typeProps,elProps);elInType&&typeInEl&&(type.push(el),foundType=!0)})),!1===foundType&&types.push([el])})),types})),_defineProperty(this,"getMaxForKey",(function(key){var id,max=-1/0;if("number"==typeof _this.data[0].properties[key])return _this.data.forEach((function(el){var value=el.properties[key];value>=max&&(max=value,id=el.id)})),{max:max,id:id};console.warn("Cannot compare non-numbers")})),_defineProperty(this,"getMinForKey",(function(key){var id,min=1/0;if("number"==typeof _this.data[0].properties[key])return _this.data.forEach((function(el){var value=el.properties[key];value<=min&&(min=value,id=el.id)})),{min:min,id:id};console.warn("Cannot compare non-numbers")})),_defineProperty(this,"getRangeForKey",(function(key){return{min:_this.getMinForKey(key),max:_this.getMaxForKey(key)}})),_defineProperty(this,"mapKeyToRange",(function(key,min,max){var ranges=_this.getRangeForKey(key);return _this.data.map((function(el){var n=(el.properties[key]-ranges.min.min)/(ranges.max.max-ranges.min.min)*(max-min)+min;return{id:el.properties.region_id,value:n}}))}))}return _createClass(DataStore,[{key:"isHomogeneous",get:function get(){return 1===this.getTypeList().length}}]),DataStore}();function createURL(base64,sourcemapArg,enableUnicodeArg){var sourcemap=void 0===sourcemapArg?null:sourcemapArg,source=function decodeBase64(base64,enableUnicode){var binaryString=atob(base64);if(enableUnicode){for(var binaryView=new Uint8Array(binaryString.length),i=0,n=binaryString.length;i<n;++i)binaryView[i]=binaryString.charCodeAt(i);return String.fromCharCode.apply(null,new Uint16Array(binaryView.buffer))}return binaryString}(base64,void 0!==enableUnicodeArg&&enableUnicodeArg),start=source.indexOf("\n",10)+1,body=source.substring(start)+(sourcemap?"//# sourceMappingURL="+sourcemap:""),blob=new Blob([body],{type:"application/javascript"});return URL.createObjectURL(blob)}var WorkerFactory=function createBase64WorkerFactory(base64,sourcemapArg,enableUnicodeArg){var url;return function WorkerFactory(options){return url=url||createURL(base64,sourcemapArg,enableUnicodeArg),new Worker(url,options)}}("","data:application/json;charset=utf-8;base64,",!1),DataGeometryFactory=function DataGeometryFactory(){var _this=this;_classCallCheck(this,DataGeometryFactory),_defineProperty(this,"blobURL",void 0),_defineProperty(this,"transform",void 0),_defineProperty(this,"type",void 0),_defineProperty(this,"worker",void 0),_defineProperty(this,"isRunning",!1),_defineProperty(this,"createGeometry",(function(type,data,transform,cb){_this.isRunning=!0,_this.worker=new WorkerFactory,_this.worker.onmessage=function(e){void 0!==cb&&cb(e.data),_this.isRunning=!1};var blob=new Blob([transform.toString()]);_this.blobURL=window.URL.createObjectURL(blob),_this.worker.postMessage({data:data,transform:_this.blobURL,type:type})})),_defineProperty(this,"cleanup",(function(){_this.worker.terminate(),_this.worker=void 0}))},shaders$2={vertex:"#define GLSLIFY 1\nattribute vec4 position;attribute vec4 color;attribute float size;uniform mat4 u_worldViewProjection;uniform mat4 u_viewInverse;uniform mat4 u_model;uniform vec3 u_cameraPos;varying vec4 v_color;varying float v_alpha;void main(){vec4 pos=u_worldViewProjection*u_model*position;gl_PointSize=size;gl_Position=pos;v_color=color;v_alpha=dot(position.xyz,normalize(u_cameraPos));}",fragment:"precision mediump float;\n#define GLSLIFY 1\nvarying vec4 v_color;void main(){gl_FragColor=v_color;}"},uniforms$2={},transform=function transform(element,point){return console.log("transform",point),point.alt=.05,point.size=0,point.color=GKUtils.hexToRGBA("#ff0000",1),point},Points=function(_DataDrawable){_inherits(Points,_DataDrawable);var _super=_createSuper(Points);function Points(params){var _thisSuper,_this;return _classCallCheck(this,Points),_defineProperty(_assertThisInitialized(_this=_super.call(this,params)),"datastore",void 0),_defineProperty(_assertThisInitialized(_this),"maxSelectionDistance",300),_defineProperty(_assertThisInitialized(_this),"maxSelectionCount",1),_defineProperty(_assertThisInitialized(_this),"maxDataPoints",10),_defineProperty(_assertThisInitialized(_this),"dataPointCount",0),_defineProperty(_assertThisInitialized(_this),"geoFactory",void 0),_defineProperty(_assertThisInitialized(_this),"_resourceLoaded",!1),_defineProperty(_assertThisInitialized(_this),"_isDirty",!0),_defineProperty(_assertThisInitialized(_this),"_hasGeometry",!1),_defineProperty(_assertThisInitialized(_this),"createEmptyVertices",(function(){_this.geometry.vertices.position={numComponents:3,data:new Array(3*_this.maxDataPoints).fill(0)},_this.geometry.vertices.color={numComponents:4,data:new Array(4*_this.maxDataPoints).fill(0)},_this.geometry.vertices.size={numComponents:1,data:new Array(1*_this.maxDataPoints).fill(0)},_this.geometry.vertices.indices={numComponents:1,data:Array.from(Array(1*_this.maxDataPoints).keys())}})),_defineProperty(_assertThisInitialized(_this),"extendVerticesBy",(function(size){var _this$geometry$vertic,_this$geometry$vertic2,_this$geometry$vertic3;(_this$geometry$vertic=_this.geometry.vertices.position.data).push.apply(_this$geometry$vertic,_toConsumableArray(Array(3*size).fill(0))),(_this$geometry$vertic2=_this.geometry.vertices.color.data).push.apply(_this$geometry$vertic2,_toConsumableArray(Array(4*size).fill(0))),(_this$geometry$vertic3=_this.geometry.vertices.size.data).push.apply(_this$geometry$vertic3,_toConsumableArray(Array(1*size).fill(0)));var indicesLen=_this.geometry.vertices.indices.data.length;_this.geometry.vertices.indices.data=Array.from(Array(1*(indicesLen+size)).keys()),_this.geometry.needsResize=!0,_this.maxDataPoints+=size})),_defineProperty(_assertThisInitialized(_this),"init",(function(gl){_this.geometry.init(gl),_this._hasGeometry=!0,_this.material.init(gl),_this.material.texturesLoaded=!0})),_defineProperty(_assertThisInitialized(_this),"createCollisionGeo",(function(){})),_defineProperty(_assertThisInitialized(_this),"update",(function(gl,sceneProps,time){_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(Points.prototype)),"update",_thisSuper).call(_thisSuper,sceneProps,time),_this.material.uniforms.u_model=_this.modelMatrix,_this.geometry.needsResize&&_this.geometry.reloadBuffers(gl),_this.geometry.isDirty&&_this.geometry.updateBuffers(gl)})),_defineProperty(_assertThisInitialized(_this),"draw",(function(gl){(_this.isReady||_this._hasGeometry)&&0!==!_this.dataPointCount&&(gl.useProgram(_this.material.programInfo.program),setBuffersAndAttributes(gl,_this.material.programInfo,_this.geometry.bufferInfo),setUniforms(_this.material.programInfo,_this.material.uniforms),gl.drawElements(gl.POINTS,_this.dataPointCount,gl.UNSIGNED_SHORT,0))})),_defineProperty(_assertThisInitialized(_this),"rayCastFrom",(function(ray){return!0})),_defineProperty(_assertThisInitialized(_this),"hitTest",(function(ray){return!0})),_defineProperty(_assertThisInitialized(_this),"onSelectionCB",(function(selection){return selection})),_defineProperty(_assertThisInitialized(_this),"onSelection",(function(lat,lon,collision){var selection=_this.getNearest(lat,lon);return selection=_this.onSelectionCB(selection)})),_defineProperty(_assertThisInitialized(_this),"addGeojson",(function(geojson,cb){"string"!=typeof geojson?(_this.datastore.addGeojson(geojson),_this.geoFactory.createGeometry("point",_this.datastore.data,_this.applyTransform||transform,(function(geometry){_this.geometry.updateGeometry(geometry,_this.dataPointCount),_this.dataPointCount+=geojson.features.length,void 0!==cb&&cb()}))):console.warn("This function needs a geojson object at this time")})),_defineProperty(_assertThisInitialized(_this),"addGeoJsonPoint",(function(geojsonPoint){var lat=geojsonPoint.geometry.coordinates[1],lon=geojsonPoint.geometry.coordinates[0],props=geojsonPoint.properties;_this.addDataPoint(lat,lon,props)})),_defineProperty(_assertThisInitialized(_this),"addDataPoint",(function(lat,lon,data){_this.dataPointCount+1>=_this.maxDataPoints&&(console.warn("More than "+_this.maxDataPoints+" datapoints have been added, Increasing buffer size by: "+_this.maxDataPoints),_this.extendVerticesBy(_this.maxDataPoints));var newData=[];newData.push(_this.datastore.addPoint(lat,lon,data)),_this.geoFactory.createGeometry("point",newData,_this.applyTransform||transform,(function(geometry){_this.geometry.updateGeometry(geometry,_this.ver),_this.dataPointCount+=1,console.log("verify",_this.datastore.getTypeList(),_this.datastore.isHomogeneous)}))})),_defineProperty(_assertThisInitialized(_this),"getNearest",(function(lat,lon){return _this.datastore.getNearest(lat,lon,_this.maxSelectionDistance,_this.maxSelectionCount)})),params&&(params.maxSelectionCount&&(_this.maxSelectionCount=params.maxSelectionCount),params.maxSelectionDistance&&(_this.maxSelectionDistance=params.maxSelectionDistance),params.maxDataPoints&&(_this.maxDataPoints=params.maxDataPoints)),_this.material=new ShaderMaterial(shaders$2),_this.datastore=new DataStore,_this.material.uniforms=uniforms$2,_this.geoFactory=new DataGeometryFactory,_this.geometry=new Geometry,_this.createEmptyVertices(),_this}return Points}(DataDrawable),shaders$3={vertex:"#define GLSLIFY 1\nattribute vec4 position;uniform mat4 u_worldViewProjection;uniform mat4 u_viewInverse;uniform mat4 u_model;uniform vec3 u_cameraPos;varying vec4 v_color;void main(){vec4 pos=u_worldViewProjection*u_model*position;gl_PointSize=4.0;gl_Position=pos;v_color=vec4(1.0,0.0,0.0,1.0);}",fragment:"precision mediump float;\n#define GLSLIFY 1\nvarying vec4 v_color;void main(){gl_FragColor=v_color;}"},uniforms$3={},transform$1=function transform(element,arc){return console.log("arc-transform",element,arc),arc},Arcs=function(_DataDrawable){_inherits(Arcs,_DataDrawable);var _super=_createSuper(Arcs);function Arcs(params){var _thisSuper,_this;return _classCallCheck(this,Arcs),_defineProperty(_assertThisInitialized(_this=_super.call(this,params)),"datastore",void 0),_defineProperty(_assertThisInitialized(_this),"maxSelectionDistance",300),_defineProperty(_assertThisInitialized(_this),"maxSelectionCount",1),_defineProperty(_assertThisInitialized(_this),"maxDataPoints",1e4),_defineProperty(_assertThisInitialized(_this),"dataPointCount",void 0),_defineProperty(_assertThisInitialized(_this),"arcCount",0),_defineProperty(_assertThisInitialized(_this),"geoFactory",void 0),_defineProperty(_assertThisInitialized(_this),"_resourceLoaded",!1),_defineProperty(_assertThisInitialized(_this),"_isDirty",!0),_defineProperty(_assertThisInitialized(_this),"_hasGeometry",!1),_defineProperty(_assertThisInitialized(_this),"createEmptyVertices",(function(){_this.geometry.vertices.position={numComponents:3,data:new Array(3*_this.maxDataPoints).fill(0)},_this.geometry.vertices.indices={numComponents:1,data:Array.from(Array(1*_this.maxDataPoints).keys())}})),_defineProperty(_assertThisInitialized(_this),"extendVerticesBy",(function(size){var _this$geometry$vertic;(_this$geometry$vertic=_this.geometry.vertices.position.data).push.apply(_this$geometry$vertic,_toConsumableArray(Array(3*size).fill(0)));var indicesLen=_this.geometry.vertices.indices.data.length;_this.geometry.vertices.indices.data=Array.from(Array(1*(indicesLen+size)).keys()),_this.geometry.needsResize=!0,_this.maxDataPoints+=size})),_defineProperty(_assertThisInitialized(_this),"init",(function(gl){_this.geometry.init(gl),_this._hasGeometry=!0,_this.material.init(gl),_this.material.texturesLoaded=!0})),_defineProperty(_assertThisInitialized(_this),"createCollisionGeo",(function(){})),_defineProperty(_assertThisInitialized(_this),"update",(function(gl,sceneProps,time){_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(Arcs.prototype)),"update",_thisSuper).call(_thisSuper,sceneProps,time),_this.material.uniforms.u_model=_this.modelMatrix,_this.geometry.needsResize&&_this.geometry.reloadBuffers(gl),_this.geometry.isDirty&&_this.geometry.updateBuffers(gl)})),_defineProperty(_assertThisInitialized(_this),"draw",(function(gl){(_this.isReady||_this._hasGeometry)&&0!==_this.arcCount&&(gl.useProgram(_this.material.programInfo.program),setBuffersAndAttributes(gl,_this.material.programInfo,_this.geometry.bufferInfo),setUniforms(_this.material.programInfo,_this.material.uniforms),gl.drawElements(gl.POINTS,100*_this.arcCount*3,gl.UNSIGNED_SHORT,0))})),_defineProperty(_assertThisInitialized(_this),"rayCastFrom",(function(ray){return!0})),_defineProperty(_assertThisInitialized(_this),"hitTest",(function(ray){return!0})),_defineProperty(_assertThisInitialized(_this),"onSelectionCB",(function(selection){return selection})),_defineProperty(_assertThisInitialized(_this),"onSelection",(function(lat,lon,collision){var selection=_this.getNearest(lat,lon);return selection=_this.onSelectionCB(selection)})),_defineProperty(_assertThisInitialized(_this),"createArcAt",(function(p0,p1){var data={from:p0,to:p1};console.log("hello",data,_this.arcCount+1),_this.geoFactory.createGeometry("arc",[data],transform$1,(function(geometry){_this.geometry.updateGeometry(geometry,300*_this.arcCount),console.log(_this.arcCount,_this.geometry),_this.arcCount+=1,_this.dataPointCount+=1}))})),_defineProperty(_assertThisInitialized(_this),"addGeojson",(function(geojson,cb){"string"!=typeof geojson?(_this.datastore.addGeojson(geojson),_this.geoFactory.createGeometry("arc",_this.datastore.data,transform$1,(function(geometry){_this.geometry.updateGeometry(geometry,_this.dataPointCount),_this.dataPointCount+=geojson.features.length,void 0!==cb&&cb()}))):console.warn("This function needs a geojson object at this time")})),_defineProperty(_assertThisInitialized(_this),"addDataPoint",(function(dataPoint){_this.dataPointCount+1>=_this.maxDataPoints&&(console.warn("More than ".concat(_this.maxDataPoints," datapoints have been added, Increasing buffer size by: ").concat(_this.maxDataPoints)),_this.extendVerticesBy(_this.maxDataPoints));var newData=[];newData.push(_this.datastore.addGeojsonPoint(dataPoint)),_this.geoFactory.createGeometry("arc",newData,transform$1,(function(geometry){_this.geometry.updateGeometry(geometry,_this.ver),_this.dataPointCount+=1,console.log("verify",_this.datastore.getTypeList(),_this.datastore.isHomogeneous)}))})),_defineProperty(_assertThisInitialized(_this),"getNearest",(function(lat,lon){return _this.datastore.getNearest(lat,lon,_this.maxSelectionDistance,_this.maxSelectionCount)})),params&&(params.maxSelectionCount&&(_this.maxSelectionCount=params.maxSelectionCount),params.maxSelectionDistance&&(_this.maxSelectionDistance=params.maxSelectionDistance),params.maxDataPoints&&(_this.maxDataPoints=params.maxDataPoints)),_this.material=new ShaderMaterial(shaders$3),_this.datastore=new DataStore,_this.material.uniforms=uniforms$3,_this.geoFactory=new DataGeometryFactory,_this.geometry=new Geometry,_this.createEmptyVertices(),_this}return Arcs}(DataDrawable),shaders$4={vertex:"#define GLSLIFY 1\nattribute vec4 position;attribute vec3 normal;attribute vec2 texcoord;uniform mat4 u_worldViewProjection;uniform mat4 u_viewInverse;uniform mat4 u_model;uniform vec3 u_cameraPos;varying vec2 vTexture;varying float vAlpha;void main(){vec4 pos=u_worldViewProjection*u_model*position;gl_PointSize=10.0;vec3 transformedNormal=(u_worldViewProjection*u_model*vec4(normal,1.0)).xyz;vec4 transformedCamera=vec4(0.0,0.0,-1.0,1.0)*u_worldViewProjection;vAlpha=pow((1.0+(dot(normal,normalize(transformedCamera.xyz))))/2.0,0.35);vTexture=texcoord.xy;gl_Position=pos+0.00000000000000001*normal.x*texcoord.x;}",fragment:"precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_surface;varying vec2 vTexture;varying float vAlpha;void main(){vec4 surfaceColor=texture2D(u_surface,vec2(vTexture.x,1.0-vTexture.y));vec3 color=surfaceColor.rgb*vAlpha;gl_FragColor=vec4(color,1.0);}"},uniforms$4={u_lightWorldPos:[1,3,-8],u_lightColor:[1,.8,.8,1],u_ambient:[1,1,1,1],u_specular:[1,1,1,1],u_shininess:100,u_specularFactor:.1},Lowpoly=function(_Globe){_inherits(Lowpoly,_Globe);var _super=_createSuper(Lowpoly);function Lowpoly(textureSrc,geometryBin){var _thisSuper,_this;_classCallCheck(this,Lowpoly),_defineProperty(_assertThisInitialized(_this=_super.call(this)),"material",null),_defineProperty(_assertThisInitialized(_this),"lookup",null),_defineProperty(_assertThisInitialized(_this),"currentSelection",-1),_defineProperty(_assertThisInitialized(_this),"previousSelection",-1),_defineProperty(_assertThisInitialized(_this),"inAnimation",null),_defineProperty(_assertThisInitialized(_this),"outAnimation",null),_defineProperty(_assertThisInitialized(_this),"selection0",236),_defineProperty(_assertThisInitialized(_this),"selection1",144),_defineProperty(_assertThisInitialized(_this),"current",236),_defineProperty(_assertThisInitialized(_this),"dataTexture",void 0),_defineProperty(_assertThisInitialized(_this),"dataTextureSize",16),_defineProperty(_assertThisInitialized(_this),"updateCMDs",[]),_defineProperty(_assertThisInitialized(_this),"highlightAnimationProps",{start:0,stop:1,duration:1e3,onUpdate:function onUpdate(value){_this.material.uniforms.u_animateIn=value}}),_defineProperty(_assertThisInitialized(_this),"init",(function(gl,cb){_this.geometry.init(gl);var texturesConfig={surface:{src:_this.textureSrc.surface,minMag:gl.LINEAR}};console.log(_this.textureSrc),_this.material.init(gl),_this.material.uniforms.uModelMatrix=_this.modelMatrix,_this.material.loadTextures(gl,texturesConfig,(function(){_this.material.uniforms.u_surface=_this.material.textures.surface,cb&&cb()}))})),_defineProperty(_assertThisInitialized(_this),"getValueForId",(function(id){return _this.lookup.getFromId(id)})),_defineProperty(_assertThisInitialized(_this),"getValueForCode",(function(code){return _this.lookup.getFromCode(code)})),_defineProperty(_assertThisInitialized(_this),"getValueForName",(function(name){return _this.lookup.getFromName(name)})),_defineProperty(_assertThisInitialized(_this),"setIdColor",(function(id,color,alpha){var a=void 0===alpha?1:alpha,c=GKUtils.hexToRGBA(color,a,!1);_this.updateCMDs.push((function(gl){_this.dataTexture.updatePixelId(gl,c,id)}))})),_defineProperty(_assertThisInitialized(_this),"createCollisionGeo",(function(){_this.collisionGeometry&&_this.collisionGeometry instanceof GKCollision||(_this.collisionGeometry=GKCollider.create_collision_geometry(_this.geometry.vertices.position.data,_this.geometry.vertices.texcoord.data,_this.geometry.vertices.indices.data))})),_defineProperty(_assertThisInitialized(_this),"rayCastFrom",(function(ray){return _this.collisionGeometry.raycast(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"hitTest",(function(ray){return _this.collisionGeometry.hitTest(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"onSelectionCB",(function(selectionObj){})),_defineProperty(_assertThisInitialized(_this),"onSelection",(function(lat,lon,collision){GKUtils.latLonFromWorld(collision.point)})),_defineProperty(_assertThisInitialized(_this),"onHover",(function(collision){console.log("IcosphereLookup.onHover",collision)})),_defineProperty(_assertThisInitialized(_this),"update",(function(gl,sceneProps,time){_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(Lowpoly.prototype)),"update",_thisSuper).call(_thisSuper,sceneProps,time),_this.material.uniforms.u_model=_this.modelMatrix,_this.updateCMDs.forEach((function(cmd){cmd(gl)})),_this.updateCMDs=[]})),_defineProperty(_assertThisInitialized(_this),"draw",(function(gl){_this.isReady&&_this.shouldDraw&&(gl.useProgram(_this.material.programInfo.program),setBuffersAndAttributes(gl,_this.material.programInfo,_this.geometry.bufferInfo),setUniforms(_this.material.programInfo,_this.material.uniforms),gl.drawArrays(gl.TRIANGLES,0,_this.geometry.bufferInfo.numElements))})),_defineProperty(_assertThisInitialized(_this),"setCountryHover",(function(countryIndex){})),_defineProperty(_assertThisInitialized(_this),"setHighlightId",(function(id){_this.previousSelection=_this.currentSelection,_this.currentSelection=id;var animateOutStart=_this.inAnimation?_this.inAnimation.currentValue():1,animateOutDuration=300*animateOutStart;_this.animateIn(_this.currentSelection,500),_this.animateOut(_this.previousSelection,animateOutDuration,animateOutStart)})),_defineProperty(_assertThisInitialized(_this),"animateIn",(function(id,duration,cb){_this.material.uniforms.u_idAnimateIn=id,_this.inAnimation&&_this.inAnimation.stop(),_this.material.uniforms.u_animateIn=0,_this.inAnimation=new Tween(_this.highlightAnimationProps.start,_this.highlightAnimationProps.stop,_this.highlightAnimationProps.duration,{onUpdate:_this.highlightAnimationProps.onUpdate})})),_defineProperty(_assertThisInitialized(_this),"animateOut",(function(id,duration,start,cb){_this.material.uniforms.u_idAnimateOut=id,_this.outAnimation&&_this.outAnimation.stop(),_this.material.uniforms.u_animateOut=start,_this.outAnimation=new Tween(start,0,duration,{onUpdate:function onUpdate(value){_this.material.uniforms.u_animateOut=value}})})),_defineProperty(_assertThisInitialized(_this),"addDataset",(function(data){_this.lookup=new Lookup(data,_this.textureSrc.id)})),_defineProperty(_assertThisInitialized(_this),"updateIdState",(function(id,state){})),_this.textureSrc={surface:textureSrc.surface},_this.material=new ShaderMaterial(shaders$4),_this.material.uniforms=uniforms$4,_this.geometry=new Geometry;var currentPos=0,fBuff=new Float32Array(geometryBin),iBuff=new Int32Array(geometryBin),p=fBuff.subarray(currentPos,currentPos+34992);currentPos+=34992;var n=fBuff.subarray(currentPos,currentPos+34992);currentPos+=34992;var t=fBuff.subarray(currentPos,currentPos+34992);currentPos+=34992;var i=iBuff.subarray(currentPos,currentPos+11664);return _this.geometry.vertices.position={numComponents:3,data:p},_this.geometry.vertices.normal={numComponents:3,data:n},_this.geometry.vertices.texcoord={numComponents:3,data:t},_this.geometry.vertices.indices={numComponents:3,data:i},_this}return Lowpoly}(Globe),shaders$5={vertex:"#define GLSLIFY 1\nattribute vec4 position;attribute vec2 texcoord;uniform mat4 u_worldViewProjection;uniform mat4 u_viewInverse;uniform mat4 u_model;uniform vec3 u_cameraPos;varying float vAlpha;varying vec2 vTexture;void main(){vTexture=texcoord;gl_Position=position;}",fragment:"precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_background;varying float vAlpha;varying vec2 vTexture;void main(){vec4 textureColor=texture2D(u_background,vTexture);gl_FragColor=vec4(textureColor.rgb,1.0);}"},uniforms$5={u_lightWorldPos:[1,3,-8],u_lightColor:[1,.8,.8,1],u_ambient:[1,1,1,1],u_specular:[1,1,1,1],u_shininess:100,u_specularFactor:.1,uModelMatrix:[],uCameraMatrix:[],uPerspectiveMatrix:[],uCameraPos:[0,0,0]},Background=function(_Drawable){_inherits(Background,_Drawable);var _super=_createSuper(Background);function Background(textureSrc){var _thisSuper,_this;return _classCallCheck(this,Background),_defineProperty(_assertThisInitialized(_this=_super.call(this)),"material",null),_defineProperty(_assertThisInitialized(_this),"init",(function(gl){_this.geometry=new Geometry,_this.geometry.vertices.position=[-1,-1,1,-1,1,1,1,1,1,1,-1,1],_this.geometry.vertices.texcoord=[0,0,0,1,1,1,1,0],_this.geometry.vertices.indices=[0,2,1,0,3,2],_this.geometry.init(gl);var texturesConfig={background:{src:_this.textureSrc.background,minMag:gl.LINEAR}};_this.material.init(gl),_this.material.loadTextures(gl,texturesConfig,(function(){_this.material.uniforms.u_background=_this.material.textures.background}))})),_defineProperty(_assertThisInitialized(_this),"createCollisionGeo",(function(){})),_defineProperty(_assertThisInitialized(_this),"rayCastFrom",(function(ray){return _this.collisionGeometry.raycast(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"hitTest",(function(ray){return _this.collisionGeometry.hitTest(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"onSelection",(function(lat,lon,selection){console.log("Icosphere.onSelection",GKUtils.latLonFromWorld(selection.point))})),_defineProperty(_assertThisInitialized(_this),"update",(function(gl,sceneProps,time){_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(Background.prototype)),"update",_thisSuper).call(_thisSuper,sceneProps,time),_this.material.uniforms.u_model=_this.modelMatrix})),_defineProperty(_assertThisInitialized(_this),"draw",(function(gl){_this.isReady&&(gl.disable(gl.DEPTH_TEST),gl.useProgram(_this.material.programInfo.program),setBuffersAndAttributes(gl,_this.material.programInfo,_this.geometry.bufferInfo),setUniforms(_this.material.programInfo,_this.material.uniforms),gl.drawElements(gl.TRIANGLES,_this.geometry.bufferInfo.numElements,gl.UNSIGNED_SHORT,0),gl.enable(gl.DEPTH_TEST))})),_this.material=new ShaderMaterial(shaders$5),_this.material.uniforms=uniforms$5,_this.textureSrc={background:textureSrc},_this}return Background}(Drawable),shaders$6={vertex:"#define GLSLIFY 1\nattribute vec4 position;attribute vec2 texcoord;uniform mat4 u_worldViewProjection;uniform mat4 u_viewInverse;uniform mat4 u_model;uniform mat4 u_view;uniform float u_scale;uniform vec3 u_cameraPos;varying float vAlpha;varying vec2 vTexture;void main(){vec3 cameraRight=vec3(u_view[0][0],u_view[1][0],u_view[2][0]);vec3 cameraUp=vec3(u_view[0][1],u_view[1][1],u_view[2][1]);vec3 cameraForward=normalize(u_cameraPos);vec3 worldPos=cameraRight*position.x*u_scale+cameraUp*position.y*u_scale+cameraForward;vec4 pos=u_worldViewProjection*vec4(worldPos,1.0);gl_Position=pos;vTexture=texcoord;}",fragment:"precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_background;varying float vAlpha;varying vec2 vTexture;void main(){gl_FragColor=vec4(1.0);}"},uniforms$6={u_lightWorldPos:[1,3,-8],u_lightColor:[1,.8,.8,1],u_ambient:[1,1,1,1],u_specular:[1,1,1,1],u_shininess:100,u_specularFactor:.1,uModelMatrix:[],uCameraMatrix:[],uPerspectiveMatrix:[],uCameraPos:[0,0,0],u_scale:1},Atmosphere=function(_Drawable){_inherits(Atmosphere,_Drawable);var _super=_createSuper(Atmosphere);function Atmosphere(params){var _thisSuper,_this;return _classCallCheck(this,Atmosphere),_defineProperty(_assertThisInitialized(_this=_super.call(this)),"material",null),_defineProperty(_assertThisInitialized(_this),"useTexture",!1),_defineProperty(_assertThisInitialized(_this),"nScale",1),_defineProperty(_assertThisInitialized(_this),"init",(function(gl){if(_this.geometry=new Geometry,_this.geometry.vertices.position=[-1,-1,0,-1,1,0,1,1,0,1,-1,0],_this.geometry.vertices.texcoord=[0,0,0,1,1,1,1,0],_this.geometry.vertices.indices=[0,2,1,0,3,2],_this.geometry.init(gl),_this.material.init(gl),_this.useTexture){var texturesConfig={background:{src:_this.textureSrc.texture,minMag:gl.LINEAR}};_this.material.loadTextures(gl,texturesConfig,(function(){_this.material.uniforms.u_background=_this.material.textures.background}))}else _this.material.texturesLoaded=!0})),_defineProperty(_assertThisInitialized(_this),"createCollisionGeo",(function(){})),_defineProperty(_assertThisInitialized(_this),"rayCastFrom",(function(ray){return _this.collisionGeometry.raycast(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"hitTest",(function(ray){return _this.collisionGeometry.hitTest(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"onSelection",(function(lat,lon,selection){console.log("Icosphere.onSelection",GKUtils.latLonFromWorld(selection.point))})),_defineProperty(_assertThisInitialized(_this),"update",(function(gl,sceneProps,time){_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(Atmosphere.prototype)),"update",_thisSuper).call(_thisSuper,sceneProps,time),_this.material.uniforms.u_model=_this.modelMatrix,_this.material.uniforms.u_scale=_this.nScale})),_defineProperty(_assertThisInitialized(_this),"draw",(function(gl){_this.isReady&&(gl.useProgram(_this.material.programInfo.program),setBuffersAndAttributes(gl,_this.material.programInfo,_this.geometry.bufferInfo),setUniforms(_this.material.programInfo,_this.material.uniforms),gl.drawElements(gl.TRIANGLES,_this.geometry.bufferInfo.numElements,gl.UNSIGNED_SHORT,0))})),params.texture&&(_this.useTexture=!0,shaders$6.fragment="precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_background;varying float vAlpha;varying vec2 vTexture;void main(){vec4 textureColor=texture2D(u_background,vTexture);gl_FragColor=textureColor;}",_this.textureSrc={texture:params.texture}),_this.material=new ShaderMaterial(shaders$6),_this.material.uniforms=uniforms$6,_this}return Atmosphere}(Drawable),shaders$7={vertex:"#define GLSLIFY 1\nattribute vec4 position;attribute vec2 texcoord;uniform mat4 u_worldViewProjection;uniform mat4 u_viewInverse;uniform mat4 u_model;uniform mat4 u_view;uniform float u_scale;uniform vec3 u_point;uniform vec2 u_resolution;uniform vec3 u_cameraPos;varying float vAlpha;varying vec2 vTexture;void main(){vec4 pos=u_worldViewProjection*vec4(u_point,1.0);float size=u_scale*16.0;pos.y+=(size*5.0/u_resolution.y);gl_PointSize=size;gl_Position=pos;vTexture=texcoord;}",fragment:"precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_background;varying float vAlpha;varying vec2 vTexture;void main(){vec4 textureColor=texture2D(u_background,gl_PointCoord);gl_FragColor=textureColor;}"},uniforms$7={u_lightWorldPos:[1,3,-8],u_lightColor:[1,.8,.8,1],u_ambient:[1,1,1,1],u_specular:[1,1,1,1],u_shininess:100,u_specularFactor:.1,uModelMatrix:[],uCameraMatrix:[],uPerspectiveMatrix:[],uCameraPos:[0,0,0],u_scale:1,u_point:[0,0,1]},QuadNormal=function(_Drawable){_inherits(QuadNormal,_Drawable);var _super=_createSuper(QuadNormal);function QuadNormal(params){var _thisSuper,_this;return _classCallCheck(this,QuadNormal),_defineProperty(_assertThisInitialized(_this=_super.call(this)),"material",null),_defineProperty(_assertThisInitialized(_this),"useTexture",!1),_defineProperty(_assertThisInitialized(_this),"nScale",1),_defineProperty(_assertThisInitialized(_this),"point",[0,0,1]),_defineProperty(_assertThisInitialized(_this),"init",(function(gl){_this.geometry=new Geometry,_this.geometry.vertices.position=[0,0,1],_this.geometry.init(gl),_this.material.init(gl);var texturesConfig={background:{src:_this.textureSrc.texture,minMag:gl.LINEAR}};_this.material.loadTextures(gl,texturesConfig,(function(){_this.material.uniforms.u_background=_this.material.textures.background}))})),_defineProperty(_assertThisInitialized(_this),"createCollisionGeo",(function(){})),_defineProperty(_assertThisInitialized(_this),"rayCastFrom",(function(ray){return _this.collisionGeometry.raycast(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"hitTest",(function(ray){return _this.collisionGeometry.hitTest(ray.origin,ray.direction)})),_defineProperty(_assertThisInitialized(_this),"onSelection",(function(lat,lon,selection){console.log("Icosphere.onSelection",GKUtils.latLonFromWorld(selection.point))})),_defineProperty(_assertThisInitialized(_this),"update",(function(gl,sceneProps,time){_get((_thisSuper=_assertThisInitialized(_this),_getPrototypeOf(QuadNormal.prototype)),"update",_thisSuper).call(_thisSuper,sceneProps,time),_this.material.uniforms.u_model=_this.modelMatrix,_this.material.uniforms.u_scale=_this.nScale,_this.material.uniforms.u_point=_this.point})),_defineProperty(_assertThisInitialized(_this),"draw",(function(gl){_this.isReady&&(gl.disable(gl.DEPTH_TEST),gl.useProgram(_this.material.programInfo.program),setBuffersAndAttributes(gl,_this.material.programInfo,_this.geometry.bufferInfo),setUniforms(_this.material.programInfo,_this.material.uniforms),gl.drawArrays(gl.POINTS,0,_this.geometry.bufferInfo.numElements),gl.enable(gl.DEPTH_TEST))})),_defineProperty(_assertThisInitialized(_this),"setPoint",(function(lat,lon,alt){var altitude=void 0===alt?0:alt;_this.point=GKUtils.worldFromLatLon(lat,lon,altitude)})),_this.textureSrc={texture:params.texture},_this.material=new ShaderMaterial(shaders$7),_this.material.uniforms=uniforms$7,_this}return QuadNormal}(Drawable),CalloutDefinition=function CalloutDefinition(latitude,longitude,calloutClass,data){_classCallCheck(this,CalloutDefinition),_defineProperty(this,"id",Math.random().toFixed(16).substr(2)),_defineProperty(this,"latitude",0),_defineProperty(this,"longitude",0),_defineProperty(this,"altitude",0),_defineProperty(this,"calloutClass",void 0),_defineProperty(this,"data",void 0),this.latitude=latitude,this.longitude=longitude,this.calloutClass=calloutClass,this.data=data},Callout=function(){function Callout(definition){var _this=this;_classCallCheck(this,Callout),_defineProperty(this,"drawables",[]),_defineProperty(this,"element",void 0),_defineProperty(this,"definition",void 0),_defineProperty(this,"size",{width:0,height:0}),this.definition=definition,this.element=this.createElement(),this.resizeObserver=new index((function(entries){entries.length&&(_this.size=entries[0].contentRect)})),this.resizeObserver.observe(this.element)}return _createClass(Callout,[{key:"release",value:function release(){this.resizeObserver.disconnect()}},{key:"createElement",value:function createElement(){return document.createElement("div")}},{key:"animateIn",value:function animateIn(){}},{key:"animateOut",value:function animateOut(onComplete){onComplete(this)}},{key:"update",value:function update(time){this.drawables.forEach((function(drawable){return drawable.update(time)}))}},{key:"setPosition",value:function setPosition(position){this.element.style.transform="translate(".concat(position.screen.x,"px, ").concat(position.screen.y,"px)")}}]),Callout}()}.call(this,__webpack_require__(483),__webpack_require__(1877).Buffer,__webpack_require__(35))}}]);
//# sourceMappingURL=0.ad315194e793771bda90.bundle.js.map